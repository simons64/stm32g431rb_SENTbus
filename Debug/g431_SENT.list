
g431_SENT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005044  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000fc  08005224  08005224  00015224  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005320  08005320  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005320  08005320  00015320  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005328  08005328  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005328  08005328  00015328  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800532c  0800532c  0001532c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005330  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000091c  20000070  080053a0  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000098c  080053a0  0002098c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012be1  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023e7  00000000  00000000  00032c81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001050  00000000  00000000  00035068  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f78  00000000  00000000  000360b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001eed2  00000000  00000000  00037030  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012355  00000000  00000000  00055f02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c74d5  00000000  00000000  00068257  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0012f72c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004d3c  00000000  00000000  0012f77c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000070 	.word	0x20000070
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800520c 	.word	0x0800520c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000074 	.word	0x20000074
 800021c:	0800520c 	.word	0x0800520c

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b974 	b.w	80005c0 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468e      	mov	lr, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14d      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4694      	mov	ip, r2
 8000302:	d969      	bls.n	80003d8 <__udivmoddi4+0xe8>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b152      	cbz	r2, 8000320 <__udivmoddi4+0x30>
 800030a:	fa01 f302 	lsl.w	r3, r1, r2
 800030e:	f1c2 0120 	rsb	r1, r2, #32
 8000312:	fa20 f101 	lsr.w	r1, r0, r1
 8000316:	fa0c fc02 	lsl.w	ip, ip, r2
 800031a:	ea41 0e03 	orr.w	lr, r1, r3
 800031e:	4094      	lsls	r4, r2
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	0c21      	lsrs	r1, r4, #16
 8000326:	fbbe f6f8 	udiv	r6, lr, r8
 800032a:	fa1f f78c 	uxth.w	r7, ip
 800032e:	fb08 e316 	mls	r3, r8, r6, lr
 8000332:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000336:	fb06 f107 	mul.w	r1, r6, r7
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 30ff 	add.w	r0, r6, #4294967295
 8000346:	f080 811f 	bcs.w	8000588 <__udivmoddi4+0x298>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 811c 	bls.w	8000588 <__udivmoddi4+0x298>
 8000350:	3e02      	subs	r6, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a5b      	subs	r3, r3, r1
 8000356:	b2a4      	uxth	r4, r4
 8000358:	fbb3 f0f8 	udiv	r0, r3, r8
 800035c:	fb08 3310 	mls	r3, r8, r0, r3
 8000360:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000364:	fb00 f707 	mul.w	r7, r0, r7
 8000368:	42a7      	cmp	r7, r4
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x92>
 800036c:	eb1c 0404 	adds.w	r4, ip, r4
 8000370:	f100 33ff 	add.w	r3, r0, #4294967295
 8000374:	f080 810a 	bcs.w	800058c <__udivmoddi4+0x29c>
 8000378:	42a7      	cmp	r7, r4
 800037a:	f240 8107 	bls.w	800058c <__udivmoddi4+0x29c>
 800037e:	4464      	add	r4, ip
 8000380:	3802      	subs	r0, #2
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	1be4      	subs	r4, r4, r7
 8000388:	2600      	movs	r6, #0
 800038a:	b11d      	cbz	r5, 8000394 <__udivmoddi4+0xa4>
 800038c:	40d4      	lsrs	r4, r2
 800038e:	2300      	movs	r3, #0
 8000390:	e9c5 4300 	strd	r4, r3, [r5]
 8000394:	4631      	mov	r1, r6
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d909      	bls.n	80003b2 <__udivmoddi4+0xc2>
 800039e:	2d00      	cmp	r5, #0
 80003a0:	f000 80ef 	beq.w	8000582 <__udivmoddi4+0x292>
 80003a4:	2600      	movs	r6, #0
 80003a6:	e9c5 0100 	strd	r0, r1, [r5]
 80003aa:	4630      	mov	r0, r6
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	fab3 f683 	clz	r6, r3
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	d14a      	bne.n	8000450 <__udivmoddi4+0x160>
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d302      	bcc.n	80003c4 <__udivmoddi4+0xd4>
 80003be:	4282      	cmp	r2, r0
 80003c0:	f200 80f9 	bhi.w	80005b6 <__udivmoddi4+0x2c6>
 80003c4:	1a84      	subs	r4, r0, r2
 80003c6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ca:	2001      	movs	r0, #1
 80003cc:	469e      	mov	lr, r3
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	d0e0      	beq.n	8000394 <__udivmoddi4+0xa4>
 80003d2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003d6:	e7dd      	b.n	8000394 <__udivmoddi4+0xa4>
 80003d8:	b902      	cbnz	r2, 80003dc <__udivmoddi4+0xec>
 80003da:	deff      	udf	#255	; 0xff
 80003dc:	fab2 f282 	clz	r2, r2
 80003e0:	2a00      	cmp	r2, #0
 80003e2:	f040 8092 	bne.w	800050a <__udivmoddi4+0x21a>
 80003e6:	eba1 010c 	sub.w	r1, r1, ip
 80003ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ee:	fa1f fe8c 	uxth.w	lr, ip
 80003f2:	2601      	movs	r6, #1
 80003f4:	0c20      	lsrs	r0, r4, #16
 80003f6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003fa:	fb07 1113 	mls	r1, r7, r3, r1
 80003fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000402:	fb0e f003 	mul.w	r0, lr, r3
 8000406:	4288      	cmp	r0, r1
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x12c>
 800040a:	eb1c 0101 	adds.w	r1, ip, r1
 800040e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x12a>
 8000414:	4288      	cmp	r0, r1
 8000416:	f200 80cb 	bhi.w	80005b0 <__udivmoddi4+0x2c0>
 800041a:	4643      	mov	r3, r8
 800041c:	1a09      	subs	r1, r1, r0
 800041e:	b2a4      	uxth	r4, r4
 8000420:	fbb1 f0f7 	udiv	r0, r1, r7
 8000424:	fb07 1110 	mls	r1, r7, r0, r1
 8000428:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800042c:	fb0e fe00 	mul.w	lr, lr, r0
 8000430:	45a6      	cmp	lr, r4
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x156>
 8000434:	eb1c 0404 	adds.w	r4, ip, r4
 8000438:	f100 31ff 	add.w	r1, r0, #4294967295
 800043c:	d202      	bcs.n	8000444 <__udivmoddi4+0x154>
 800043e:	45a6      	cmp	lr, r4
 8000440:	f200 80bb 	bhi.w	80005ba <__udivmoddi4+0x2ca>
 8000444:	4608      	mov	r0, r1
 8000446:	eba4 040e 	sub.w	r4, r4, lr
 800044a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800044e:	e79c      	b.n	800038a <__udivmoddi4+0x9a>
 8000450:	f1c6 0720 	rsb	r7, r6, #32
 8000454:	40b3      	lsls	r3, r6
 8000456:	fa22 fc07 	lsr.w	ip, r2, r7
 800045a:	ea4c 0c03 	orr.w	ip, ip, r3
 800045e:	fa20 f407 	lsr.w	r4, r0, r7
 8000462:	fa01 f306 	lsl.w	r3, r1, r6
 8000466:	431c      	orrs	r4, r3
 8000468:	40f9      	lsrs	r1, r7
 800046a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800046e:	fa00 f306 	lsl.w	r3, r0, r6
 8000472:	fbb1 f8f9 	udiv	r8, r1, r9
 8000476:	0c20      	lsrs	r0, r4, #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fb09 1118 	mls	r1, r9, r8, r1
 8000480:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000484:	fb08 f00e 	mul.w	r0, r8, lr
 8000488:	4288      	cmp	r0, r1
 800048a:	fa02 f206 	lsl.w	r2, r2, r6
 800048e:	d90b      	bls.n	80004a8 <__udivmoddi4+0x1b8>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f108 3aff 	add.w	sl, r8, #4294967295
 8000498:	f080 8088 	bcs.w	80005ac <__udivmoddi4+0x2bc>
 800049c:	4288      	cmp	r0, r1
 800049e:	f240 8085 	bls.w	80005ac <__udivmoddi4+0x2bc>
 80004a2:	f1a8 0802 	sub.w	r8, r8, #2
 80004a6:	4461      	add	r1, ip
 80004a8:	1a09      	subs	r1, r1, r0
 80004aa:	b2a4      	uxth	r4, r4
 80004ac:	fbb1 f0f9 	udiv	r0, r1, r9
 80004b0:	fb09 1110 	mls	r1, r9, r0, r1
 80004b4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004bc:	458e      	cmp	lr, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x1e2>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004c8:	d26c      	bcs.n	80005a4 <__udivmoddi4+0x2b4>
 80004ca:	458e      	cmp	lr, r1
 80004cc:	d96a      	bls.n	80005a4 <__udivmoddi4+0x2b4>
 80004ce:	3802      	subs	r0, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004d6:	fba0 9402 	umull	r9, r4, r0, r2
 80004da:	eba1 010e 	sub.w	r1, r1, lr
 80004de:	42a1      	cmp	r1, r4
 80004e0:	46c8      	mov	r8, r9
 80004e2:	46a6      	mov	lr, r4
 80004e4:	d356      	bcc.n	8000594 <__udivmoddi4+0x2a4>
 80004e6:	d053      	beq.n	8000590 <__udivmoddi4+0x2a0>
 80004e8:	b15d      	cbz	r5, 8000502 <__udivmoddi4+0x212>
 80004ea:	ebb3 0208 	subs.w	r2, r3, r8
 80004ee:	eb61 010e 	sbc.w	r1, r1, lr
 80004f2:	fa01 f707 	lsl.w	r7, r1, r7
 80004f6:	fa22 f306 	lsr.w	r3, r2, r6
 80004fa:	40f1      	lsrs	r1, r6
 80004fc:	431f      	orrs	r7, r3
 80004fe:	e9c5 7100 	strd	r7, r1, [r5]
 8000502:	2600      	movs	r6, #0
 8000504:	4631      	mov	r1, r6
 8000506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050a:	f1c2 0320 	rsb	r3, r2, #32
 800050e:	40d8      	lsrs	r0, r3
 8000510:	fa0c fc02 	lsl.w	ip, ip, r2
 8000514:	fa21 f303 	lsr.w	r3, r1, r3
 8000518:	4091      	lsls	r1, r2
 800051a:	4301      	orrs	r1, r0
 800051c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000520:	fa1f fe8c 	uxth.w	lr, ip
 8000524:	fbb3 f0f7 	udiv	r0, r3, r7
 8000528:	fb07 3610 	mls	r6, r7, r0, r3
 800052c:	0c0b      	lsrs	r3, r1, #16
 800052e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000532:	fb00 f60e 	mul.w	r6, r0, lr
 8000536:	429e      	cmp	r6, r3
 8000538:	fa04 f402 	lsl.w	r4, r4, r2
 800053c:	d908      	bls.n	8000550 <__udivmoddi4+0x260>
 800053e:	eb1c 0303 	adds.w	r3, ip, r3
 8000542:	f100 38ff 	add.w	r8, r0, #4294967295
 8000546:	d22f      	bcs.n	80005a8 <__udivmoddi4+0x2b8>
 8000548:	429e      	cmp	r6, r3
 800054a:	d92d      	bls.n	80005a8 <__udivmoddi4+0x2b8>
 800054c:	3802      	subs	r0, #2
 800054e:	4463      	add	r3, ip
 8000550:	1b9b      	subs	r3, r3, r6
 8000552:	b289      	uxth	r1, r1
 8000554:	fbb3 f6f7 	udiv	r6, r3, r7
 8000558:	fb07 3316 	mls	r3, r7, r6, r3
 800055c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000560:	fb06 f30e 	mul.w	r3, r6, lr
 8000564:	428b      	cmp	r3, r1
 8000566:	d908      	bls.n	800057a <__udivmoddi4+0x28a>
 8000568:	eb1c 0101 	adds.w	r1, ip, r1
 800056c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000570:	d216      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000572:	428b      	cmp	r3, r1
 8000574:	d914      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000576:	3e02      	subs	r6, #2
 8000578:	4461      	add	r1, ip
 800057a:	1ac9      	subs	r1, r1, r3
 800057c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000580:	e738      	b.n	80003f4 <__udivmoddi4+0x104>
 8000582:	462e      	mov	r6, r5
 8000584:	4628      	mov	r0, r5
 8000586:	e705      	b.n	8000394 <__udivmoddi4+0xa4>
 8000588:	4606      	mov	r6, r0
 800058a:	e6e3      	b.n	8000354 <__udivmoddi4+0x64>
 800058c:	4618      	mov	r0, r3
 800058e:	e6f8      	b.n	8000382 <__udivmoddi4+0x92>
 8000590:	454b      	cmp	r3, r9
 8000592:	d2a9      	bcs.n	80004e8 <__udivmoddi4+0x1f8>
 8000594:	ebb9 0802 	subs.w	r8, r9, r2
 8000598:	eb64 0e0c 	sbc.w	lr, r4, ip
 800059c:	3801      	subs	r0, #1
 800059e:	e7a3      	b.n	80004e8 <__udivmoddi4+0x1f8>
 80005a0:	4646      	mov	r6, r8
 80005a2:	e7ea      	b.n	800057a <__udivmoddi4+0x28a>
 80005a4:	4620      	mov	r0, r4
 80005a6:	e794      	b.n	80004d2 <__udivmoddi4+0x1e2>
 80005a8:	4640      	mov	r0, r8
 80005aa:	e7d1      	b.n	8000550 <__udivmoddi4+0x260>
 80005ac:	46d0      	mov	r8, sl
 80005ae:	e77b      	b.n	80004a8 <__udivmoddi4+0x1b8>
 80005b0:	3b02      	subs	r3, #2
 80005b2:	4461      	add	r1, ip
 80005b4:	e732      	b.n	800041c <__udivmoddi4+0x12c>
 80005b6:	4630      	mov	r0, r6
 80005b8:	e709      	b.n	80003ce <__udivmoddi4+0xde>
 80005ba:	4464      	add	r4, ip
 80005bc:	3802      	subs	r0, #2
 80005be:	e742      	b.n	8000446 <__udivmoddi4+0x156>

080005c0 <__aeabi_idiv0>:
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop

080005c4 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b082      	sub	sp, #8
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&hlpuart1, (uint8_t *)&ch, 1, 10);
 80005cc:	1d39      	adds	r1, r7, #4
 80005ce:	230a      	movs	r3, #10
 80005d0:	2201      	movs	r2, #1
 80005d2:	4804      	ldr	r0, [pc, #16]	; (80005e4 <__io_putchar+0x20>)
 80005d4:	f002 ffca 	bl	800356c <HAL_UART_Transmit>
  return ch;
 80005d8:	687b      	ldr	r3, [r7, #4]
}
 80005da:	4618      	mov	r0, r3
 80005dc:	3708      	adds	r7, #8
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	2000008c 	.word	0x2000008c

080005e8 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef* htim)
{
 80005e8:	b480      	push	{r7}
 80005ea:	b083      	sub	sp, #12
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
	cnt = TIM8->CNT;
 80005f0:	4b1f      	ldr	r3, [pc, #124]	; (8000670 <HAL_TIM_IC_CaptureCallback+0x88>)
 80005f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80005f4:	b29a      	uxth	r2, r3
 80005f6:	4b1f      	ldr	r3, [pc, #124]	; (8000674 <HAL_TIM_IC_CaptureCallback+0x8c>)
 80005f8:	801a      	strh	r2, [r3, #0]
	ccr2 = TIM8->CCR2;
 80005fa:	4b1d      	ldr	r3, [pc, #116]	; (8000670 <HAL_TIM_IC_CaptureCallback+0x88>)
 80005fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80005fe:	b29a      	uxth	r2, r3
 8000600:	4b1d      	ldr	r3, [pc, #116]	; (8000678 <HAL_TIM_IC_CaptureCallback+0x90>)
 8000602:	801a      	strh	r2, [r3, #0]
//	diff_buf[diff_buf_cnt] = ccr2;
	diff_buf[diff_buf_cnt] = TIM8->CCR2 > prev_ccr2 ? TIM8->CCR2 - prev_ccr2 : TIM8->CCR2 + UINT16_MAX - prev_ccr2;
 8000604:	4b1a      	ldr	r3, [pc, #104]	; (8000670 <HAL_TIM_IC_CaptureCallback+0x88>)
 8000606:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000608:	4a1c      	ldr	r2, [pc, #112]	; (800067c <HAL_TIM_IC_CaptureCallback+0x94>)
 800060a:	8812      	ldrh	r2, [r2, #0]
 800060c:	4293      	cmp	r3, r2
 800060e:	d907      	bls.n	8000620 <HAL_TIM_IC_CaptureCallback+0x38>
 8000610:	4b17      	ldr	r3, [pc, #92]	; (8000670 <HAL_TIM_IC_CaptureCallback+0x88>)
 8000612:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000614:	b29a      	uxth	r2, r3
 8000616:	4b19      	ldr	r3, [pc, #100]	; (800067c <HAL_TIM_IC_CaptureCallback+0x94>)
 8000618:	881b      	ldrh	r3, [r3, #0]
 800061a:	1ad3      	subs	r3, r2, r3
 800061c:	b29b      	uxth	r3, r3
 800061e:	e008      	b.n	8000632 <HAL_TIM_IC_CaptureCallback+0x4a>
 8000620:	4b13      	ldr	r3, [pc, #76]	; (8000670 <HAL_TIM_IC_CaptureCallback+0x88>)
 8000622:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000624:	b29a      	uxth	r2, r3
 8000626:	4b15      	ldr	r3, [pc, #84]	; (800067c <HAL_TIM_IC_CaptureCallback+0x94>)
 8000628:	881b      	ldrh	r3, [r3, #0]
 800062a:	1ad3      	subs	r3, r2, r3
 800062c:	b29b      	uxth	r3, r3
 800062e:	3b01      	subs	r3, #1
 8000630:	b29b      	uxth	r3, r3
 8000632:	4a13      	ldr	r2, [pc, #76]	; (8000680 <HAL_TIM_IC_CaptureCallback+0x98>)
 8000634:	8812      	ldrh	r2, [r2, #0]
 8000636:	4611      	mov	r1, r2
 8000638:	4a12      	ldr	r2, [pc, #72]	; (8000684 <HAL_TIM_IC_CaptureCallback+0x9c>)
 800063a:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
	if(++diff_buf_cnt >= 1024)
 800063e:	4b10      	ldr	r3, [pc, #64]	; (8000680 <HAL_TIM_IC_CaptureCallback+0x98>)
 8000640:	881b      	ldrh	r3, [r3, #0]
 8000642:	3301      	adds	r3, #1
 8000644:	b29a      	uxth	r2, r3
 8000646:	4b0e      	ldr	r3, [pc, #56]	; (8000680 <HAL_TIM_IC_CaptureCallback+0x98>)
 8000648:	801a      	strh	r2, [r3, #0]
 800064a:	4b0d      	ldr	r3, [pc, #52]	; (8000680 <HAL_TIM_IC_CaptureCallback+0x98>)
 800064c:	881b      	ldrh	r3, [r3, #0]
 800064e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000652:	d302      	bcc.n	800065a <HAL_TIM_IC_CaptureCallback+0x72>
		diff_buf_cnt = 0;
 8000654:	4b0a      	ldr	r3, [pc, #40]	; (8000680 <HAL_TIM_IC_CaptureCallback+0x98>)
 8000656:	2200      	movs	r2, #0
 8000658:	801a      	strh	r2, [r3, #0]

	prev_ccr2 = TIM8->CCR2;
 800065a:	4b05      	ldr	r3, [pc, #20]	; (8000670 <HAL_TIM_IC_CaptureCallback+0x88>)
 800065c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800065e:	b29a      	uxth	r2, r3
 8000660:	4b06      	ldr	r3, [pc, #24]	; (800067c <HAL_TIM_IC_CaptureCallback+0x94>)
 8000662:	801a      	strh	r2, [r3, #0]
}
 8000664:	bf00      	nop
 8000666:	370c      	adds	r7, #12
 8000668:	46bd      	mov	sp, r7
 800066a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066e:	4770      	bx	lr
 8000670:	40013400 	.word	0x40013400
 8000674:	2000016a 	.word	0x2000016a
 8000678:	2000016c 	.word	0x2000016c
 800067c:	20000168 	.word	0x20000168
 8000680:	20000970 	.word	0x20000970
 8000684:	20000170 	.word	0x20000170

08000688 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b082      	sub	sp, #8
 800068c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800068e:	f000 fb98 	bl	8000dc2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000692:	f000 f845 	bl	8000720 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000696:	f000 f94d 	bl	8000934 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 800069a:	f000 f88b 	bl	80007b4 <MX_LPUART1_UART_Init>
  MX_TIM8_Init();
 800069e:	f000 f8d3 	bl	8000848 <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_MspInit(&htim8);
 80006a2:	481a      	ldr	r0, [pc, #104]	; (800070c <main+0x84>)
 80006a4:	f000 fa2e 	bl	8000b04 <HAL_TIM_Base_MspInit>
  //HAL_TIM_Base_Start_IT(&htim8);
  HAL_TIM_IC_Start_IT(&htim8, TIM_CHANNEL_2);
 80006a8:	2104      	movs	r1, #4
 80006aa:	4818      	ldr	r0, [pc, #96]	; (800070c <main+0x84>)
 80006ac:	f001 ff56 	bl	800255c <HAL_TIM_IC_Start_IT>
  printf("hello world\n");
 80006b0:	4817      	ldr	r0, [pc, #92]	; (8000710 <main+0x88>)
 80006b2:	f003 fe2d 	bl	8004310 <puts>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
//	printf("ccr2: %d\n", ccr2);
	for(int i=0; i<1024; i++) {
 80006b6:	2300      	movs	r3, #0
 80006b8:	607b      	str	r3, [r7, #4]
 80006ba:	e01e      	b.n	80006fa <main+0x72>
		printf("diff[%4d]: %5d %% %3d\n", i, diff_buf[i]/255, diff_buf[i]%255);
 80006bc:	4a15      	ldr	r2, [pc, #84]	; (8000714 <main+0x8c>)
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80006c4:	4a14      	ldr	r2, [pc, #80]	; (8000718 <main+0x90>)
 80006c6:	fba2 2303 	umull	r2, r3, r2, r3
 80006ca:	09db      	lsrs	r3, r3, #7
 80006cc:	b29b      	uxth	r3, r3
 80006ce:	4618      	mov	r0, r3
 80006d0:	4a10      	ldr	r2, [pc, #64]	; (8000714 <main+0x8c>)
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80006d8:	4b0f      	ldr	r3, [pc, #60]	; (8000718 <main+0x90>)
 80006da:	fba3 1302 	umull	r1, r3, r3, r2
 80006de:	09d9      	lsrs	r1, r3, #7
 80006e0:	460b      	mov	r3, r1
 80006e2:	021b      	lsls	r3, r3, #8
 80006e4:	1a5b      	subs	r3, r3, r1
 80006e6:	1ad3      	subs	r3, r2, r3
 80006e8:	b29b      	uxth	r3, r3
 80006ea:	4602      	mov	r2, r0
 80006ec:	6879      	ldr	r1, [r7, #4]
 80006ee:	480b      	ldr	r0, [pc, #44]	; (800071c <main+0x94>)
 80006f0:	f003 fd88 	bl	8004204 <iprintf>
	for(int i=0; i<1024; i++) {
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	3301      	adds	r3, #1
 80006f8:	607b      	str	r3, [r7, #4]
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000700:	dbdc      	blt.n	80006bc <main+0x34>
	}
	HAL_Delay(200);
 8000702:	20c8      	movs	r0, #200	; 0xc8
 8000704:	f000 fbce 	bl	8000ea4 <HAL_Delay>
	for(int i=0; i<1024; i++) {
 8000708:	e7d5      	b.n	80006b6 <main+0x2e>
 800070a:	bf00      	nop
 800070c:	2000011c 	.word	0x2000011c
 8000710:	08005224 	.word	0x08005224
 8000714:	20000170 	.word	0x20000170
 8000718:	80808081 	.word	0x80808081
 800071c:	08005230 	.word	0x08005230

08000720 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b094      	sub	sp, #80	; 0x50
 8000724:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000726:	f107 0318 	add.w	r3, r7, #24
 800072a:	2238      	movs	r2, #56	; 0x38
 800072c:	2100      	movs	r1, #0
 800072e:	4618      	mov	r0, r3
 8000730:	f003 fd60 	bl	80041f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000734:	1d3b      	adds	r3, r7, #4
 8000736:	2200      	movs	r2, #0
 8000738:	601a      	str	r2, [r3, #0]
 800073a:	605a      	str	r2, [r3, #4]
 800073c:	609a      	str	r2, [r3, #8]
 800073e:	60da      	str	r2, [r3, #12]
 8000740:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000742:	2000      	movs	r0, #0
 8000744:	f000 fe7a 	bl	800143c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000748:	2301      	movs	r3, #1
 800074a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800074c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000750:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000752:	2302      	movs	r3, #2
 8000754:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000756:	2303      	movs	r3, #3
 8000758:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 800075a:	2306      	movs	r3, #6
 800075c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800075e:	2355      	movs	r3, #85	; 0x55
 8000760:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000762:	2302      	movs	r3, #2
 8000764:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000766:	2302      	movs	r3, #2
 8000768:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800076a:	2302      	movs	r3, #2
 800076c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800076e:	f107 0318 	add.w	r3, r7, #24
 8000772:	4618      	mov	r0, r3
 8000774:	f000 ff16 	bl	80015a4 <HAL_RCC_OscConfig>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <SystemClock_Config+0x62>
  {
    Error_Handler();
 800077e:	f000 f93f 	bl	8000a00 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000782:	230f      	movs	r3, #15
 8000784:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000786:	2303      	movs	r3, #3
 8000788:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800078a:	2300      	movs	r3, #0
 800078c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800078e:	2300      	movs	r3, #0
 8000790:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000792:	2300      	movs	r3, #0
 8000794:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000796:	1d3b      	adds	r3, r7, #4
 8000798:	2104      	movs	r1, #4
 800079a:	4618      	mov	r0, r3
 800079c:	f001 fa1a 	bl	8001bd4 <HAL_RCC_ClockConfig>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80007a6:	f000 f92b 	bl	8000a00 <Error_Handler>
  }
}
 80007aa:	bf00      	nop
 80007ac:	3750      	adds	r7, #80	; 0x50
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}
	...

080007b4 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80007b8:	4b21      	ldr	r3, [pc, #132]	; (8000840 <MX_LPUART1_UART_Init+0x8c>)
 80007ba:	4a22      	ldr	r2, [pc, #136]	; (8000844 <MX_LPUART1_UART_Init+0x90>)
 80007bc:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80007be:	4b20      	ldr	r3, [pc, #128]	; (8000840 <MX_LPUART1_UART_Init+0x8c>)
 80007c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007c4:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007c6:	4b1e      	ldr	r3, [pc, #120]	; (8000840 <MX_LPUART1_UART_Init+0x8c>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80007cc:	4b1c      	ldr	r3, [pc, #112]	; (8000840 <MX_LPUART1_UART_Init+0x8c>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80007d2:	4b1b      	ldr	r3, [pc, #108]	; (8000840 <MX_LPUART1_UART_Init+0x8c>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80007d8:	4b19      	ldr	r3, [pc, #100]	; (8000840 <MX_LPUART1_UART_Init+0x8c>)
 80007da:	220c      	movs	r2, #12
 80007dc:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007de:	4b18      	ldr	r3, [pc, #96]	; (8000840 <MX_LPUART1_UART_Init+0x8c>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007e4:	4b16      	ldr	r3, [pc, #88]	; (8000840 <MX_LPUART1_UART_Init+0x8c>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80007ea:	4b15      	ldr	r3, [pc, #84]	; (8000840 <MX_LPUART1_UART_Init+0x8c>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007f0:	4b13      	ldr	r3, [pc, #76]	; (8000840 <MX_LPUART1_UART_Init+0x8c>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80007f6:	4812      	ldr	r0, [pc, #72]	; (8000840 <MX_LPUART1_UART_Init+0x8c>)
 80007f8:	f002 fe68 	bl	80034cc <HAL_UART_Init>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d001      	beq.n	8000806 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8000802:	f000 f8fd 	bl	8000a00 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000806:	2100      	movs	r1, #0
 8000808:	480d      	ldr	r0, [pc, #52]	; (8000840 <MX_LPUART1_UART_Init+0x8c>)
 800080a:	f003 fbff 	bl	800400c <HAL_UARTEx_SetTxFifoThreshold>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d001      	beq.n	8000818 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8000814:	f000 f8f4 	bl	8000a00 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000818:	2100      	movs	r1, #0
 800081a:	4809      	ldr	r0, [pc, #36]	; (8000840 <MX_LPUART1_UART_Init+0x8c>)
 800081c:	f003 fc34 	bl	8004088 <HAL_UARTEx_SetRxFifoThreshold>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d001      	beq.n	800082a <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8000826:	f000 f8eb 	bl	8000a00 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 800082a:	4805      	ldr	r0, [pc, #20]	; (8000840 <MX_LPUART1_UART_Init+0x8c>)
 800082c:	f003 fbb5 	bl	8003f9a <HAL_UARTEx_DisableFifoMode>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d001      	beq.n	800083a <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8000836:	f000 f8e3 	bl	8000a00 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800083a:	bf00      	nop
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	2000008c 	.word	0x2000008c
 8000844:	40008000 	.word	0x40008000

08000848 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b08c      	sub	sp, #48	; 0x30
 800084c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800084e:	f107 0320 	add.w	r3, r7, #32
 8000852:	2200      	movs	r2, #0
 8000854:	601a      	str	r2, [r3, #0]
 8000856:	605a      	str	r2, [r3, #4]
 8000858:	609a      	str	r2, [r3, #8]
 800085a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800085c:	f107 0314 	add.w	r3, r7, #20
 8000860:	2200      	movs	r2, #0
 8000862:	601a      	str	r2, [r3, #0]
 8000864:	605a      	str	r2, [r3, #4]
 8000866:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000868:	1d3b      	adds	r3, r7, #4
 800086a:	2200      	movs	r2, #0
 800086c:	601a      	str	r2, [r3, #0]
 800086e:	605a      	str	r2, [r3, #4]
 8000870:	609a      	str	r2, [r3, #8]
 8000872:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000874:	4b2d      	ldr	r3, [pc, #180]	; (800092c <MX_TIM8_Init+0xe4>)
 8000876:	4a2e      	ldr	r2, [pc, #184]	; (8000930 <MX_TIM8_Init+0xe8>)
 8000878:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 1;
 800087a:	4b2c      	ldr	r3, [pc, #176]	; (800092c <MX_TIM8_Init+0xe4>)
 800087c:	2201      	movs	r2, #1
 800087e:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000880:	4b2a      	ldr	r3, [pc, #168]	; (800092c <MX_TIM8_Init+0xe4>)
 8000882:	2200      	movs	r2, #0
 8000884:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8000886:	4b29      	ldr	r3, [pc, #164]	; (800092c <MX_TIM8_Init+0xe4>)
 8000888:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800088c:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800088e:	4b27      	ldr	r3, [pc, #156]	; (800092c <MX_TIM8_Init+0xe4>)
 8000890:	2200      	movs	r2, #0
 8000892:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000894:	4b25      	ldr	r3, [pc, #148]	; (800092c <MX_TIM8_Init+0xe4>)
 8000896:	2200      	movs	r2, #0
 8000898:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800089a:	4b24      	ldr	r3, [pc, #144]	; (800092c <MX_TIM8_Init+0xe4>)
 800089c:	2200      	movs	r2, #0
 800089e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80008a0:	4822      	ldr	r0, [pc, #136]	; (800092c <MX_TIM8_Init+0xe4>)
 80008a2:	f001 fda3 	bl	80023ec <HAL_TIM_Base_Init>
 80008a6:	4603      	mov	r3, r0
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d001      	beq.n	80008b0 <MX_TIM8_Init+0x68>
  {
    Error_Handler();
 80008ac:	f000 f8a8 	bl	8000a00 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008b4:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80008b6:	f107 0320 	add.w	r3, r7, #32
 80008ba:	4619      	mov	r1, r3
 80008bc:	481b      	ldr	r0, [pc, #108]	; (800092c <MX_TIM8_Init+0xe4>)
 80008be:	f002 f9ab 	bl	8002c18 <HAL_TIM_ConfigClockSource>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d001      	beq.n	80008cc <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 80008c8:	f000 f89a 	bl	8000a00 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim8) != HAL_OK)
 80008cc:	4817      	ldr	r0, [pc, #92]	; (800092c <MX_TIM8_Init+0xe4>)
 80008ce:	f001 fde4 	bl	800249a <HAL_TIM_IC_Init>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d001      	beq.n	80008dc <MX_TIM8_Init+0x94>
  {
    Error_Handler();
 80008d8:	f000 f892 	bl	8000a00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008dc:	2300      	movs	r3, #0
 80008de:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80008e0:	2300      	movs	r3, #0
 80008e2:	61bb      	str	r3, [r7, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008e4:	2300      	movs	r3, #0
 80008e6:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80008e8:	f107 0314 	add.w	r3, r7, #20
 80008ec:	4619      	mov	r1, r3
 80008ee:	480f      	ldr	r0, [pc, #60]	; (800092c <MX_TIM8_Init+0xe4>)
 80008f0:	f002 fd24 	bl	800333c <HAL_TIMEx_MasterConfigSynchronization>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d001      	beq.n	80008fe <MX_TIM8_Init+0xb6>
  {
    Error_Handler();
 80008fa:	f000 f881 	bl	8000a00 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80008fe:	2302      	movs	r3, #2
 8000900:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000902:	2301      	movs	r3, #1
 8000904:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000906:	2300      	movs	r3, #0
 8000908:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 800090a:	2300      	movs	r3, #0
 800090c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim8, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800090e:	1d3b      	adds	r3, r7, #4
 8000910:	2204      	movs	r2, #4
 8000912:	4619      	mov	r1, r3
 8000914:	4805      	ldr	r0, [pc, #20]	; (800092c <MX_TIM8_Init+0xe4>)
 8000916:	f002 f8e2 	bl	8002ade <HAL_TIM_IC_ConfigChannel>
 800091a:	4603      	mov	r3, r0
 800091c:	2b00      	cmp	r3, #0
 800091e:	d001      	beq.n	8000924 <MX_TIM8_Init+0xdc>
  {
    Error_Handler();
 8000920:	f000 f86e 	bl	8000a00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8000924:	bf00      	nop
 8000926:	3730      	adds	r7, #48	; 0x30
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}
 800092c:	2000011c 	.word	0x2000011c
 8000930:	40013400 	.word	0x40013400

08000934 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b08a      	sub	sp, #40	; 0x28
 8000938:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800093a:	f107 0314 	add.w	r3, r7, #20
 800093e:	2200      	movs	r2, #0
 8000940:	601a      	str	r2, [r3, #0]
 8000942:	605a      	str	r2, [r3, #4]
 8000944:	609a      	str	r2, [r3, #8]
 8000946:	60da      	str	r2, [r3, #12]
 8000948:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800094a:	4b2b      	ldr	r3, [pc, #172]	; (80009f8 <MX_GPIO_Init+0xc4>)
 800094c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800094e:	4a2a      	ldr	r2, [pc, #168]	; (80009f8 <MX_GPIO_Init+0xc4>)
 8000950:	f043 0304 	orr.w	r3, r3, #4
 8000954:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000956:	4b28      	ldr	r3, [pc, #160]	; (80009f8 <MX_GPIO_Init+0xc4>)
 8000958:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800095a:	f003 0304 	and.w	r3, r3, #4
 800095e:	613b      	str	r3, [r7, #16]
 8000960:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000962:	4b25      	ldr	r3, [pc, #148]	; (80009f8 <MX_GPIO_Init+0xc4>)
 8000964:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000966:	4a24      	ldr	r2, [pc, #144]	; (80009f8 <MX_GPIO_Init+0xc4>)
 8000968:	f043 0320 	orr.w	r3, r3, #32
 800096c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800096e:	4b22      	ldr	r3, [pc, #136]	; (80009f8 <MX_GPIO_Init+0xc4>)
 8000970:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000972:	f003 0320 	and.w	r3, r3, #32
 8000976:	60fb      	str	r3, [r7, #12]
 8000978:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800097a:	4b1f      	ldr	r3, [pc, #124]	; (80009f8 <MX_GPIO_Init+0xc4>)
 800097c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800097e:	4a1e      	ldr	r2, [pc, #120]	; (80009f8 <MX_GPIO_Init+0xc4>)
 8000980:	f043 0301 	orr.w	r3, r3, #1
 8000984:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000986:	4b1c      	ldr	r3, [pc, #112]	; (80009f8 <MX_GPIO_Init+0xc4>)
 8000988:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800098a:	f003 0301 	and.w	r3, r3, #1
 800098e:	60bb      	str	r3, [r7, #8]
 8000990:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000992:	4b19      	ldr	r3, [pc, #100]	; (80009f8 <MX_GPIO_Init+0xc4>)
 8000994:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000996:	4a18      	ldr	r2, [pc, #96]	; (80009f8 <MX_GPIO_Init+0xc4>)
 8000998:	f043 0302 	orr.w	r3, r3, #2
 800099c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800099e:	4b16      	ldr	r3, [pc, #88]	; (80009f8 <MX_GPIO_Init+0xc4>)
 80009a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009a2:	f003 0302 	and.w	r3, r3, #2
 80009a6:	607b      	str	r3, [r7, #4]
 80009a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80009aa:	2200      	movs	r2, #0
 80009ac:	2120      	movs	r1, #32
 80009ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009b2:	f000 fd2b 	bl	800140c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80009b6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009bc:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80009c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c2:	2300      	movs	r3, #0
 80009c4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80009c6:	f107 0314 	add.w	r3, r7, #20
 80009ca:	4619      	mov	r1, r3
 80009cc:	480b      	ldr	r0, [pc, #44]	; (80009fc <MX_GPIO_Init+0xc8>)
 80009ce:	f000 fb9b 	bl	8001108 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80009d2:	2320      	movs	r3, #32
 80009d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009d6:	2301      	movs	r3, #1
 80009d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009da:	2300      	movs	r3, #0
 80009dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009de:	2300      	movs	r3, #0
 80009e0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80009e2:	f107 0314 	add.w	r3, r7, #20
 80009e6:	4619      	mov	r1, r3
 80009e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009ec:	f000 fb8c 	bl	8001108 <HAL_GPIO_Init>

}
 80009f0:	bf00      	nop
 80009f2:	3728      	adds	r7, #40	; 0x28
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bd80      	pop	{r7, pc}
 80009f8:	40021000 	.word	0x40021000
 80009fc:	48000800 	.word	0x48000800

08000a00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a04:	b672      	cpsid	i
}
 8000a06:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a08:	e7fe      	b.n	8000a08 <Error_Handler+0x8>
	...

08000a0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b082      	sub	sp, #8
 8000a10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a12:	4b0f      	ldr	r3, [pc, #60]	; (8000a50 <HAL_MspInit+0x44>)
 8000a14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a16:	4a0e      	ldr	r2, [pc, #56]	; (8000a50 <HAL_MspInit+0x44>)
 8000a18:	f043 0301 	orr.w	r3, r3, #1
 8000a1c:	6613      	str	r3, [r2, #96]	; 0x60
 8000a1e:	4b0c      	ldr	r3, [pc, #48]	; (8000a50 <HAL_MspInit+0x44>)
 8000a20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a22:	f003 0301 	and.w	r3, r3, #1
 8000a26:	607b      	str	r3, [r7, #4]
 8000a28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a2a:	4b09      	ldr	r3, [pc, #36]	; (8000a50 <HAL_MspInit+0x44>)
 8000a2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a2e:	4a08      	ldr	r2, [pc, #32]	; (8000a50 <HAL_MspInit+0x44>)
 8000a30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a34:	6593      	str	r3, [r2, #88]	; 0x58
 8000a36:	4b06      	ldr	r3, [pc, #24]	; (8000a50 <HAL_MspInit+0x44>)
 8000a38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a3e:	603b      	str	r3, [r7, #0]
 8000a40:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000a42:	f000 fd9f 	bl	8001584 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a46:	bf00      	nop
 8000a48:	3708      	adds	r7, #8
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	40021000 	.word	0x40021000

08000a54 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b09a      	sub	sp, #104	; 0x68
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a5c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000a60:	2200      	movs	r2, #0
 8000a62:	601a      	str	r2, [r3, #0]
 8000a64:	605a      	str	r2, [r3, #4]
 8000a66:	609a      	str	r2, [r3, #8]
 8000a68:	60da      	str	r2, [r3, #12]
 8000a6a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a6c:	f107 0310 	add.w	r3, r7, #16
 8000a70:	2244      	movs	r2, #68	; 0x44
 8000a72:	2100      	movs	r1, #0
 8000a74:	4618      	mov	r0, r3
 8000a76:	f003 fbbd 	bl	80041f4 <memset>
  if(huart->Instance==LPUART1)
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	4a1f      	ldr	r2, [pc, #124]	; (8000afc <HAL_UART_MspInit+0xa8>)
 8000a80:	4293      	cmp	r3, r2
 8000a82:	d136      	bne.n	8000af2 <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000a84:	2320      	movs	r3, #32
 8000a86:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a8c:	f107 0310 	add.w	r3, r7, #16
 8000a90:	4618      	mov	r0, r3
 8000a92:	f001 fabb 	bl	800200c <HAL_RCCEx_PeriphCLKConfig>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d001      	beq.n	8000aa0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000a9c:	f7ff ffb0 	bl	8000a00 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000aa0:	4b17      	ldr	r3, [pc, #92]	; (8000b00 <HAL_UART_MspInit+0xac>)
 8000aa2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000aa4:	4a16      	ldr	r2, [pc, #88]	; (8000b00 <HAL_UART_MspInit+0xac>)
 8000aa6:	f043 0301 	orr.w	r3, r3, #1
 8000aaa:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000aac:	4b14      	ldr	r3, [pc, #80]	; (8000b00 <HAL_UART_MspInit+0xac>)
 8000aae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ab0:	f003 0301 	and.w	r3, r3, #1
 8000ab4:	60fb      	str	r3, [r7, #12]
 8000ab6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ab8:	4b11      	ldr	r3, [pc, #68]	; (8000b00 <HAL_UART_MspInit+0xac>)
 8000aba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000abc:	4a10      	ldr	r2, [pc, #64]	; (8000b00 <HAL_UART_MspInit+0xac>)
 8000abe:	f043 0301 	orr.w	r3, r3, #1
 8000ac2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ac4:	4b0e      	ldr	r3, [pc, #56]	; (8000b00 <HAL_UART_MspInit+0xac>)
 8000ac6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ac8:	f003 0301 	and.w	r3, r3, #1
 8000acc:	60bb      	str	r3, [r7, #8]
 8000ace:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8000ad0:	230c      	movs	r3, #12
 8000ad2:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ad4:	2302      	movs	r3, #2
 8000ad6:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000adc:	2300      	movs	r3, #0
 8000ade:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000ae0:	230c      	movs	r3, #12
 8000ae2:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ae4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000ae8:	4619      	mov	r1, r3
 8000aea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000aee:	f000 fb0b 	bl	8001108 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8000af2:	bf00      	nop
 8000af4:	3768      	adds	r7, #104	; 0x68
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	40008000 	.word	0x40008000
 8000b00:	40021000 	.word	0x40021000

08000b04 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b08a      	sub	sp, #40	; 0x28
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b0c:	f107 0314 	add.w	r3, r7, #20
 8000b10:	2200      	movs	r2, #0
 8000b12:	601a      	str	r2, [r3, #0]
 8000b14:	605a      	str	r2, [r3, #4]
 8000b16:	609a      	str	r2, [r3, #8]
 8000b18:	60da      	str	r2, [r3, #12]
 8000b1a:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM8)
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	4a1b      	ldr	r2, [pc, #108]	; (8000b90 <HAL_TIM_Base_MspInit+0x8c>)
 8000b22:	4293      	cmp	r3, r2
 8000b24:	d12f      	bne.n	8000b86 <HAL_TIM_Base_MspInit+0x82>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8000b26:	4b1b      	ldr	r3, [pc, #108]	; (8000b94 <HAL_TIM_Base_MspInit+0x90>)
 8000b28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b2a:	4a1a      	ldr	r2, [pc, #104]	; (8000b94 <HAL_TIM_Base_MspInit+0x90>)
 8000b2c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000b30:	6613      	str	r3, [r2, #96]	; 0x60
 8000b32:	4b18      	ldr	r3, [pc, #96]	; (8000b94 <HAL_TIM_Base_MspInit+0x90>)
 8000b34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b36:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000b3a:	613b      	str	r3, [r7, #16]
 8000b3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b3e:	4b15      	ldr	r3, [pc, #84]	; (8000b94 <HAL_TIM_Base_MspInit+0x90>)
 8000b40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b42:	4a14      	ldr	r2, [pc, #80]	; (8000b94 <HAL_TIM_Base_MspInit+0x90>)
 8000b44:	f043 0304 	orr.w	r3, r3, #4
 8000b48:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b4a:	4b12      	ldr	r3, [pc, #72]	; (8000b94 <HAL_TIM_Base_MspInit+0x90>)
 8000b4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b4e:	f003 0304 	and.w	r3, r3, #4
 8000b52:	60fb      	str	r3, [r7, #12]
 8000b54:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PC7     ------> TIM8_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000b56:	2380      	movs	r3, #128	; 0x80
 8000b58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b5a:	2302      	movs	r3, #2
 8000b5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b62:	2300      	movs	r3, #0
 8000b64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 8000b66:	2304      	movs	r3, #4
 8000b68:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b6a:	f107 0314 	add.w	r3, r7, #20
 8000b6e:	4619      	mov	r1, r3
 8000b70:	4809      	ldr	r0, [pc, #36]	; (8000b98 <HAL_TIM_Base_MspInit+0x94>)
 8000b72:	f000 fac9 	bl	8001108 <HAL_GPIO_Init>

    /* TIM8 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 0, 0);
 8000b76:	2200      	movs	r2, #0
 8000b78:	2100      	movs	r1, #0
 8000b7a:	202e      	movs	r0, #46	; 0x2e
 8000b7c:	f000 fa8f 	bl	800109e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 8000b80:	202e      	movs	r0, #46	; 0x2e
 8000b82:	f000 faa6 	bl	80010d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8000b86:	bf00      	nop
 8000b88:	3728      	adds	r7, #40	; 0x28
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	40013400 	.word	0x40013400
 8000b94:	40021000 	.word	0x40021000
 8000b98:	48000800 	.word	0x48000800

08000b9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ba0:	e7fe      	b.n	8000ba0 <NMI_Handler+0x4>

08000ba2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ba2:	b480      	push	{r7}
 8000ba4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ba6:	e7fe      	b.n	8000ba6 <HardFault_Handler+0x4>

08000ba8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bac:	e7fe      	b.n	8000bac <MemManage_Handler+0x4>

08000bae <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bae:	b480      	push	{r7}
 8000bb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bb2:	e7fe      	b.n	8000bb2 <BusFault_Handler+0x4>

08000bb4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bb8:	e7fe      	b.n	8000bb8 <UsageFault_Handler+0x4>

08000bba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bba:	b480      	push	{r7}
 8000bbc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bbe:	bf00      	nop
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc6:	4770      	bx	lr

08000bc8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bcc:	bf00      	nop
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd4:	4770      	bx	lr

08000bd6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bd6:	b480      	push	{r7}
 8000bd8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bda:	bf00      	nop
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be2:	4770      	bx	lr

08000be4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000be8:	f000 f93e 	bl	8000e68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bec:	bf00      	nop
 8000bee:	bd80      	pop	{r7, pc}

08000bf0 <TIM8_CC_IRQHandler>:

/**
  * @brief This function handles TIM8 capture compare interrupt.
  */
void TIM8_CC_IRQHandler(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_CC_IRQn 0 */

  /* USER CODE END TIM8_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8000bf4:	4802      	ldr	r0, [pc, #8]	; (8000c00 <TIM8_CC_IRQHandler+0x10>)
 8000bf6:	f001 fdf3 	bl	80027e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_CC_IRQn 1 */

  /* USER CODE END TIM8_CC_IRQn 1 */
}
 8000bfa:	bf00      	nop
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	2000011c 	.word	0x2000011c

08000c04 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b086      	sub	sp, #24
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	60f8      	str	r0, [r7, #12]
 8000c0c:	60b9      	str	r1, [r7, #8]
 8000c0e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c10:	2300      	movs	r3, #0
 8000c12:	617b      	str	r3, [r7, #20]
 8000c14:	e00a      	b.n	8000c2c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000c16:	f3af 8000 	nop.w
 8000c1a:	4601      	mov	r1, r0
 8000c1c:	68bb      	ldr	r3, [r7, #8]
 8000c1e:	1c5a      	adds	r2, r3, #1
 8000c20:	60ba      	str	r2, [r7, #8]
 8000c22:	b2ca      	uxtb	r2, r1
 8000c24:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c26:	697b      	ldr	r3, [r7, #20]
 8000c28:	3301      	adds	r3, #1
 8000c2a:	617b      	str	r3, [r7, #20]
 8000c2c:	697a      	ldr	r2, [r7, #20]
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	429a      	cmp	r2, r3
 8000c32:	dbf0      	blt.n	8000c16 <_read+0x12>
	}

return len;
 8000c34:	687b      	ldr	r3, [r7, #4]
}
 8000c36:	4618      	mov	r0, r3
 8000c38:	3718      	adds	r7, #24
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}

08000c3e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000c3e:	b580      	push	{r7, lr}
 8000c40:	b086      	sub	sp, #24
 8000c42:	af00      	add	r7, sp, #0
 8000c44:	60f8      	str	r0, [r7, #12]
 8000c46:	60b9      	str	r1, [r7, #8]
 8000c48:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	617b      	str	r3, [r7, #20]
 8000c4e:	e009      	b.n	8000c64 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000c50:	68bb      	ldr	r3, [r7, #8]
 8000c52:	1c5a      	adds	r2, r3, #1
 8000c54:	60ba      	str	r2, [r7, #8]
 8000c56:	781b      	ldrb	r3, [r3, #0]
 8000c58:	4618      	mov	r0, r3
 8000c5a:	f7ff fcb3 	bl	80005c4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c5e:	697b      	ldr	r3, [r7, #20]
 8000c60:	3301      	adds	r3, #1
 8000c62:	617b      	str	r3, [r7, #20]
 8000c64:	697a      	ldr	r2, [r7, #20]
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	429a      	cmp	r2, r3
 8000c6a:	dbf1      	blt.n	8000c50 <_write+0x12>
	}
	return len;
 8000c6c:	687b      	ldr	r3, [r7, #4]
}
 8000c6e:	4618      	mov	r0, r3
 8000c70:	3718      	adds	r7, #24
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}

08000c76 <_close>:

int _close(int file)
{
 8000c76:	b480      	push	{r7}
 8000c78:	b083      	sub	sp, #12
 8000c7a:	af00      	add	r7, sp, #0
 8000c7c:	6078      	str	r0, [r7, #4]
	return -1;
 8000c7e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c82:	4618      	mov	r0, r3
 8000c84:	370c      	adds	r7, #12
 8000c86:	46bd      	mov	sp, r7
 8000c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8c:	4770      	bx	lr

08000c8e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c8e:	b480      	push	{r7}
 8000c90:	b083      	sub	sp, #12
 8000c92:	af00      	add	r7, sp, #0
 8000c94:	6078      	str	r0, [r7, #4]
 8000c96:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000c98:	683b      	ldr	r3, [r7, #0]
 8000c9a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c9e:	605a      	str	r2, [r3, #4]
	return 0;
 8000ca0:	2300      	movs	r3, #0
}
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	370c      	adds	r7, #12
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cac:	4770      	bx	lr

08000cae <_isatty>:

int _isatty(int file)
{
 8000cae:	b480      	push	{r7}
 8000cb0:	b083      	sub	sp, #12
 8000cb2:	af00      	add	r7, sp, #0
 8000cb4:	6078      	str	r0, [r7, #4]
	return 1;
 8000cb6:	2301      	movs	r3, #1
}
 8000cb8:	4618      	mov	r0, r3
 8000cba:	370c      	adds	r7, #12
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc2:	4770      	bx	lr

08000cc4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	b085      	sub	sp, #20
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	60f8      	str	r0, [r7, #12]
 8000ccc:	60b9      	str	r1, [r7, #8]
 8000cce:	607a      	str	r2, [r7, #4]
	return 0;
 8000cd0:	2300      	movs	r3, #0
}
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	3714      	adds	r7, #20
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cdc:	4770      	bx	lr
	...

08000ce0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b086      	sub	sp, #24
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ce8:	4a14      	ldr	r2, [pc, #80]	; (8000d3c <_sbrk+0x5c>)
 8000cea:	4b15      	ldr	r3, [pc, #84]	; (8000d40 <_sbrk+0x60>)
 8000cec:	1ad3      	subs	r3, r2, r3
 8000cee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cf0:	697b      	ldr	r3, [r7, #20]
 8000cf2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cf4:	4b13      	ldr	r3, [pc, #76]	; (8000d44 <_sbrk+0x64>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d102      	bne.n	8000d02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cfc:	4b11      	ldr	r3, [pc, #68]	; (8000d44 <_sbrk+0x64>)
 8000cfe:	4a12      	ldr	r2, [pc, #72]	; (8000d48 <_sbrk+0x68>)
 8000d00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d02:	4b10      	ldr	r3, [pc, #64]	; (8000d44 <_sbrk+0x64>)
 8000d04:	681a      	ldr	r2, [r3, #0]
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	4413      	add	r3, r2
 8000d0a:	693a      	ldr	r2, [r7, #16]
 8000d0c:	429a      	cmp	r2, r3
 8000d0e:	d207      	bcs.n	8000d20 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d10:	f003 fa46 	bl	80041a0 <__errno>
 8000d14:	4603      	mov	r3, r0
 8000d16:	220c      	movs	r2, #12
 8000d18:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d1a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d1e:	e009      	b.n	8000d34 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d20:	4b08      	ldr	r3, [pc, #32]	; (8000d44 <_sbrk+0x64>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d26:	4b07      	ldr	r3, [pc, #28]	; (8000d44 <_sbrk+0x64>)
 8000d28:	681a      	ldr	r2, [r3, #0]
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	4413      	add	r3, r2
 8000d2e:	4a05      	ldr	r2, [pc, #20]	; (8000d44 <_sbrk+0x64>)
 8000d30:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d32:	68fb      	ldr	r3, [r7, #12]
}
 8000d34:	4618      	mov	r0, r3
 8000d36:	3718      	adds	r7, #24
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}
 8000d3c:	20008000 	.word	0x20008000
 8000d40:	00000400 	.word	0x00000400
 8000d44:	20000974 	.word	0x20000974
 8000d48:	20000990 	.word	0x20000990

08000d4c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000d50:	4b06      	ldr	r3, [pc, #24]	; (8000d6c <SystemInit+0x20>)
 8000d52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d56:	4a05      	ldr	r2, [pc, #20]	; (8000d6c <SystemInit+0x20>)
 8000d58:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d5c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d60:	bf00      	nop
 8000d62:	46bd      	mov	sp, r7
 8000d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d68:	4770      	bx	lr
 8000d6a:	bf00      	nop
 8000d6c:	e000ed00 	.word	0xe000ed00

08000d70 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000d70:	480d      	ldr	r0, [pc, #52]	; (8000da8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000d72:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d74:	480d      	ldr	r0, [pc, #52]	; (8000dac <LoopForever+0x6>)
  ldr r1, =_edata
 8000d76:	490e      	ldr	r1, [pc, #56]	; (8000db0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d78:	4a0e      	ldr	r2, [pc, #56]	; (8000db4 <LoopForever+0xe>)
  movs r3, #0
 8000d7a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000d7c:	e002      	b.n	8000d84 <LoopCopyDataInit>

08000d7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d82:	3304      	adds	r3, #4

08000d84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d88:	d3f9      	bcc.n	8000d7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d8a:	4a0b      	ldr	r2, [pc, #44]	; (8000db8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d8c:	4c0b      	ldr	r4, [pc, #44]	; (8000dbc <LoopForever+0x16>)
  movs r3, #0
 8000d8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d90:	e001      	b.n	8000d96 <LoopFillZerobss>

08000d92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d94:	3204      	adds	r2, #4

08000d96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d98:	d3fb      	bcc.n	8000d92 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000d9a:	f7ff ffd7 	bl	8000d4c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d9e:	f003 fa05 	bl	80041ac <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000da2:	f7ff fc71 	bl	8000688 <main>

08000da6 <LoopForever>:

LoopForever:
    b LoopForever
 8000da6:	e7fe      	b.n	8000da6 <LoopForever>
  ldr   r0, =_estack
 8000da8:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000dac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000db0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000db4:	08005330 	.word	0x08005330
  ldr r2, =_sbss
 8000db8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000dbc:	2000098c 	.word	0x2000098c

08000dc0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000dc0:	e7fe      	b.n	8000dc0 <ADC1_2_IRQHandler>

08000dc2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dc2:	b580      	push	{r7, lr}
 8000dc4:	b082      	sub	sp, #8
 8000dc6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dcc:	2003      	movs	r0, #3
 8000dce:	f000 f95b 	bl	8001088 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000dd2:	2000      	movs	r0, #0
 8000dd4:	f000 f80e 	bl	8000df4 <HAL_InitTick>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d002      	beq.n	8000de4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000dde:	2301      	movs	r3, #1
 8000de0:	71fb      	strb	r3, [r7, #7]
 8000de2:	e001      	b.n	8000de8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000de4:	f7ff fe12 	bl	8000a0c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000de8:	79fb      	ldrb	r3, [r7, #7]

}
 8000dea:	4618      	mov	r0, r3
 8000dec:	3708      	adds	r7, #8
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}
	...

08000df4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b084      	sub	sp, #16
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000e00:	4b16      	ldr	r3, [pc, #88]	; (8000e5c <HAL_InitTick+0x68>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d022      	beq.n	8000e4e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000e08:	4b15      	ldr	r3, [pc, #84]	; (8000e60 <HAL_InitTick+0x6c>)
 8000e0a:	681a      	ldr	r2, [r3, #0]
 8000e0c:	4b13      	ldr	r3, [pc, #76]	; (8000e5c <HAL_InitTick+0x68>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000e14:	fbb1 f3f3 	udiv	r3, r1, r3
 8000e18:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	f000 f966 	bl	80010ee <HAL_SYSTICK_Config>
 8000e22:	4603      	mov	r3, r0
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d10f      	bne.n	8000e48 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	2b0f      	cmp	r3, #15
 8000e2c:	d809      	bhi.n	8000e42 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e2e:	2200      	movs	r2, #0
 8000e30:	6879      	ldr	r1, [r7, #4]
 8000e32:	f04f 30ff 	mov.w	r0, #4294967295
 8000e36:	f000 f932 	bl	800109e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e3a:	4a0a      	ldr	r2, [pc, #40]	; (8000e64 <HAL_InitTick+0x70>)
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	6013      	str	r3, [r2, #0]
 8000e40:	e007      	b.n	8000e52 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000e42:	2301      	movs	r3, #1
 8000e44:	73fb      	strb	r3, [r7, #15]
 8000e46:	e004      	b.n	8000e52 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000e48:	2301      	movs	r3, #1
 8000e4a:	73fb      	strb	r3, [r7, #15]
 8000e4c:	e001      	b.n	8000e52 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000e4e:	2301      	movs	r3, #1
 8000e50:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000e52:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e54:	4618      	mov	r0, r3
 8000e56:	3710      	adds	r7, #16
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	20000008 	.word	0x20000008
 8000e60:	20000000 	.word	0x20000000
 8000e64:	20000004 	.word	0x20000004

08000e68 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e6c:	4b05      	ldr	r3, [pc, #20]	; (8000e84 <HAL_IncTick+0x1c>)
 8000e6e:	681a      	ldr	r2, [r3, #0]
 8000e70:	4b05      	ldr	r3, [pc, #20]	; (8000e88 <HAL_IncTick+0x20>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	4413      	add	r3, r2
 8000e76:	4a03      	ldr	r2, [pc, #12]	; (8000e84 <HAL_IncTick+0x1c>)
 8000e78:	6013      	str	r3, [r2, #0]
}
 8000e7a:	bf00      	nop
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e82:	4770      	bx	lr
 8000e84:	20000978 	.word	0x20000978
 8000e88:	20000008 	.word	0x20000008

08000e8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
  return uwTick;
 8000e90:	4b03      	ldr	r3, [pc, #12]	; (8000ea0 <HAL_GetTick+0x14>)
 8000e92:	681b      	ldr	r3, [r3, #0]
}
 8000e94:	4618      	mov	r0, r3
 8000e96:	46bd      	mov	sp, r7
 8000e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop
 8000ea0:	20000978 	.word	0x20000978

08000ea4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b084      	sub	sp, #16
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000eac:	f7ff ffee 	bl	8000e8c <HAL_GetTick>
 8000eb0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ebc:	d004      	beq.n	8000ec8 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ebe:	4b09      	ldr	r3, [pc, #36]	; (8000ee4 <HAL_Delay+0x40>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	68fa      	ldr	r2, [r7, #12]
 8000ec4:	4413      	add	r3, r2
 8000ec6:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ec8:	bf00      	nop
 8000eca:	f7ff ffdf 	bl	8000e8c <HAL_GetTick>
 8000ece:	4602      	mov	r2, r0
 8000ed0:	68bb      	ldr	r3, [r7, #8]
 8000ed2:	1ad3      	subs	r3, r2, r3
 8000ed4:	68fa      	ldr	r2, [r7, #12]
 8000ed6:	429a      	cmp	r2, r3
 8000ed8:	d8f7      	bhi.n	8000eca <HAL_Delay+0x26>
  {
  }
}
 8000eda:	bf00      	nop
 8000edc:	bf00      	nop
 8000ede:	3710      	adds	r7, #16
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	20000008 	.word	0x20000008

08000ee8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b085      	sub	sp, #20
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	f003 0307 	and.w	r3, r3, #7
 8000ef6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ef8:	4b0c      	ldr	r3, [pc, #48]	; (8000f2c <__NVIC_SetPriorityGrouping+0x44>)
 8000efa:	68db      	ldr	r3, [r3, #12]
 8000efc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000efe:	68ba      	ldr	r2, [r7, #8]
 8000f00:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f04:	4013      	ands	r3, r2
 8000f06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f0c:	68bb      	ldr	r3, [r7, #8]
 8000f0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f10:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f1a:	4a04      	ldr	r2, [pc, #16]	; (8000f2c <__NVIC_SetPriorityGrouping+0x44>)
 8000f1c:	68bb      	ldr	r3, [r7, #8]
 8000f1e:	60d3      	str	r3, [r2, #12]
}
 8000f20:	bf00      	nop
 8000f22:	3714      	adds	r7, #20
 8000f24:	46bd      	mov	sp, r7
 8000f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2a:	4770      	bx	lr
 8000f2c:	e000ed00 	.word	0xe000ed00

08000f30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f34:	4b04      	ldr	r3, [pc, #16]	; (8000f48 <__NVIC_GetPriorityGrouping+0x18>)
 8000f36:	68db      	ldr	r3, [r3, #12]
 8000f38:	0a1b      	lsrs	r3, r3, #8
 8000f3a:	f003 0307 	and.w	r3, r3, #7
}
 8000f3e:	4618      	mov	r0, r3
 8000f40:	46bd      	mov	sp, r7
 8000f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f46:	4770      	bx	lr
 8000f48:	e000ed00 	.word	0xe000ed00

08000f4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b083      	sub	sp, #12
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	4603      	mov	r3, r0
 8000f54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	db0b      	blt.n	8000f76 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f5e:	79fb      	ldrb	r3, [r7, #7]
 8000f60:	f003 021f 	and.w	r2, r3, #31
 8000f64:	4907      	ldr	r1, [pc, #28]	; (8000f84 <__NVIC_EnableIRQ+0x38>)
 8000f66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f6a:	095b      	lsrs	r3, r3, #5
 8000f6c:	2001      	movs	r0, #1
 8000f6e:	fa00 f202 	lsl.w	r2, r0, r2
 8000f72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f76:	bf00      	nop
 8000f78:	370c      	adds	r7, #12
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop
 8000f84:	e000e100 	.word	0xe000e100

08000f88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	b083      	sub	sp, #12
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	4603      	mov	r3, r0
 8000f90:	6039      	str	r1, [r7, #0]
 8000f92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	db0a      	blt.n	8000fb2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	b2da      	uxtb	r2, r3
 8000fa0:	490c      	ldr	r1, [pc, #48]	; (8000fd4 <__NVIC_SetPriority+0x4c>)
 8000fa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fa6:	0112      	lsls	r2, r2, #4
 8000fa8:	b2d2      	uxtb	r2, r2
 8000faa:	440b      	add	r3, r1
 8000fac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fb0:	e00a      	b.n	8000fc8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	b2da      	uxtb	r2, r3
 8000fb6:	4908      	ldr	r1, [pc, #32]	; (8000fd8 <__NVIC_SetPriority+0x50>)
 8000fb8:	79fb      	ldrb	r3, [r7, #7]
 8000fba:	f003 030f 	and.w	r3, r3, #15
 8000fbe:	3b04      	subs	r3, #4
 8000fc0:	0112      	lsls	r2, r2, #4
 8000fc2:	b2d2      	uxtb	r2, r2
 8000fc4:	440b      	add	r3, r1
 8000fc6:	761a      	strb	r2, [r3, #24]
}
 8000fc8:	bf00      	nop
 8000fca:	370c      	adds	r7, #12
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd2:	4770      	bx	lr
 8000fd4:	e000e100 	.word	0xe000e100
 8000fd8:	e000ed00 	.word	0xe000ed00

08000fdc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b089      	sub	sp, #36	; 0x24
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	60f8      	str	r0, [r7, #12]
 8000fe4:	60b9      	str	r1, [r7, #8]
 8000fe6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	f003 0307 	and.w	r3, r3, #7
 8000fee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ff0:	69fb      	ldr	r3, [r7, #28]
 8000ff2:	f1c3 0307 	rsb	r3, r3, #7
 8000ff6:	2b04      	cmp	r3, #4
 8000ff8:	bf28      	it	cs
 8000ffa:	2304      	movcs	r3, #4
 8000ffc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ffe:	69fb      	ldr	r3, [r7, #28]
 8001000:	3304      	adds	r3, #4
 8001002:	2b06      	cmp	r3, #6
 8001004:	d902      	bls.n	800100c <NVIC_EncodePriority+0x30>
 8001006:	69fb      	ldr	r3, [r7, #28]
 8001008:	3b03      	subs	r3, #3
 800100a:	e000      	b.n	800100e <NVIC_EncodePriority+0x32>
 800100c:	2300      	movs	r3, #0
 800100e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001010:	f04f 32ff 	mov.w	r2, #4294967295
 8001014:	69bb      	ldr	r3, [r7, #24]
 8001016:	fa02 f303 	lsl.w	r3, r2, r3
 800101a:	43da      	mvns	r2, r3
 800101c:	68bb      	ldr	r3, [r7, #8]
 800101e:	401a      	ands	r2, r3
 8001020:	697b      	ldr	r3, [r7, #20]
 8001022:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001024:	f04f 31ff 	mov.w	r1, #4294967295
 8001028:	697b      	ldr	r3, [r7, #20]
 800102a:	fa01 f303 	lsl.w	r3, r1, r3
 800102e:	43d9      	mvns	r1, r3
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001034:	4313      	orrs	r3, r2
         );
}
 8001036:	4618      	mov	r0, r3
 8001038:	3724      	adds	r7, #36	; 0x24
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr
	...

08001044 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b082      	sub	sp, #8
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	3b01      	subs	r3, #1
 8001050:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001054:	d301      	bcc.n	800105a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001056:	2301      	movs	r3, #1
 8001058:	e00f      	b.n	800107a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800105a:	4a0a      	ldr	r2, [pc, #40]	; (8001084 <SysTick_Config+0x40>)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	3b01      	subs	r3, #1
 8001060:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001062:	210f      	movs	r1, #15
 8001064:	f04f 30ff 	mov.w	r0, #4294967295
 8001068:	f7ff ff8e 	bl	8000f88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800106c:	4b05      	ldr	r3, [pc, #20]	; (8001084 <SysTick_Config+0x40>)
 800106e:	2200      	movs	r2, #0
 8001070:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001072:	4b04      	ldr	r3, [pc, #16]	; (8001084 <SysTick_Config+0x40>)
 8001074:	2207      	movs	r2, #7
 8001076:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001078:	2300      	movs	r3, #0
}
 800107a:	4618      	mov	r0, r3
 800107c:	3708      	adds	r7, #8
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	e000e010 	.word	0xe000e010

08001088 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b082      	sub	sp, #8
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001090:	6878      	ldr	r0, [r7, #4]
 8001092:	f7ff ff29 	bl	8000ee8 <__NVIC_SetPriorityGrouping>
}
 8001096:	bf00      	nop
 8001098:	3708      	adds	r7, #8
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}

0800109e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800109e:	b580      	push	{r7, lr}
 80010a0:	b086      	sub	sp, #24
 80010a2:	af00      	add	r7, sp, #0
 80010a4:	4603      	mov	r3, r0
 80010a6:	60b9      	str	r1, [r7, #8]
 80010a8:	607a      	str	r2, [r7, #4]
 80010aa:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80010ac:	f7ff ff40 	bl	8000f30 <__NVIC_GetPriorityGrouping>
 80010b0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010b2:	687a      	ldr	r2, [r7, #4]
 80010b4:	68b9      	ldr	r1, [r7, #8]
 80010b6:	6978      	ldr	r0, [r7, #20]
 80010b8:	f7ff ff90 	bl	8000fdc <NVIC_EncodePriority>
 80010bc:	4602      	mov	r2, r0
 80010be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010c2:	4611      	mov	r1, r2
 80010c4:	4618      	mov	r0, r3
 80010c6:	f7ff ff5f 	bl	8000f88 <__NVIC_SetPriority>
}
 80010ca:	bf00      	nop
 80010cc:	3718      	adds	r7, #24
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}

080010d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010d2:	b580      	push	{r7, lr}
 80010d4:	b082      	sub	sp, #8
 80010d6:	af00      	add	r7, sp, #0
 80010d8:	4603      	mov	r3, r0
 80010da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010e0:	4618      	mov	r0, r3
 80010e2:	f7ff ff33 	bl	8000f4c <__NVIC_EnableIRQ>
}
 80010e6:	bf00      	nop
 80010e8:	3708      	adds	r7, #8
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}

080010ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010ee:	b580      	push	{r7, lr}
 80010f0:	b082      	sub	sp, #8
 80010f2:	af00      	add	r7, sp, #0
 80010f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010f6:	6878      	ldr	r0, [r7, #4]
 80010f8:	f7ff ffa4 	bl	8001044 <SysTick_Config>
 80010fc:	4603      	mov	r3, r0
}
 80010fe:	4618      	mov	r0, r3
 8001100:	3708      	adds	r7, #8
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
	...

08001108 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001108:	b480      	push	{r7}
 800110a:	b087      	sub	sp, #28
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
 8001110:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001112:	2300      	movs	r3, #0
 8001114:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001116:	e15a      	b.n	80013ce <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	681a      	ldr	r2, [r3, #0]
 800111c:	2101      	movs	r1, #1
 800111e:	697b      	ldr	r3, [r7, #20]
 8001120:	fa01 f303 	lsl.w	r3, r1, r3
 8001124:	4013      	ands	r3, r2
 8001126:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	2b00      	cmp	r3, #0
 800112c:	f000 814c 	beq.w	80013c8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	685b      	ldr	r3, [r3, #4]
 8001134:	f003 0303 	and.w	r3, r3, #3
 8001138:	2b01      	cmp	r3, #1
 800113a:	d005      	beq.n	8001148 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001144:	2b02      	cmp	r3, #2
 8001146:	d130      	bne.n	80011aa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	689b      	ldr	r3, [r3, #8]
 800114c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800114e:	697b      	ldr	r3, [r7, #20]
 8001150:	005b      	lsls	r3, r3, #1
 8001152:	2203      	movs	r2, #3
 8001154:	fa02 f303 	lsl.w	r3, r2, r3
 8001158:	43db      	mvns	r3, r3
 800115a:	693a      	ldr	r2, [r7, #16]
 800115c:	4013      	ands	r3, r2
 800115e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	68da      	ldr	r2, [r3, #12]
 8001164:	697b      	ldr	r3, [r7, #20]
 8001166:	005b      	lsls	r3, r3, #1
 8001168:	fa02 f303 	lsl.w	r3, r2, r3
 800116c:	693a      	ldr	r2, [r7, #16]
 800116e:	4313      	orrs	r3, r2
 8001170:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	693a      	ldr	r2, [r7, #16]
 8001176:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	685b      	ldr	r3, [r3, #4]
 800117c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800117e:	2201      	movs	r2, #1
 8001180:	697b      	ldr	r3, [r7, #20]
 8001182:	fa02 f303 	lsl.w	r3, r2, r3
 8001186:	43db      	mvns	r3, r3
 8001188:	693a      	ldr	r2, [r7, #16]
 800118a:	4013      	ands	r3, r2
 800118c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	685b      	ldr	r3, [r3, #4]
 8001192:	091b      	lsrs	r3, r3, #4
 8001194:	f003 0201 	and.w	r2, r3, #1
 8001198:	697b      	ldr	r3, [r7, #20]
 800119a:	fa02 f303 	lsl.w	r3, r2, r3
 800119e:	693a      	ldr	r2, [r7, #16]
 80011a0:	4313      	orrs	r3, r2
 80011a2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	693a      	ldr	r2, [r7, #16]
 80011a8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	685b      	ldr	r3, [r3, #4]
 80011ae:	f003 0303 	and.w	r3, r3, #3
 80011b2:	2b03      	cmp	r3, #3
 80011b4:	d017      	beq.n	80011e6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	68db      	ldr	r3, [r3, #12]
 80011ba:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80011bc:	697b      	ldr	r3, [r7, #20]
 80011be:	005b      	lsls	r3, r3, #1
 80011c0:	2203      	movs	r2, #3
 80011c2:	fa02 f303 	lsl.w	r3, r2, r3
 80011c6:	43db      	mvns	r3, r3
 80011c8:	693a      	ldr	r2, [r7, #16]
 80011ca:	4013      	ands	r3, r2
 80011cc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	689a      	ldr	r2, [r3, #8]
 80011d2:	697b      	ldr	r3, [r7, #20]
 80011d4:	005b      	lsls	r3, r3, #1
 80011d6:	fa02 f303 	lsl.w	r3, r2, r3
 80011da:	693a      	ldr	r2, [r7, #16]
 80011dc:	4313      	orrs	r3, r2
 80011de:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	693a      	ldr	r2, [r7, #16]
 80011e4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	f003 0303 	and.w	r3, r3, #3
 80011ee:	2b02      	cmp	r3, #2
 80011f0:	d123      	bne.n	800123a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80011f2:	697b      	ldr	r3, [r7, #20]
 80011f4:	08da      	lsrs	r2, r3, #3
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	3208      	adds	r2, #8
 80011fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011fe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001200:	697b      	ldr	r3, [r7, #20]
 8001202:	f003 0307 	and.w	r3, r3, #7
 8001206:	009b      	lsls	r3, r3, #2
 8001208:	220f      	movs	r2, #15
 800120a:	fa02 f303 	lsl.w	r3, r2, r3
 800120e:	43db      	mvns	r3, r3
 8001210:	693a      	ldr	r2, [r7, #16]
 8001212:	4013      	ands	r3, r2
 8001214:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	691a      	ldr	r2, [r3, #16]
 800121a:	697b      	ldr	r3, [r7, #20]
 800121c:	f003 0307 	and.w	r3, r3, #7
 8001220:	009b      	lsls	r3, r3, #2
 8001222:	fa02 f303 	lsl.w	r3, r2, r3
 8001226:	693a      	ldr	r2, [r7, #16]
 8001228:	4313      	orrs	r3, r2
 800122a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800122c:	697b      	ldr	r3, [r7, #20]
 800122e:	08da      	lsrs	r2, r3, #3
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	3208      	adds	r2, #8
 8001234:	6939      	ldr	r1, [r7, #16]
 8001236:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001240:	697b      	ldr	r3, [r7, #20]
 8001242:	005b      	lsls	r3, r3, #1
 8001244:	2203      	movs	r2, #3
 8001246:	fa02 f303 	lsl.w	r3, r2, r3
 800124a:	43db      	mvns	r3, r3
 800124c:	693a      	ldr	r2, [r7, #16]
 800124e:	4013      	ands	r3, r2
 8001250:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	f003 0203 	and.w	r2, r3, #3
 800125a:	697b      	ldr	r3, [r7, #20]
 800125c:	005b      	lsls	r3, r3, #1
 800125e:	fa02 f303 	lsl.w	r3, r2, r3
 8001262:	693a      	ldr	r2, [r7, #16]
 8001264:	4313      	orrs	r3, r2
 8001266:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	693a      	ldr	r2, [r7, #16]
 800126c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001276:	2b00      	cmp	r3, #0
 8001278:	f000 80a6 	beq.w	80013c8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800127c:	4b5b      	ldr	r3, [pc, #364]	; (80013ec <HAL_GPIO_Init+0x2e4>)
 800127e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001280:	4a5a      	ldr	r2, [pc, #360]	; (80013ec <HAL_GPIO_Init+0x2e4>)
 8001282:	f043 0301 	orr.w	r3, r3, #1
 8001286:	6613      	str	r3, [r2, #96]	; 0x60
 8001288:	4b58      	ldr	r3, [pc, #352]	; (80013ec <HAL_GPIO_Init+0x2e4>)
 800128a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800128c:	f003 0301 	and.w	r3, r3, #1
 8001290:	60bb      	str	r3, [r7, #8]
 8001292:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001294:	4a56      	ldr	r2, [pc, #344]	; (80013f0 <HAL_GPIO_Init+0x2e8>)
 8001296:	697b      	ldr	r3, [r7, #20]
 8001298:	089b      	lsrs	r3, r3, #2
 800129a:	3302      	adds	r3, #2
 800129c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012a0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80012a2:	697b      	ldr	r3, [r7, #20]
 80012a4:	f003 0303 	and.w	r3, r3, #3
 80012a8:	009b      	lsls	r3, r3, #2
 80012aa:	220f      	movs	r2, #15
 80012ac:	fa02 f303 	lsl.w	r3, r2, r3
 80012b0:	43db      	mvns	r3, r3
 80012b2:	693a      	ldr	r2, [r7, #16]
 80012b4:	4013      	ands	r3, r2
 80012b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80012be:	d01f      	beq.n	8001300 <HAL_GPIO_Init+0x1f8>
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	4a4c      	ldr	r2, [pc, #304]	; (80013f4 <HAL_GPIO_Init+0x2ec>)
 80012c4:	4293      	cmp	r3, r2
 80012c6:	d019      	beq.n	80012fc <HAL_GPIO_Init+0x1f4>
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	4a4b      	ldr	r2, [pc, #300]	; (80013f8 <HAL_GPIO_Init+0x2f0>)
 80012cc:	4293      	cmp	r3, r2
 80012ce:	d013      	beq.n	80012f8 <HAL_GPIO_Init+0x1f0>
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	4a4a      	ldr	r2, [pc, #296]	; (80013fc <HAL_GPIO_Init+0x2f4>)
 80012d4:	4293      	cmp	r3, r2
 80012d6:	d00d      	beq.n	80012f4 <HAL_GPIO_Init+0x1ec>
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	4a49      	ldr	r2, [pc, #292]	; (8001400 <HAL_GPIO_Init+0x2f8>)
 80012dc:	4293      	cmp	r3, r2
 80012de:	d007      	beq.n	80012f0 <HAL_GPIO_Init+0x1e8>
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	4a48      	ldr	r2, [pc, #288]	; (8001404 <HAL_GPIO_Init+0x2fc>)
 80012e4:	4293      	cmp	r3, r2
 80012e6:	d101      	bne.n	80012ec <HAL_GPIO_Init+0x1e4>
 80012e8:	2305      	movs	r3, #5
 80012ea:	e00a      	b.n	8001302 <HAL_GPIO_Init+0x1fa>
 80012ec:	2306      	movs	r3, #6
 80012ee:	e008      	b.n	8001302 <HAL_GPIO_Init+0x1fa>
 80012f0:	2304      	movs	r3, #4
 80012f2:	e006      	b.n	8001302 <HAL_GPIO_Init+0x1fa>
 80012f4:	2303      	movs	r3, #3
 80012f6:	e004      	b.n	8001302 <HAL_GPIO_Init+0x1fa>
 80012f8:	2302      	movs	r3, #2
 80012fa:	e002      	b.n	8001302 <HAL_GPIO_Init+0x1fa>
 80012fc:	2301      	movs	r3, #1
 80012fe:	e000      	b.n	8001302 <HAL_GPIO_Init+0x1fa>
 8001300:	2300      	movs	r3, #0
 8001302:	697a      	ldr	r2, [r7, #20]
 8001304:	f002 0203 	and.w	r2, r2, #3
 8001308:	0092      	lsls	r2, r2, #2
 800130a:	4093      	lsls	r3, r2
 800130c:	693a      	ldr	r2, [r7, #16]
 800130e:	4313      	orrs	r3, r2
 8001310:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001312:	4937      	ldr	r1, [pc, #220]	; (80013f0 <HAL_GPIO_Init+0x2e8>)
 8001314:	697b      	ldr	r3, [r7, #20]
 8001316:	089b      	lsrs	r3, r3, #2
 8001318:	3302      	adds	r3, #2
 800131a:	693a      	ldr	r2, [r7, #16]
 800131c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001320:	4b39      	ldr	r3, [pc, #228]	; (8001408 <HAL_GPIO_Init+0x300>)
 8001322:	689b      	ldr	r3, [r3, #8]
 8001324:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	43db      	mvns	r3, r3
 800132a:	693a      	ldr	r2, [r7, #16]
 800132c:	4013      	ands	r3, r2
 800132e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001338:	2b00      	cmp	r3, #0
 800133a:	d003      	beq.n	8001344 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800133c:	693a      	ldr	r2, [r7, #16]
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	4313      	orrs	r3, r2
 8001342:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001344:	4a30      	ldr	r2, [pc, #192]	; (8001408 <HAL_GPIO_Init+0x300>)
 8001346:	693b      	ldr	r3, [r7, #16]
 8001348:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800134a:	4b2f      	ldr	r3, [pc, #188]	; (8001408 <HAL_GPIO_Init+0x300>)
 800134c:	68db      	ldr	r3, [r3, #12]
 800134e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	43db      	mvns	r3, r3
 8001354:	693a      	ldr	r2, [r7, #16]
 8001356:	4013      	ands	r3, r2
 8001358:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	685b      	ldr	r3, [r3, #4]
 800135e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001362:	2b00      	cmp	r3, #0
 8001364:	d003      	beq.n	800136e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001366:	693a      	ldr	r2, [r7, #16]
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	4313      	orrs	r3, r2
 800136c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800136e:	4a26      	ldr	r2, [pc, #152]	; (8001408 <HAL_GPIO_Init+0x300>)
 8001370:	693b      	ldr	r3, [r7, #16]
 8001372:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001374:	4b24      	ldr	r3, [pc, #144]	; (8001408 <HAL_GPIO_Init+0x300>)
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	43db      	mvns	r3, r3
 800137e:	693a      	ldr	r2, [r7, #16]
 8001380:	4013      	ands	r3, r2
 8001382:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800138c:	2b00      	cmp	r3, #0
 800138e:	d003      	beq.n	8001398 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001390:	693a      	ldr	r2, [r7, #16]
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	4313      	orrs	r3, r2
 8001396:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001398:	4a1b      	ldr	r2, [pc, #108]	; (8001408 <HAL_GPIO_Init+0x300>)
 800139a:	693b      	ldr	r3, [r7, #16]
 800139c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800139e:	4b1a      	ldr	r3, [pc, #104]	; (8001408 <HAL_GPIO_Init+0x300>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	43db      	mvns	r3, r3
 80013a8:	693a      	ldr	r2, [r7, #16]
 80013aa:	4013      	ands	r3, r2
 80013ac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d003      	beq.n	80013c2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80013ba:	693a      	ldr	r2, [r7, #16]
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	4313      	orrs	r3, r2
 80013c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80013c2:	4a11      	ldr	r2, [pc, #68]	; (8001408 <HAL_GPIO_Init+0x300>)
 80013c4:	693b      	ldr	r3, [r7, #16]
 80013c6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80013c8:	697b      	ldr	r3, [r7, #20]
 80013ca:	3301      	adds	r3, #1
 80013cc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	681a      	ldr	r2, [r3, #0]
 80013d2:	697b      	ldr	r3, [r7, #20]
 80013d4:	fa22 f303 	lsr.w	r3, r2, r3
 80013d8:	2b00      	cmp	r3, #0
 80013da:	f47f ae9d 	bne.w	8001118 <HAL_GPIO_Init+0x10>
  }
}
 80013de:	bf00      	nop
 80013e0:	bf00      	nop
 80013e2:	371c      	adds	r7, #28
 80013e4:	46bd      	mov	sp, r7
 80013e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ea:	4770      	bx	lr
 80013ec:	40021000 	.word	0x40021000
 80013f0:	40010000 	.word	0x40010000
 80013f4:	48000400 	.word	0x48000400
 80013f8:	48000800 	.word	0x48000800
 80013fc:	48000c00 	.word	0x48000c00
 8001400:	48001000 	.word	0x48001000
 8001404:	48001400 	.word	0x48001400
 8001408:	40010400 	.word	0x40010400

0800140c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800140c:	b480      	push	{r7}
 800140e:	b083      	sub	sp, #12
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
 8001414:	460b      	mov	r3, r1
 8001416:	807b      	strh	r3, [r7, #2]
 8001418:	4613      	mov	r3, r2
 800141a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800141c:	787b      	ldrb	r3, [r7, #1]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d003      	beq.n	800142a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001422:	887a      	ldrh	r2, [r7, #2]
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001428:	e002      	b.n	8001430 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800142a:	887a      	ldrh	r2, [r7, #2]
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001430:	bf00      	nop
 8001432:	370c      	adds	r7, #12
 8001434:	46bd      	mov	sp, r7
 8001436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143a:	4770      	bx	lr

0800143c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800143c:	b480      	push	{r7}
 800143e:	b085      	sub	sp, #20
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	2b00      	cmp	r3, #0
 8001448:	d141      	bne.n	80014ce <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800144a:	4b4b      	ldr	r3, [pc, #300]	; (8001578 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001452:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001456:	d131      	bne.n	80014bc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001458:	4b47      	ldr	r3, [pc, #284]	; (8001578 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800145a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800145e:	4a46      	ldr	r2, [pc, #280]	; (8001578 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001460:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001464:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001468:	4b43      	ldr	r3, [pc, #268]	; (8001578 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001470:	4a41      	ldr	r2, [pc, #260]	; (8001578 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001472:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001476:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001478:	4b40      	ldr	r3, [pc, #256]	; (800157c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	2232      	movs	r2, #50	; 0x32
 800147e:	fb02 f303 	mul.w	r3, r2, r3
 8001482:	4a3f      	ldr	r2, [pc, #252]	; (8001580 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001484:	fba2 2303 	umull	r2, r3, r2, r3
 8001488:	0c9b      	lsrs	r3, r3, #18
 800148a:	3301      	adds	r3, #1
 800148c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800148e:	e002      	b.n	8001496 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	3b01      	subs	r3, #1
 8001494:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001496:	4b38      	ldr	r3, [pc, #224]	; (8001578 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001498:	695b      	ldr	r3, [r3, #20]
 800149a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800149e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80014a2:	d102      	bne.n	80014aa <HAL_PWREx_ControlVoltageScaling+0x6e>
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d1f2      	bne.n	8001490 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80014aa:	4b33      	ldr	r3, [pc, #204]	; (8001578 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014ac:	695b      	ldr	r3, [r3, #20]
 80014ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80014b6:	d158      	bne.n	800156a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80014b8:	2303      	movs	r3, #3
 80014ba:	e057      	b.n	800156c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80014bc:	4b2e      	ldr	r3, [pc, #184]	; (8001578 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80014c2:	4a2d      	ldr	r2, [pc, #180]	; (8001578 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80014c8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80014cc:	e04d      	b.n	800156a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80014d4:	d141      	bne.n	800155a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80014d6:	4b28      	ldr	r3, [pc, #160]	; (8001578 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80014de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80014e2:	d131      	bne.n	8001548 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80014e4:	4b24      	ldr	r3, [pc, #144]	; (8001578 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80014ea:	4a23      	ldr	r2, [pc, #140]	; (8001578 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014f0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80014f4:	4b20      	ldr	r3, [pc, #128]	; (8001578 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80014fc:	4a1e      	ldr	r2, [pc, #120]	; (8001578 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001502:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001504:	4b1d      	ldr	r3, [pc, #116]	; (800157c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	2232      	movs	r2, #50	; 0x32
 800150a:	fb02 f303 	mul.w	r3, r2, r3
 800150e:	4a1c      	ldr	r2, [pc, #112]	; (8001580 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001510:	fba2 2303 	umull	r2, r3, r2, r3
 8001514:	0c9b      	lsrs	r3, r3, #18
 8001516:	3301      	adds	r3, #1
 8001518:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800151a:	e002      	b.n	8001522 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	3b01      	subs	r3, #1
 8001520:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001522:	4b15      	ldr	r3, [pc, #84]	; (8001578 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001524:	695b      	ldr	r3, [r3, #20]
 8001526:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800152a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800152e:	d102      	bne.n	8001536 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	2b00      	cmp	r3, #0
 8001534:	d1f2      	bne.n	800151c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001536:	4b10      	ldr	r3, [pc, #64]	; (8001578 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001538:	695b      	ldr	r3, [r3, #20]
 800153a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800153e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001542:	d112      	bne.n	800156a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001544:	2303      	movs	r3, #3
 8001546:	e011      	b.n	800156c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001548:	4b0b      	ldr	r3, [pc, #44]	; (8001578 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800154a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800154e:	4a0a      	ldr	r2, [pc, #40]	; (8001578 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001550:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001554:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001558:	e007      	b.n	800156a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800155a:	4b07      	ldr	r3, [pc, #28]	; (8001578 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001562:	4a05      	ldr	r2, [pc, #20]	; (8001578 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001564:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001568:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800156a:	2300      	movs	r3, #0
}
 800156c:	4618      	mov	r0, r3
 800156e:	3714      	adds	r7, #20
 8001570:	46bd      	mov	sp, r7
 8001572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001576:	4770      	bx	lr
 8001578:	40007000 	.word	0x40007000
 800157c:	20000000 	.word	0x20000000
 8001580:	431bde83 	.word	0x431bde83

08001584 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001584:	b480      	push	{r7}
 8001586:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001588:	4b05      	ldr	r3, [pc, #20]	; (80015a0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800158a:	689b      	ldr	r3, [r3, #8]
 800158c:	4a04      	ldr	r2, [pc, #16]	; (80015a0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800158e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001592:	6093      	str	r3, [r2, #8]
}
 8001594:	bf00      	nop
 8001596:	46bd      	mov	sp, r7
 8001598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159c:	4770      	bx	lr
 800159e:	bf00      	nop
 80015a0:	40007000 	.word	0x40007000

080015a4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b088      	sub	sp, #32
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d101      	bne.n	80015b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80015b2:	2301      	movs	r3, #1
 80015b4:	e306      	b.n	8001bc4 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f003 0301 	and.w	r3, r3, #1
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d075      	beq.n	80016ae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80015c2:	4b97      	ldr	r3, [pc, #604]	; (8001820 <HAL_RCC_OscConfig+0x27c>)
 80015c4:	689b      	ldr	r3, [r3, #8]
 80015c6:	f003 030c 	and.w	r3, r3, #12
 80015ca:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80015cc:	4b94      	ldr	r3, [pc, #592]	; (8001820 <HAL_RCC_OscConfig+0x27c>)
 80015ce:	68db      	ldr	r3, [r3, #12]
 80015d0:	f003 0303 	and.w	r3, r3, #3
 80015d4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80015d6:	69bb      	ldr	r3, [r7, #24]
 80015d8:	2b0c      	cmp	r3, #12
 80015da:	d102      	bne.n	80015e2 <HAL_RCC_OscConfig+0x3e>
 80015dc:	697b      	ldr	r3, [r7, #20]
 80015de:	2b03      	cmp	r3, #3
 80015e0:	d002      	beq.n	80015e8 <HAL_RCC_OscConfig+0x44>
 80015e2:	69bb      	ldr	r3, [r7, #24]
 80015e4:	2b08      	cmp	r3, #8
 80015e6:	d10b      	bne.n	8001600 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015e8:	4b8d      	ldr	r3, [pc, #564]	; (8001820 <HAL_RCC_OscConfig+0x27c>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d05b      	beq.n	80016ac <HAL_RCC_OscConfig+0x108>
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d157      	bne.n	80016ac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80015fc:	2301      	movs	r3, #1
 80015fe:	e2e1      	b.n	8001bc4 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001608:	d106      	bne.n	8001618 <HAL_RCC_OscConfig+0x74>
 800160a:	4b85      	ldr	r3, [pc, #532]	; (8001820 <HAL_RCC_OscConfig+0x27c>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	4a84      	ldr	r2, [pc, #528]	; (8001820 <HAL_RCC_OscConfig+0x27c>)
 8001610:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001614:	6013      	str	r3, [r2, #0]
 8001616:	e01d      	b.n	8001654 <HAL_RCC_OscConfig+0xb0>
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001620:	d10c      	bne.n	800163c <HAL_RCC_OscConfig+0x98>
 8001622:	4b7f      	ldr	r3, [pc, #508]	; (8001820 <HAL_RCC_OscConfig+0x27c>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	4a7e      	ldr	r2, [pc, #504]	; (8001820 <HAL_RCC_OscConfig+0x27c>)
 8001628:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800162c:	6013      	str	r3, [r2, #0]
 800162e:	4b7c      	ldr	r3, [pc, #496]	; (8001820 <HAL_RCC_OscConfig+0x27c>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	4a7b      	ldr	r2, [pc, #492]	; (8001820 <HAL_RCC_OscConfig+0x27c>)
 8001634:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001638:	6013      	str	r3, [r2, #0]
 800163a:	e00b      	b.n	8001654 <HAL_RCC_OscConfig+0xb0>
 800163c:	4b78      	ldr	r3, [pc, #480]	; (8001820 <HAL_RCC_OscConfig+0x27c>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4a77      	ldr	r2, [pc, #476]	; (8001820 <HAL_RCC_OscConfig+0x27c>)
 8001642:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001646:	6013      	str	r3, [r2, #0]
 8001648:	4b75      	ldr	r3, [pc, #468]	; (8001820 <HAL_RCC_OscConfig+0x27c>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4a74      	ldr	r2, [pc, #464]	; (8001820 <HAL_RCC_OscConfig+0x27c>)
 800164e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001652:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	2b00      	cmp	r3, #0
 800165a:	d013      	beq.n	8001684 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800165c:	f7ff fc16 	bl	8000e8c <HAL_GetTick>
 8001660:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001662:	e008      	b.n	8001676 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001664:	f7ff fc12 	bl	8000e8c <HAL_GetTick>
 8001668:	4602      	mov	r2, r0
 800166a:	693b      	ldr	r3, [r7, #16]
 800166c:	1ad3      	subs	r3, r2, r3
 800166e:	2b64      	cmp	r3, #100	; 0x64
 8001670:	d901      	bls.n	8001676 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001672:	2303      	movs	r3, #3
 8001674:	e2a6      	b.n	8001bc4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001676:	4b6a      	ldr	r3, [pc, #424]	; (8001820 <HAL_RCC_OscConfig+0x27c>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800167e:	2b00      	cmp	r3, #0
 8001680:	d0f0      	beq.n	8001664 <HAL_RCC_OscConfig+0xc0>
 8001682:	e014      	b.n	80016ae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001684:	f7ff fc02 	bl	8000e8c <HAL_GetTick>
 8001688:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800168a:	e008      	b.n	800169e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800168c:	f7ff fbfe 	bl	8000e8c <HAL_GetTick>
 8001690:	4602      	mov	r2, r0
 8001692:	693b      	ldr	r3, [r7, #16]
 8001694:	1ad3      	subs	r3, r2, r3
 8001696:	2b64      	cmp	r3, #100	; 0x64
 8001698:	d901      	bls.n	800169e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800169a:	2303      	movs	r3, #3
 800169c:	e292      	b.n	8001bc4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800169e:	4b60      	ldr	r3, [pc, #384]	; (8001820 <HAL_RCC_OscConfig+0x27c>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d1f0      	bne.n	800168c <HAL_RCC_OscConfig+0xe8>
 80016aa:	e000      	b.n	80016ae <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f003 0302 	and.w	r3, r3, #2
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d075      	beq.n	80017a6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80016ba:	4b59      	ldr	r3, [pc, #356]	; (8001820 <HAL_RCC_OscConfig+0x27c>)
 80016bc:	689b      	ldr	r3, [r3, #8]
 80016be:	f003 030c 	and.w	r3, r3, #12
 80016c2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80016c4:	4b56      	ldr	r3, [pc, #344]	; (8001820 <HAL_RCC_OscConfig+0x27c>)
 80016c6:	68db      	ldr	r3, [r3, #12]
 80016c8:	f003 0303 	and.w	r3, r3, #3
 80016cc:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80016ce:	69bb      	ldr	r3, [r7, #24]
 80016d0:	2b0c      	cmp	r3, #12
 80016d2:	d102      	bne.n	80016da <HAL_RCC_OscConfig+0x136>
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	2b02      	cmp	r3, #2
 80016d8:	d002      	beq.n	80016e0 <HAL_RCC_OscConfig+0x13c>
 80016da:	69bb      	ldr	r3, [r7, #24]
 80016dc:	2b04      	cmp	r3, #4
 80016de:	d11f      	bne.n	8001720 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80016e0:	4b4f      	ldr	r3, [pc, #316]	; (8001820 <HAL_RCC_OscConfig+0x27c>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d005      	beq.n	80016f8 <HAL_RCC_OscConfig+0x154>
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	68db      	ldr	r3, [r3, #12]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d101      	bne.n	80016f8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80016f4:	2301      	movs	r3, #1
 80016f6:	e265      	b.n	8001bc4 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016f8:	4b49      	ldr	r3, [pc, #292]	; (8001820 <HAL_RCC_OscConfig+0x27c>)
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	691b      	ldr	r3, [r3, #16]
 8001704:	061b      	lsls	r3, r3, #24
 8001706:	4946      	ldr	r1, [pc, #280]	; (8001820 <HAL_RCC_OscConfig+0x27c>)
 8001708:	4313      	orrs	r3, r2
 800170a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800170c:	4b45      	ldr	r3, [pc, #276]	; (8001824 <HAL_RCC_OscConfig+0x280>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4618      	mov	r0, r3
 8001712:	f7ff fb6f 	bl	8000df4 <HAL_InitTick>
 8001716:	4603      	mov	r3, r0
 8001718:	2b00      	cmp	r3, #0
 800171a:	d043      	beq.n	80017a4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800171c:	2301      	movs	r3, #1
 800171e:	e251      	b.n	8001bc4 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	68db      	ldr	r3, [r3, #12]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d023      	beq.n	8001770 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001728:	4b3d      	ldr	r3, [pc, #244]	; (8001820 <HAL_RCC_OscConfig+0x27c>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a3c      	ldr	r2, [pc, #240]	; (8001820 <HAL_RCC_OscConfig+0x27c>)
 800172e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001732:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001734:	f7ff fbaa 	bl	8000e8c <HAL_GetTick>
 8001738:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800173a:	e008      	b.n	800174e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800173c:	f7ff fba6 	bl	8000e8c <HAL_GetTick>
 8001740:	4602      	mov	r2, r0
 8001742:	693b      	ldr	r3, [r7, #16]
 8001744:	1ad3      	subs	r3, r2, r3
 8001746:	2b02      	cmp	r3, #2
 8001748:	d901      	bls.n	800174e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800174a:	2303      	movs	r3, #3
 800174c:	e23a      	b.n	8001bc4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800174e:	4b34      	ldr	r3, [pc, #208]	; (8001820 <HAL_RCC_OscConfig+0x27c>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001756:	2b00      	cmp	r3, #0
 8001758:	d0f0      	beq.n	800173c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800175a:	4b31      	ldr	r3, [pc, #196]	; (8001820 <HAL_RCC_OscConfig+0x27c>)
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	691b      	ldr	r3, [r3, #16]
 8001766:	061b      	lsls	r3, r3, #24
 8001768:	492d      	ldr	r1, [pc, #180]	; (8001820 <HAL_RCC_OscConfig+0x27c>)
 800176a:	4313      	orrs	r3, r2
 800176c:	604b      	str	r3, [r1, #4]
 800176e:	e01a      	b.n	80017a6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001770:	4b2b      	ldr	r3, [pc, #172]	; (8001820 <HAL_RCC_OscConfig+0x27c>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4a2a      	ldr	r2, [pc, #168]	; (8001820 <HAL_RCC_OscConfig+0x27c>)
 8001776:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800177a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800177c:	f7ff fb86 	bl	8000e8c <HAL_GetTick>
 8001780:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001782:	e008      	b.n	8001796 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001784:	f7ff fb82 	bl	8000e8c <HAL_GetTick>
 8001788:	4602      	mov	r2, r0
 800178a:	693b      	ldr	r3, [r7, #16]
 800178c:	1ad3      	subs	r3, r2, r3
 800178e:	2b02      	cmp	r3, #2
 8001790:	d901      	bls.n	8001796 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001792:	2303      	movs	r3, #3
 8001794:	e216      	b.n	8001bc4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001796:	4b22      	ldr	r3, [pc, #136]	; (8001820 <HAL_RCC_OscConfig+0x27c>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d1f0      	bne.n	8001784 <HAL_RCC_OscConfig+0x1e0>
 80017a2:	e000      	b.n	80017a6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80017a4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f003 0308 	and.w	r3, r3, #8
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d041      	beq.n	8001836 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	695b      	ldr	r3, [r3, #20]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d01c      	beq.n	80017f4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017ba:	4b19      	ldr	r3, [pc, #100]	; (8001820 <HAL_RCC_OscConfig+0x27c>)
 80017bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017c0:	4a17      	ldr	r2, [pc, #92]	; (8001820 <HAL_RCC_OscConfig+0x27c>)
 80017c2:	f043 0301 	orr.w	r3, r3, #1
 80017c6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017ca:	f7ff fb5f 	bl	8000e8c <HAL_GetTick>
 80017ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80017d0:	e008      	b.n	80017e4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017d2:	f7ff fb5b 	bl	8000e8c <HAL_GetTick>
 80017d6:	4602      	mov	r2, r0
 80017d8:	693b      	ldr	r3, [r7, #16]
 80017da:	1ad3      	subs	r3, r2, r3
 80017dc:	2b02      	cmp	r3, #2
 80017de:	d901      	bls.n	80017e4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80017e0:	2303      	movs	r3, #3
 80017e2:	e1ef      	b.n	8001bc4 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80017e4:	4b0e      	ldr	r3, [pc, #56]	; (8001820 <HAL_RCC_OscConfig+0x27c>)
 80017e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017ea:	f003 0302 	and.w	r3, r3, #2
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d0ef      	beq.n	80017d2 <HAL_RCC_OscConfig+0x22e>
 80017f2:	e020      	b.n	8001836 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017f4:	4b0a      	ldr	r3, [pc, #40]	; (8001820 <HAL_RCC_OscConfig+0x27c>)
 80017f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017fa:	4a09      	ldr	r2, [pc, #36]	; (8001820 <HAL_RCC_OscConfig+0x27c>)
 80017fc:	f023 0301 	bic.w	r3, r3, #1
 8001800:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001804:	f7ff fb42 	bl	8000e8c <HAL_GetTick>
 8001808:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800180a:	e00d      	b.n	8001828 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800180c:	f7ff fb3e 	bl	8000e8c <HAL_GetTick>
 8001810:	4602      	mov	r2, r0
 8001812:	693b      	ldr	r3, [r7, #16]
 8001814:	1ad3      	subs	r3, r2, r3
 8001816:	2b02      	cmp	r3, #2
 8001818:	d906      	bls.n	8001828 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800181a:	2303      	movs	r3, #3
 800181c:	e1d2      	b.n	8001bc4 <HAL_RCC_OscConfig+0x620>
 800181e:	bf00      	nop
 8001820:	40021000 	.word	0x40021000
 8001824:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001828:	4b8c      	ldr	r3, [pc, #560]	; (8001a5c <HAL_RCC_OscConfig+0x4b8>)
 800182a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800182e:	f003 0302 	and.w	r3, r3, #2
 8001832:	2b00      	cmp	r3, #0
 8001834:	d1ea      	bne.n	800180c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f003 0304 	and.w	r3, r3, #4
 800183e:	2b00      	cmp	r3, #0
 8001840:	f000 80a6 	beq.w	8001990 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001844:	2300      	movs	r3, #0
 8001846:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001848:	4b84      	ldr	r3, [pc, #528]	; (8001a5c <HAL_RCC_OscConfig+0x4b8>)
 800184a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800184c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001850:	2b00      	cmp	r3, #0
 8001852:	d101      	bne.n	8001858 <HAL_RCC_OscConfig+0x2b4>
 8001854:	2301      	movs	r3, #1
 8001856:	e000      	b.n	800185a <HAL_RCC_OscConfig+0x2b6>
 8001858:	2300      	movs	r3, #0
 800185a:	2b00      	cmp	r3, #0
 800185c:	d00d      	beq.n	800187a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800185e:	4b7f      	ldr	r3, [pc, #508]	; (8001a5c <HAL_RCC_OscConfig+0x4b8>)
 8001860:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001862:	4a7e      	ldr	r2, [pc, #504]	; (8001a5c <HAL_RCC_OscConfig+0x4b8>)
 8001864:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001868:	6593      	str	r3, [r2, #88]	; 0x58
 800186a:	4b7c      	ldr	r3, [pc, #496]	; (8001a5c <HAL_RCC_OscConfig+0x4b8>)
 800186c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800186e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001872:	60fb      	str	r3, [r7, #12]
 8001874:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001876:	2301      	movs	r3, #1
 8001878:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800187a:	4b79      	ldr	r3, [pc, #484]	; (8001a60 <HAL_RCC_OscConfig+0x4bc>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001882:	2b00      	cmp	r3, #0
 8001884:	d118      	bne.n	80018b8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001886:	4b76      	ldr	r3, [pc, #472]	; (8001a60 <HAL_RCC_OscConfig+0x4bc>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4a75      	ldr	r2, [pc, #468]	; (8001a60 <HAL_RCC_OscConfig+0x4bc>)
 800188c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001890:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001892:	f7ff fafb 	bl	8000e8c <HAL_GetTick>
 8001896:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001898:	e008      	b.n	80018ac <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800189a:	f7ff faf7 	bl	8000e8c <HAL_GetTick>
 800189e:	4602      	mov	r2, r0
 80018a0:	693b      	ldr	r3, [r7, #16]
 80018a2:	1ad3      	subs	r3, r2, r3
 80018a4:	2b02      	cmp	r3, #2
 80018a6:	d901      	bls.n	80018ac <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80018a8:	2303      	movs	r3, #3
 80018aa:	e18b      	b.n	8001bc4 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018ac:	4b6c      	ldr	r3, [pc, #432]	; (8001a60 <HAL_RCC_OscConfig+0x4bc>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d0f0      	beq.n	800189a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	689b      	ldr	r3, [r3, #8]
 80018bc:	2b01      	cmp	r3, #1
 80018be:	d108      	bne.n	80018d2 <HAL_RCC_OscConfig+0x32e>
 80018c0:	4b66      	ldr	r3, [pc, #408]	; (8001a5c <HAL_RCC_OscConfig+0x4b8>)
 80018c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018c6:	4a65      	ldr	r2, [pc, #404]	; (8001a5c <HAL_RCC_OscConfig+0x4b8>)
 80018c8:	f043 0301 	orr.w	r3, r3, #1
 80018cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80018d0:	e024      	b.n	800191c <HAL_RCC_OscConfig+0x378>
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	689b      	ldr	r3, [r3, #8]
 80018d6:	2b05      	cmp	r3, #5
 80018d8:	d110      	bne.n	80018fc <HAL_RCC_OscConfig+0x358>
 80018da:	4b60      	ldr	r3, [pc, #384]	; (8001a5c <HAL_RCC_OscConfig+0x4b8>)
 80018dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018e0:	4a5e      	ldr	r2, [pc, #376]	; (8001a5c <HAL_RCC_OscConfig+0x4b8>)
 80018e2:	f043 0304 	orr.w	r3, r3, #4
 80018e6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80018ea:	4b5c      	ldr	r3, [pc, #368]	; (8001a5c <HAL_RCC_OscConfig+0x4b8>)
 80018ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018f0:	4a5a      	ldr	r2, [pc, #360]	; (8001a5c <HAL_RCC_OscConfig+0x4b8>)
 80018f2:	f043 0301 	orr.w	r3, r3, #1
 80018f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80018fa:	e00f      	b.n	800191c <HAL_RCC_OscConfig+0x378>
 80018fc:	4b57      	ldr	r3, [pc, #348]	; (8001a5c <HAL_RCC_OscConfig+0x4b8>)
 80018fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001902:	4a56      	ldr	r2, [pc, #344]	; (8001a5c <HAL_RCC_OscConfig+0x4b8>)
 8001904:	f023 0301 	bic.w	r3, r3, #1
 8001908:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800190c:	4b53      	ldr	r3, [pc, #332]	; (8001a5c <HAL_RCC_OscConfig+0x4b8>)
 800190e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001912:	4a52      	ldr	r2, [pc, #328]	; (8001a5c <HAL_RCC_OscConfig+0x4b8>)
 8001914:	f023 0304 	bic.w	r3, r3, #4
 8001918:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	689b      	ldr	r3, [r3, #8]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d016      	beq.n	8001952 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001924:	f7ff fab2 	bl	8000e8c <HAL_GetTick>
 8001928:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800192a:	e00a      	b.n	8001942 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800192c:	f7ff faae 	bl	8000e8c <HAL_GetTick>
 8001930:	4602      	mov	r2, r0
 8001932:	693b      	ldr	r3, [r7, #16]
 8001934:	1ad3      	subs	r3, r2, r3
 8001936:	f241 3288 	movw	r2, #5000	; 0x1388
 800193a:	4293      	cmp	r3, r2
 800193c:	d901      	bls.n	8001942 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800193e:	2303      	movs	r3, #3
 8001940:	e140      	b.n	8001bc4 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001942:	4b46      	ldr	r3, [pc, #280]	; (8001a5c <HAL_RCC_OscConfig+0x4b8>)
 8001944:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001948:	f003 0302 	and.w	r3, r3, #2
 800194c:	2b00      	cmp	r3, #0
 800194e:	d0ed      	beq.n	800192c <HAL_RCC_OscConfig+0x388>
 8001950:	e015      	b.n	800197e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001952:	f7ff fa9b 	bl	8000e8c <HAL_GetTick>
 8001956:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001958:	e00a      	b.n	8001970 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800195a:	f7ff fa97 	bl	8000e8c <HAL_GetTick>
 800195e:	4602      	mov	r2, r0
 8001960:	693b      	ldr	r3, [r7, #16]
 8001962:	1ad3      	subs	r3, r2, r3
 8001964:	f241 3288 	movw	r2, #5000	; 0x1388
 8001968:	4293      	cmp	r3, r2
 800196a:	d901      	bls.n	8001970 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800196c:	2303      	movs	r3, #3
 800196e:	e129      	b.n	8001bc4 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001970:	4b3a      	ldr	r3, [pc, #232]	; (8001a5c <HAL_RCC_OscConfig+0x4b8>)
 8001972:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001976:	f003 0302 	and.w	r3, r3, #2
 800197a:	2b00      	cmp	r3, #0
 800197c:	d1ed      	bne.n	800195a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800197e:	7ffb      	ldrb	r3, [r7, #31]
 8001980:	2b01      	cmp	r3, #1
 8001982:	d105      	bne.n	8001990 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001984:	4b35      	ldr	r3, [pc, #212]	; (8001a5c <HAL_RCC_OscConfig+0x4b8>)
 8001986:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001988:	4a34      	ldr	r2, [pc, #208]	; (8001a5c <HAL_RCC_OscConfig+0x4b8>)
 800198a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800198e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f003 0320 	and.w	r3, r3, #32
 8001998:	2b00      	cmp	r3, #0
 800199a:	d03c      	beq.n	8001a16 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	699b      	ldr	r3, [r3, #24]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d01c      	beq.n	80019de <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80019a4:	4b2d      	ldr	r3, [pc, #180]	; (8001a5c <HAL_RCC_OscConfig+0x4b8>)
 80019a6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80019aa:	4a2c      	ldr	r2, [pc, #176]	; (8001a5c <HAL_RCC_OscConfig+0x4b8>)
 80019ac:	f043 0301 	orr.w	r3, r3, #1
 80019b0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019b4:	f7ff fa6a 	bl	8000e8c <HAL_GetTick>
 80019b8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80019ba:	e008      	b.n	80019ce <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80019bc:	f7ff fa66 	bl	8000e8c <HAL_GetTick>
 80019c0:	4602      	mov	r2, r0
 80019c2:	693b      	ldr	r3, [r7, #16]
 80019c4:	1ad3      	subs	r3, r2, r3
 80019c6:	2b02      	cmp	r3, #2
 80019c8:	d901      	bls.n	80019ce <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80019ca:	2303      	movs	r3, #3
 80019cc:	e0fa      	b.n	8001bc4 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80019ce:	4b23      	ldr	r3, [pc, #140]	; (8001a5c <HAL_RCC_OscConfig+0x4b8>)
 80019d0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80019d4:	f003 0302 	and.w	r3, r3, #2
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d0ef      	beq.n	80019bc <HAL_RCC_OscConfig+0x418>
 80019dc:	e01b      	b.n	8001a16 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80019de:	4b1f      	ldr	r3, [pc, #124]	; (8001a5c <HAL_RCC_OscConfig+0x4b8>)
 80019e0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80019e4:	4a1d      	ldr	r2, [pc, #116]	; (8001a5c <HAL_RCC_OscConfig+0x4b8>)
 80019e6:	f023 0301 	bic.w	r3, r3, #1
 80019ea:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019ee:	f7ff fa4d 	bl	8000e8c <HAL_GetTick>
 80019f2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80019f4:	e008      	b.n	8001a08 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80019f6:	f7ff fa49 	bl	8000e8c <HAL_GetTick>
 80019fa:	4602      	mov	r2, r0
 80019fc:	693b      	ldr	r3, [r7, #16]
 80019fe:	1ad3      	subs	r3, r2, r3
 8001a00:	2b02      	cmp	r3, #2
 8001a02:	d901      	bls.n	8001a08 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001a04:	2303      	movs	r3, #3
 8001a06:	e0dd      	b.n	8001bc4 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001a08:	4b14      	ldr	r3, [pc, #80]	; (8001a5c <HAL_RCC_OscConfig+0x4b8>)
 8001a0a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001a0e:	f003 0302 	and.w	r3, r3, #2
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d1ef      	bne.n	80019f6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	69db      	ldr	r3, [r3, #28]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	f000 80d1 	beq.w	8001bc2 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001a20:	4b0e      	ldr	r3, [pc, #56]	; (8001a5c <HAL_RCC_OscConfig+0x4b8>)
 8001a22:	689b      	ldr	r3, [r3, #8]
 8001a24:	f003 030c 	and.w	r3, r3, #12
 8001a28:	2b0c      	cmp	r3, #12
 8001a2a:	f000 808b 	beq.w	8001b44 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	69db      	ldr	r3, [r3, #28]
 8001a32:	2b02      	cmp	r3, #2
 8001a34:	d15e      	bne.n	8001af4 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a36:	4b09      	ldr	r3, [pc, #36]	; (8001a5c <HAL_RCC_OscConfig+0x4b8>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4a08      	ldr	r2, [pc, #32]	; (8001a5c <HAL_RCC_OscConfig+0x4b8>)
 8001a3c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a40:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a42:	f7ff fa23 	bl	8000e8c <HAL_GetTick>
 8001a46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a48:	e00c      	b.n	8001a64 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a4a:	f7ff fa1f 	bl	8000e8c <HAL_GetTick>
 8001a4e:	4602      	mov	r2, r0
 8001a50:	693b      	ldr	r3, [r7, #16]
 8001a52:	1ad3      	subs	r3, r2, r3
 8001a54:	2b02      	cmp	r3, #2
 8001a56:	d905      	bls.n	8001a64 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001a58:	2303      	movs	r3, #3
 8001a5a:	e0b3      	b.n	8001bc4 <HAL_RCC_OscConfig+0x620>
 8001a5c:	40021000 	.word	0x40021000
 8001a60:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a64:	4b59      	ldr	r3, [pc, #356]	; (8001bcc <HAL_RCC_OscConfig+0x628>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d1ec      	bne.n	8001a4a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a70:	4b56      	ldr	r3, [pc, #344]	; (8001bcc <HAL_RCC_OscConfig+0x628>)
 8001a72:	68da      	ldr	r2, [r3, #12]
 8001a74:	4b56      	ldr	r3, [pc, #344]	; (8001bd0 <HAL_RCC_OscConfig+0x62c>)
 8001a76:	4013      	ands	r3, r2
 8001a78:	687a      	ldr	r2, [r7, #4]
 8001a7a:	6a11      	ldr	r1, [r2, #32]
 8001a7c:	687a      	ldr	r2, [r7, #4]
 8001a7e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001a80:	3a01      	subs	r2, #1
 8001a82:	0112      	lsls	r2, r2, #4
 8001a84:	4311      	orrs	r1, r2
 8001a86:	687a      	ldr	r2, [r7, #4]
 8001a88:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001a8a:	0212      	lsls	r2, r2, #8
 8001a8c:	4311      	orrs	r1, r2
 8001a8e:	687a      	ldr	r2, [r7, #4]
 8001a90:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001a92:	0852      	lsrs	r2, r2, #1
 8001a94:	3a01      	subs	r2, #1
 8001a96:	0552      	lsls	r2, r2, #21
 8001a98:	4311      	orrs	r1, r2
 8001a9a:	687a      	ldr	r2, [r7, #4]
 8001a9c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001a9e:	0852      	lsrs	r2, r2, #1
 8001aa0:	3a01      	subs	r2, #1
 8001aa2:	0652      	lsls	r2, r2, #25
 8001aa4:	4311      	orrs	r1, r2
 8001aa6:	687a      	ldr	r2, [r7, #4]
 8001aa8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001aaa:	06d2      	lsls	r2, r2, #27
 8001aac:	430a      	orrs	r2, r1
 8001aae:	4947      	ldr	r1, [pc, #284]	; (8001bcc <HAL_RCC_OscConfig+0x628>)
 8001ab0:	4313      	orrs	r3, r2
 8001ab2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ab4:	4b45      	ldr	r3, [pc, #276]	; (8001bcc <HAL_RCC_OscConfig+0x628>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4a44      	ldr	r2, [pc, #272]	; (8001bcc <HAL_RCC_OscConfig+0x628>)
 8001aba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001abe:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001ac0:	4b42      	ldr	r3, [pc, #264]	; (8001bcc <HAL_RCC_OscConfig+0x628>)
 8001ac2:	68db      	ldr	r3, [r3, #12]
 8001ac4:	4a41      	ldr	r2, [pc, #260]	; (8001bcc <HAL_RCC_OscConfig+0x628>)
 8001ac6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001aca:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001acc:	f7ff f9de 	bl	8000e8c <HAL_GetTick>
 8001ad0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ad2:	e008      	b.n	8001ae6 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ad4:	f7ff f9da 	bl	8000e8c <HAL_GetTick>
 8001ad8:	4602      	mov	r2, r0
 8001ada:	693b      	ldr	r3, [r7, #16]
 8001adc:	1ad3      	subs	r3, r2, r3
 8001ade:	2b02      	cmp	r3, #2
 8001ae0:	d901      	bls.n	8001ae6 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8001ae2:	2303      	movs	r3, #3
 8001ae4:	e06e      	b.n	8001bc4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ae6:	4b39      	ldr	r3, [pc, #228]	; (8001bcc <HAL_RCC_OscConfig+0x628>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d0f0      	beq.n	8001ad4 <HAL_RCC_OscConfig+0x530>
 8001af2:	e066      	b.n	8001bc2 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001af4:	4b35      	ldr	r3, [pc, #212]	; (8001bcc <HAL_RCC_OscConfig+0x628>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a34      	ldr	r2, [pc, #208]	; (8001bcc <HAL_RCC_OscConfig+0x628>)
 8001afa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001afe:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001b00:	4b32      	ldr	r3, [pc, #200]	; (8001bcc <HAL_RCC_OscConfig+0x628>)
 8001b02:	68db      	ldr	r3, [r3, #12]
 8001b04:	4a31      	ldr	r2, [pc, #196]	; (8001bcc <HAL_RCC_OscConfig+0x628>)
 8001b06:	f023 0303 	bic.w	r3, r3, #3
 8001b0a:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001b0c:	4b2f      	ldr	r3, [pc, #188]	; (8001bcc <HAL_RCC_OscConfig+0x628>)
 8001b0e:	68db      	ldr	r3, [r3, #12]
 8001b10:	4a2e      	ldr	r2, [pc, #184]	; (8001bcc <HAL_RCC_OscConfig+0x628>)
 8001b12:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001b16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b1a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b1c:	f7ff f9b6 	bl	8000e8c <HAL_GetTick>
 8001b20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b22:	e008      	b.n	8001b36 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b24:	f7ff f9b2 	bl	8000e8c <HAL_GetTick>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	693b      	ldr	r3, [r7, #16]
 8001b2c:	1ad3      	subs	r3, r2, r3
 8001b2e:	2b02      	cmp	r3, #2
 8001b30:	d901      	bls.n	8001b36 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8001b32:	2303      	movs	r3, #3
 8001b34:	e046      	b.n	8001bc4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b36:	4b25      	ldr	r3, [pc, #148]	; (8001bcc <HAL_RCC_OscConfig+0x628>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d1f0      	bne.n	8001b24 <HAL_RCC_OscConfig+0x580>
 8001b42:	e03e      	b.n	8001bc2 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	69db      	ldr	r3, [r3, #28]
 8001b48:	2b01      	cmp	r3, #1
 8001b4a:	d101      	bne.n	8001b50 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	e039      	b.n	8001bc4 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001b50:	4b1e      	ldr	r3, [pc, #120]	; (8001bcc <HAL_RCC_OscConfig+0x628>)
 8001b52:	68db      	ldr	r3, [r3, #12]
 8001b54:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b56:	697b      	ldr	r3, [r7, #20]
 8001b58:	f003 0203 	and.w	r2, r3, #3
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6a1b      	ldr	r3, [r3, #32]
 8001b60:	429a      	cmp	r2, r3
 8001b62:	d12c      	bne.n	8001bbe <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001b64:	697b      	ldr	r3, [r7, #20]
 8001b66:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b6e:	3b01      	subs	r3, #1
 8001b70:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b72:	429a      	cmp	r2, r3
 8001b74:	d123      	bne.n	8001bbe <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b76:	697b      	ldr	r3, [r7, #20]
 8001b78:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b80:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001b82:	429a      	cmp	r2, r3
 8001b84:	d11b      	bne.n	8001bbe <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001b86:	697b      	ldr	r3, [r7, #20]
 8001b88:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b90:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b92:	429a      	cmp	r2, r3
 8001b94:	d113      	bne.n	8001bbe <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b96:	697b      	ldr	r3, [r7, #20]
 8001b98:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba0:	085b      	lsrs	r3, r3, #1
 8001ba2:	3b01      	subs	r3, #1
 8001ba4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001ba6:	429a      	cmp	r2, r3
 8001ba8:	d109      	bne.n	8001bbe <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001baa:	697b      	ldr	r3, [r7, #20]
 8001bac:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bb4:	085b      	lsrs	r3, r3, #1
 8001bb6:	3b01      	subs	r3, #1
 8001bb8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001bba:	429a      	cmp	r2, r3
 8001bbc:	d001      	beq.n	8001bc2 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	e000      	b.n	8001bc4 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8001bc2:	2300      	movs	r3, #0
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	3720      	adds	r7, #32
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}
 8001bcc:	40021000 	.word	0x40021000
 8001bd0:	019f800c 	.word	0x019f800c

08001bd4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b086      	sub	sp, #24
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
 8001bdc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001bde:	2300      	movs	r3, #0
 8001be0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d101      	bne.n	8001bec <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001be8:	2301      	movs	r3, #1
 8001bea:	e11e      	b.n	8001e2a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001bec:	4b91      	ldr	r3, [pc, #580]	; (8001e34 <HAL_RCC_ClockConfig+0x260>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f003 030f 	and.w	r3, r3, #15
 8001bf4:	683a      	ldr	r2, [r7, #0]
 8001bf6:	429a      	cmp	r2, r3
 8001bf8:	d910      	bls.n	8001c1c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bfa:	4b8e      	ldr	r3, [pc, #568]	; (8001e34 <HAL_RCC_ClockConfig+0x260>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f023 020f 	bic.w	r2, r3, #15
 8001c02:	498c      	ldr	r1, [pc, #560]	; (8001e34 <HAL_RCC_ClockConfig+0x260>)
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	4313      	orrs	r3, r2
 8001c08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c0a:	4b8a      	ldr	r3, [pc, #552]	; (8001e34 <HAL_RCC_ClockConfig+0x260>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f003 030f 	and.w	r3, r3, #15
 8001c12:	683a      	ldr	r2, [r7, #0]
 8001c14:	429a      	cmp	r2, r3
 8001c16:	d001      	beq.n	8001c1c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001c18:	2301      	movs	r3, #1
 8001c1a:	e106      	b.n	8001e2a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f003 0301 	and.w	r3, r3, #1
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d073      	beq.n	8001d10 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	2b03      	cmp	r3, #3
 8001c2e:	d129      	bne.n	8001c84 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c30:	4b81      	ldr	r3, [pc, #516]	; (8001e38 <HAL_RCC_ClockConfig+0x264>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d101      	bne.n	8001c40 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	e0f4      	b.n	8001e2a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001c40:	f000 f99e 	bl	8001f80 <RCC_GetSysClockFreqFromPLLSource>
 8001c44:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001c46:	693b      	ldr	r3, [r7, #16]
 8001c48:	4a7c      	ldr	r2, [pc, #496]	; (8001e3c <HAL_RCC_ClockConfig+0x268>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d93f      	bls.n	8001cce <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001c4e:	4b7a      	ldr	r3, [pc, #488]	; (8001e38 <HAL_RCC_ClockConfig+0x264>)
 8001c50:	689b      	ldr	r3, [r3, #8]
 8001c52:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d009      	beq.n	8001c6e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d033      	beq.n	8001cce <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d12f      	bne.n	8001cce <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001c6e:	4b72      	ldr	r3, [pc, #456]	; (8001e38 <HAL_RCC_ClockConfig+0x264>)
 8001c70:	689b      	ldr	r3, [r3, #8]
 8001c72:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001c76:	4a70      	ldr	r2, [pc, #448]	; (8001e38 <HAL_RCC_ClockConfig+0x264>)
 8001c78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c7c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001c7e:	2380      	movs	r3, #128	; 0x80
 8001c80:	617b      	str	r3, [r7, #20]
 8001c82:	e024      	b.n	8001cce <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	2b02      	cmp	r3, #2
 8001c8a:	d107      	bne.n	8001c9c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c8c:	4b6a      	ldr	r3, [pc, #424]	; (8001e38 <HAL_RCC_ClockConfig+0x264>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d109      	bne.n	8001cac <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001c98:	2301      	movs	r3, #1
 8001c9a:	e0c6      	b.n	8001e2a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c9c:	4b66      	ldr	r3, [pc, #408]	; (8001e38 <HAL_RCC_ClockConfig+0x264>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d101      	bne.n	8001cac <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001ca8:	2301      	movs	r3, #1
 8001caa:	e0be      	b.n	8001e2a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001cac:	f000 f8ce 	bl	8001e4c <HAL_RCC_GetSysClockFreq>
 8001cb0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001cb2:	693b      	ldr	r3, [r7, #16]
 8001cb4:	4a61      	ldr	r2, [pc, #388]	; (8001e3c <HAL_RCC_ClockConfig+0x268>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d909      	bls.n	8001cce <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001cba:	4b5f      	ldr	r3, [pc, #380]	; (8001e38 <HAL_RCC_ClockConfig+0x264>)
 8001cbc:	689b      	ldr	r3, [r3, #8]
 8001cbe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001cc2:	4a5d      	ldr	r2, [pc, #372]	; (8001e38 <HAL_RCC_ClockConfig+0x264>)
 8001cc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001cc8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001cca:	2380      	movs	r3, #128	; 0x80
 8001ccc:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001cce:	4b5a      	ldr	r3, [pc, #360]	; (8001e38 <HAL_RCC_ClockConfig+0x264>)
 8001cd0:	689b      	ldr	r3, [r3, #8]
 8001cd2:	f023 0203 	bic.w	r2, r3, #3
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	4957      	ldr	r1, [pc, #348]	; (8001e38 <HAL_RCC_ClockConfig+0x264>)
 8001cdc:	4313      	orrs	r3, r2
 8001cde:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001ce0:	f7ff f8d4 	bl	8000e8c <HAL_GetTick>
 8001ce4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ce6:	e00a      	b.n	8001cfe <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ce8:	f7ff f8d0 	bl	8000e8c <HAL_GetTick>
 8001cec:	4602      	mov	r2, r0
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	1ad3      	subs	r3, r2, r3
 8001cf2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d901      	bls.n	8001cfe <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001cfa:	2303      	movs	r3, #3
 8001cfc:	e095      	b.n	8001e2a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cfe:	4b4e      	ldr	r3, [pc, #312]	; (8001e38 <HAL_RCC_ClockConfig+0x264>)
 8001d00:	689b      	ldr	r3, [r3, #8]
 8001d02:	f003 020c 	and.w	r2, r3, #12
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	009b      	lsls	r3, r3, #2
 8001d0c:	429a      	cmp	r2, r3
 8001d0e:	d1eb      	bne.n	8001ce8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f003 0302 	and.w	r3, r3, #2
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d023      	beq.n	8001d64 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f003 0304 	and.w	r3, r3, #4
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d005      	beq.n	8001d34 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d28:	4b43      	ldr	r3, [pc, #268]	; (8001e38 <HAL_RCC_ClockConfig+0x264>)
 8001d2a:	689b      	ldr	r3, [r3, #8]
 8001d2c:	4a42      	ldr	r2, [pc, #264]	; (8001e38 <HAL_RCC_ClockConfig+0x264>)
 8001d2e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001d32:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f003 0308 	and.w	r3, r3, #8
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d007      	beq.n	8001d50 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001d40:	4b3d      	ldr	r3, [pc, #244]	; (8001e38 <HAL_RCC_ClockConfig+0x264>)
 8001d42:	689b      	ldr	r3, [r3, #8]
 8001d44:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8001d48:	4a3b      	ldr	r2, [pc, #236]	; (8001e38 <HAL_RCC_ClockConfig+0x264>)
 8001d4a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001d4e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d50:	4b39      	ldr	r3, [pc, #228]	; (8001e38 <HAL_RCC_ClockConfig+0x264>)
 8001d52:	689b      	ldr	r3, [r3, #8]
 8001d54:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	689b      	ldr	r3, [r3, #8]
 8001d5c:	4936      	ldr	r1, [pc, #216]	; (8001e38 <HAL_RCC_ClockConfig+0x264>)
 8001d5e:	4313      	orrs	r3, r2
 8001d60:	608b      	str	r3, [r1, #8]
 8001d62:	e008      	b.n	8001d76 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001d64:	697b      	ldr	r3, [r7, #20]
 8001d66:	2b80      	cmp	r3, #128	; 0x80
 8001d68:	d105      	bne.n	8001d76 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001d6a:	4b33      	ldr	r3, [pc, #204]	; (8001e38 <HAL_RCC_ClockConfig+0x264>)
 8001d6c:	689b      	ldr	r3, [r3, #8]
 8001d6e:	4a32      	ldr	r2, [pc, #200]	; (8001e38 <HAL_RCC_ClockConfig+0x264>)
 8001d70:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001d74:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d76:	4b2f      	ldr	r3, [pc, #188]	; (8001e34 <HAL_RCC_ClockConfig+0x260>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f003 030f 	and.w	r3, r3, #15
 8001d7e:	683a      	ldr	r2, [r7, #0]
 8001d80:	429a      	cmp	r2, r3
 8001d82:	d21d      	bcs.n	8001dc0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d84:	4b2b      	ldr	r3, [pc, #172]	; (8001e34 <HAL_RCC_ClockConfig+0x260>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f023 020f 	bic.w	r2, r3, #15
 8001d8c:	4929      	ldr	r1, [pc, #164]	; (8001e34 <HAL_RCC_ClockConfig+0x260>)
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	4313      	orrs	r3, r2
 8001d92:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001d94:	f7ff f87a 	bl	8000e8c <HAL_GetTick>
 8001d98:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d9a:	e00a      	b.n	8001db2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d9c:	f7ff f876 	bl	8000e8c <HAL_GetTick>
 8001da0:	4602      	mov	r2, r0
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	1ad3      	subs	r3, r2, r3
 8001da6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d901      	bls.n	8001db2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001dae:	2303      	movs	r3, #3
 8001db0:	e03b      	b.n	8001e2a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001db2:	4b20      	ldr	r3, [pc, #128]	; (8001e34 <HAL_RCC_ClockConfig+0x260>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f003 030f 	and.w	r3, r3, #15
 8001dba:	683a      	ldr	r2, [r7, #0]
 8001dbc:	429a      	cmp	r2, r3
 8001dbe:	d1ed      	bne.n	8001d9c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f003 0304 	and.w	r3, r3, #4
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d008      	beq.n	8001dde <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001dcc:	4b1a      	ldr	r3, [pc, #104]	; (8001e38 <HAL_RCC_ClockConfig+0x264>)
 8001dce:	689b      	ldr	r3, [r3, #8]
 8001dd0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	68db      	ldr	r3, [r3, #12]
 8001dd8:	4917      	ldr	r1, [pc, #92]	; (8001e38 <HAL_RCC_ClockConfig+0x264>)
 8001dda:	4313      	orrs	r3, r2
 8001ddc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f003 0308 	and.w	r3, r3, #8
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d009      	beq.n	8001dfe <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001dea:	4b13      	ldr	r3, [pc, #76]	; (8001e38 <HAL_RCC_ClockConfig+0x264>)
 8001dec:	689b      	ldr	r3, [r3, #8]
 8001dee:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	691b      	ldr	r3, [r3, #16]
 8001df6:	00db      	lsls	r3, r3, #3
 8001df8:	490f      	ldr	r1, [pc, #60]	; (8001e38 <HAL_RCC_ClockConfig+0x264>)
 8001dfa:	4313      	orrs	r3, r2
 8001dfc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001dfe:	f000 f825 	bl	8001e4c <HAL_RCC_GetSysClockFreq>
 8001e02:	4602      	mov	r2, r0
 8001e04:	4b0c      	ldr	r3, [pc, #48]	; (8001e38 <HAL_RCC_ClockConfig+0x264>)
 8001e06:	689b      	ldr	r3, [r3, #8]
 8001e08:	091b      	lsrs	r3, r3, #4
 8001e0a:	f003 030f 	and.w	r3, r3, #15
 8001e0e:	490c      	ldr	r1, [pc, #48]	; (8001e40 <HAL_RCC_ClockConfig+0x26c>)
 8001e10:	5ccb      	ldrb	r3, [r1, r3]
 8001e12:	f003 031f 	and.w	r3, r3, #31
 8001e16:	fa22 f303 	lsr.w	r3, r2, r3
 8001e1a:	4a0a      	ldr	r2, [pc, #40]	; (8001e44 <HAL_RCC_ClockConfig+0x270>)
 8001e1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001e1e:	4b0a      	ldr	r3, [pc, #40]	; (8001e48 <HAL_RCC_ClockConfig+0x274>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4618      	mov	r0, r3
 8001e24:	f7fe ffe6 	bl	8000df4 <HAL_InitTick>
 8001e28:	4603      	mov	r3, r0
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	3718      	adds	r7, #24
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	bf00      	nop
 8001e34:	40022000 	.word	0x40022000
 8001e38:	40021000 	.word	0x40021000
 8001e3c:	04c4b400 	.word	0x04c4b400
 8001e40:	08005248 	.word	0x08005248
 8001e44:	20000000 	.word	0x20000000
 8001e48:	20000004 	.word	0x20000004

08001e4c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b087      	sub	sp, #28
 8001e50:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001e52:	4b2c      	ldr	r3, [pc, #176]	; (8001f04 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e54:	689b      	ldr	r3, [r3, #8]
 8001e56:	f003 030c 	and.w	r3, r3, #12
 8001e5a:	2b04      	cmp	r3, #4
 8001e5c:	d102      	bne.n	8001e64 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001e5e:	4b2a      	ldr	r3, [pc, #168]	; (8001f08 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001e60:	613b      	str	r3, [r7, #16]
 8001e62:	e047      	b.n	8001ef4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001e64:	4b27      	ldr	r3, [pc, #156]	; (8001f04 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e66:	689b      	ldr	r3, [r3, #8]
 8001e68:	f003 030c 	and.w	r3, r3, #12
 8001e6c:	2b08      	cmp	r3, #8
 8001e6e:	d102      	bne.n	8001e76 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001e70:	4b26      	ldr	r3, [pc, #152]	; (8001f0c <HAL_RCC_GetSysClockFreq+0xc0>)
 8001e72:	613b      	str	r3, [r7, #16]
 8001e74:	e03e      	b.n	8001ef4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001e76:	4b23      	ldr	r3, [pc, #140]	; (8001f04 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e78:	689b      	ldr	r3, [r3, #8]
 8001e7a:	f003 030c 	and.w	r3, r3, #12
 8001e7e:	2b0c      	cmp	r3, #12
 8001e80:	d136      	bne.n	8001ef0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001e82:	4b20      	ldr	r3, [pc, #128]	; (8001f04 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e84:	68db      	ldr	r3, [r3, #12]
 8001e86:	f003 0303 	and.w	r3, r3, #3
 8001e8a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001e8c:	4b1d      	ldr	r3, [pc, #116]	; (8001f04 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e8e:	68db      	ldr	r3, [r3, #12]
 8001e90:	091b      	lsrs	r3, r3, #4
 8001e92:	f003 030f 	and.w	r3, r3, #15
 8001e96:	3301      	adds	r3, #1
 8001e98:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	2b03      	cmp	r3, #3
 8001e9e:	d10c      	bne.n	8001eba <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001ea0:	4a1a      	ldr	r2, [pc, #104]	; (8001f0c <HAL_RCC_GetSysClockFreq+0xc0>)
 8001ea2:	68bb      	ldr	r3, [r7, #8]
 8001ea4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ea8:	4a16      	ldr	r2, [pc, #88]	; (8001f04 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001eaa:	68d2      	ldr	r2, [r2, #12]
 8001eac:	0a12      	lsrs	r2, r2, #8
 8001eae:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001eb2:	fb02 f303 	mul.w	r3, r2, r3
 8001eb6:	617b      	str	r3, [r7, #20]
      break;
 8001eb8:	e00c      	b.n	8001ed4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001eba:	4a13      	ldr	r2, [pc, #76]	; (8001f08 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001ebc:	68bb      	ldr	r3, [r7, #8]
 8001ebe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ec2:	4a10      	ldr	r2, [pc, #64]	; (8001f04 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ec4:	68d2      	ldr	r2, [r2, #12]
 8001ec6:	0a12      	lsrs	r2, r2, #8
 8001ec8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001ecc:	fb02 f303 	mul.w	r3, r2, r3
 8001ed0:	617b      	str	r3, [r7, #20]
      break;
 8001ed2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001ed4:	4b0b      	ldr	r3, [pc, #44]	; (8001f04 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ed6:	68db      	ldr	r3, [r3, #12]
 8001ed8:	0e5b      	lsrs	r3, r3, #25
 8001eda:	f003 0303 	and.w	r3, r3, #3
 8001ede:	3301      	adds	r3, #1
 8001ee0:	005b      	lsls	r3, r3, #1
 8001ee2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001ee4:	697a      	ldr	r2, [r7, #20]
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001eec:	613b      	str	r3, [r7, #16]
 8001eee:	e001      	b.n	8001ef4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001ef4:	693b      	ldr	r3, [r7, #16]
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	371c      	adds	r7, #28
 8001efa:	46bd      	mov	sp, r7
 8001efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f00:	4770      	bx	lr
 8001f02:	bf00      	nop
 8001f04:	40021000 	.word	0x40021000
 8001f08:	00f42400 	.word	0x00f42400
 8001f0c:	016e3600 	.word	0x016e3600

08001f10 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f10:	b480      	push	{r7}
 8001f12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f14:	4b03      	ldr	r3, [pc, #12]	; (8001f24 <HAL_RCC_GetHCLKFreq+0x14>)
 8001f16:	681b      	ldr	r3, [r3, #0]
}
 8001f18:	4618      	mov	r0, r3
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f20:	4770      	bx	lr
 8001f22:	bf00      	nop
 8001f24:	20000000 	.word	0x20000000

08001f28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001f2c:	f7ff fff0 	bl	8001f10 <HAL_RCC_GetHCLKFreq>
 8001f30:	4602      	mov	r2, r0
 8001f32:	4b06      	ldr	r3, [pc, #24]	; (8001f4c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f34:	689b      	ldr	r3, [r3, #8]
 8001f36:	0a1b      	lsrs	r3, r3, #8
 8001f38:	f003 0307 	and.w	r3, r3, #7
 8001f3c:	4904      	ldr	r1, [pc, #16]	; (8001f50 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001f3e:	5ccb      	ldrb	r3, [r1, r3]
 8001f40:	f003 031f 	and.w	r3, r3, #31
 8001f44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f48:	4618      	mov	r0, r3
 8001f4a:	bd80      	pop	{r7, pc}
 8001f4c:	40021000 	.word	0x40021000
 8001f50:	08005258 	.word	0x08005258

08001f54 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001f58:	f7ff ffda 	bl	8001f10 <HAL_RCC_GetHCLKFreq>
 8001f5c:	4602      	mov	r2, r0
 8001f5e:	4b06      	ldr	r3, [pc, #24]	; (8001f78 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f60:	689b      	ldr	r3, [r3, #8]
 8001f62:	0adb      	lsrs	r3, r3, #11
 8001f64:	f003 0307 	and.w	r3, r3, #7
 8001f68:	4904      	ldr	r1, [pc, #16]	; (8001f7c <HAL_RCC_GetPCLK2Freq+0x28>)
 8001f6a:	5ccb      	ldrb	r3, [r1, r3]
 8001f6c:	f003 031f 	and.w	r3, r3, #31
 8001f70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f74:	4618      	mov	r0, r3
 8001f76:	bd80      	pop	{r7, pc}
 8001f78:	40021000 	.word	0x40021000
 8001f7c:	08005258 	.word	0x08005258

08001f80 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001f80:	b480      	push	{r7}
 8001f82:	b087      	sub	sp, #28
 8001f84:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001f86:	4b1e      	ldr	r3, [pc, #120]	; (8002000 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001f88:	68db      	ldr	r3, [r3, #12]
 8001f8a:	f003 0303 	and.w	r3, r3, #3
 8001f8e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001f90:	4b1b      	ldr	r3, [pc, #108]	; (8002000 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001f92:	68db      	ldr	r3, [r3, #12]
 8001f94:	091b      	lsrs	r3, r3, #4
 8001f96:	f003 030f 	and.w	r3, r3, #15
 8001f9a:	3301      	adds	r3, #1
 8001f9c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001f9e:	693b      	ldr	r3, [r7, #16]
 8001fa0:	2b03      	cmp	r3, #3
 8001fa2:	d10c      	bne.n	8001fbe <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001fa4:	4a17      	ldr	r2, [pc, #92]	; (8002004 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fac:	4a14      	ldr	r2, [pc, #80]	; (8002000 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001fae:	68d2      	ldr	r2, [r2, #12]
 8001fb0:	0a12      	lsrs	r2, r2, #8
 8001fb2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001fb6:	fb02 f303 	mul.w	r3, r2, r3
 8001fba:	617b      	str	r3, [r7, #20]
    break;
 8001fbc:	e00c      	b.n	8001fd8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001fbe:	4a12      	ldr	r2, [pc, #72]	; (8002008 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fc6:	4a0e      	ldr	r2, [pc, #56]	; (8002000 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001fc8:	68d2      	ldr	r2, [r2, #12]
 8001fca:	0a12      	lsrs	r2, r2, #8
 8001fcc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001fd0:	fb02 f303 	mul.w	r3, r2, r3
 8001fd4:	617b      	str	r3, [r7, #20]
    break;
 8001fd6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001fd8:	4b09      	ldr	r3, [pc, #36]	; (8002000 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001fda:	68db      	ldr	r3, [r3, #12]
 8001fdc:	0e5b      	lsrs	r3, r3, #25
 8001fde:	f003 0303 	and.w	r3, r3, #3
 8001fe2:	3301      	adds	r3, #1
 8001fe4:	005b      	lsls	r3, r3, #1
 8001fe6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8001fe8:	697a      	ldr	r2, [r7, #20]
 8001fea:	68bb      	ldr	r3, [r7, #8]
 8001fec:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ff0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8001ff2:	687b      	ldr	r3, [r7, #4]
}
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	371c      	adds	r7, #28
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffe:	4770      	bx	lr
 8002000:	40021000 	.word	0x40021000
 8002004:	016e3600 	.word	0x016e3600
 8002008:	00f42400 	.word	0x00f42400

0800200c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b086      	sub	sp, #24
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002014:	2300      	movs	r3, #0
 8002016:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002018:	2300      	movs	r3, #0
 800201a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002024:	2b00      	cmp	r3, #0
 8002026:	f000 8098 	beq.w	800215a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800202a:	2300      	movs	r3, #0
 800202c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800202e:	4b43      	ldr	r3, [pc, #268]	; (800213c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002030:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002032:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002036:	2b00      	cmp	r3, #0
 8002038:	d10d      	bne.n	8002056 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800203a:	4b40      	ldr	r3, [pc, #256]	; (800213c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800203c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800203e:	4a3f      	ldr	r2, [pc, #252]	; (800213c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002040:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002044:	6593      	str	r3, [r2, #88]	; 0x58
 8002046:	4b3d      	ldr	r3, [pc, #244]	; (800213c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002048:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800204a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800204e:	60bb      	str	r3, [r7, #8]
 8002050:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002052:	2301      	movs	r3, #1
 8002054:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002056:	4b3a      	ldr	r3, [pc, #232]	; (8002140 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4a39      	ldr	r2, [pc, #228]	; (8002140 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800205c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002060:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002062:	f7fe ff13 	bl	8000e8c <HAL_GetTick>
 8002066:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002068:	e009      	b.n	800207e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800206a:	f7fe ff0f 	bl	8000e8c <HAL_GetTick>
 800206e:	4602      	mov	r2, r0
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	1ad3      	subs	r3, r2, r3
 8002074:	2b02      	cmp	r3, #2
 8002076:	d902      	bls.n	800207e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002078:	2303      	movs	r3, #3
 800207a:	74fb      	strb	r3, [r7, #19]
        break;
 800207c:	e005      	b.n	800208a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800207e:	4b30      	ldr	r3, [pc, #192]	; (8002140 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002086:	2b00      	cmp	r3, #0
 8002088:	d0ef      	beq.n	800206a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800208a:	7cfb      	ldrb	r3, [r7, #19]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d159      	bne.n	8002144 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002090:	4b2a      	ldr	r3, [pc, #168]	; (800213c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002092:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002096:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800209a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800209c:	697b      	ldr	r3, [r7, #20]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d01e      	beq.n	80020e0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a6:	697a      	ldr	r2, [r7, #20]
 80020a8:	429a      	cmp	r2, r3
 80020aa:	d019      	beq.n	80020e0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80020ac:	4b23      	ldr	r3, [pc, #140]	; (800213c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80020ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020b6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80020b8:	4b20      	ldr	r3, [pc, #128]	; (800213c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80020ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020be:	4a1f      	ldr	r2, [pc, #124]	; (800213c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80020c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80020c8:	4b1c      	ldr	r3, [pc, #112]	; (800213c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80020ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020ce:	4a1b      	ldr	r2, [pc, #108]	; (800213c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80020d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80020d8:	4a18      	ldr	r2, [pc, #96]	; (800213c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80020da:	697b      	ldr	r3, [r7, #20]
 80020dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80020e0:	697b      	ldr	r3, [r7, #20]
 80020e2:	f003 0301 	and.w	r3, r3, #1
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d016      	beq.n	8002118 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020ea:	f7fe fecf 	bl	8000e8c <HAL_GetTick>
 80020ee:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020f0:	e00b      	b.n	800210a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020f2:	f7fe fecb 	bl	8000e8c <HAL_GetTick>
 80020f6:	4602      	mov	r2, r0
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	1ad3      	subs	r3, r2, r3
 80020fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002100:	4293      	cmp	r3, r2
 8002102:	d902      	bls.n	800210a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002104:	2303      	movs	r3, #3
 8002106:	74fb      	strb	r3, [r7, #19]
            break;
 8002108:	e006      	b.n	8002118 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800210a:	4b0c      	ldr	r3, [pc, #48]	; (800213c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800210c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002110:	f003 0302 	and.w	r3, r3, #2
 8002114:	2b00      	cmp	r3, #0
 8002116:	d0ec      	beq.n	80020f2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002118:	7cfb      	ldrb	r3, [r7, #19]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d10b      	bne.n	8002136 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800211e:	4b07      	ldr	r3, [pc, #28]	; (800213c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002120:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002124:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800212c:	4903      	ldr	r1, [pc, #12]	; (800213c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800212e:	4313      	orrs	r3, r2
 8002130:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002134:	e008      	b.n	8002148 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002136:	7cfb      	ldrb	r3, [r7, #19]
 8002138:	74bb      	strb	r3, [r7, #18]
 800213a:	e005      	b.n	8002148 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800213c:	40021000 	.word	0x40021000
 8002140:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002144:	7cfb      	ldrb	r3, [r7, #19]
 8002146:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002148:	7c7b      	ldrb	r3, [r7, #17]
 800214a:	2b01      	cmp	r3, #1
 800214c:	d105      	bne.n	800215a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800214e:	4ba6      	ldr	r3, [pc, #664]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002150:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002152:	4aa5      	ldr	r2, [pc, #660]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002154:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002158:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f003 0301 	and.w	r3, r3, #1
 8002162:	2b00      	cmp	r3, #0
 8002164:	d00a      	beq.n	800217c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002166:	4ba0      	ldr	r3, [pc, #640]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002168:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800216c:	f023 0203 	bic.w	r2, r3, #3
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	499c      	ldr	r1, [pc, #624]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002176:	4313      	orrs	r3, r2
 8002178:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f003 0302 	and.w	r3, r3, #2
 8002184:	2b00      	cmp	r3, #0
 8002186:	d00a      	beq.n	800219e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002188:	4b97      	ldr	r3, [pc, #604]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800218a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800218e:	f023 020c 	bic.w	r2, r3, #12
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	689b      	ldr	r3, [r3, #8]
 8002196:	4994      	ldr	r1, [pc, #592]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002198:	4313      	orrs	r3, r2
 800219a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f003 0304 	and.w	r3, r3, #4
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d00a      	beq.n	80021c0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80021aa:	4b8f      	ldr	r3, [pc, #572]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80021ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021b0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	68db      	ldr	r3, [r3, #12]
 80021b8:	498b      	ldr	r1, [pc, #556]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80021ba:	4313      	orrs	r3, r2
 80021bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f003 0308 	and.w	r3, r3, #8
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d00a      	beq.n	80021e2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80021cc:	4b86      	ldr	r3, [pc, #536]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80021ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021d2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	691b      	ldr	r3, [r3, #16]
 80021da:	4983      	ldr	r1, [pc, #524]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80021dc:	4313      	orrs	r3, r2
 80021de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f003 0320 	and.w	r3, r3, #32
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d00a      	beq.n	8002204 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80021ee:	4b7e      	ldr	r3, [pc, #504]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80021f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021f4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	695b      	ldr	r3, [r3, #20]
 80021fc:	497a      	ldr	r1, [pc, #488]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80021fe:	4313      	orrs	r3, r2
 8002200:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800220c:	2b00      	cmp	r3, #0
 800220e:	d00a      	beq.n	8002226 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002210:	4b75      	ldr	r3, [pc, #468]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002212:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002216:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	699b      	ldr	r3, [r3, #24]
 800221e:	4972      	ldr	r1, [pc, #456]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002220:	4313      	orrs	r3, r2
 8002222:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800222e:	2b00      	cmp	r3, #0
 8002230:	d00a      	beq.n	8002248 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002232:	4b6d      	ldr	r3, [pc, #436]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002234:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002238:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	69db      	ldr	r3, [r3, #28]
 8002240:	4969      	ldr	r1, [pc, #420]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002242:	4313      	orrs	r3, r2
 8002244:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002250:	2b00      	cmp	r3, #0
 8002252:	d00a      	beq.n	800226a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002254:	4b64      	ldr	r3, [pc, #400]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002256:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800225a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6a1b      	ldr	r3, [r3, #32]
 8002262:	4961      	ldr	r1, [pc, #388]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002264:	4313      	orrs	r3, r2
 8002266:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002272:	2b00      	cmp	r3, #0
 8002274:	d00a      	beq.n	800228c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002276:	4b5c      	ldr	r3, [pc, #368]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002278:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800227c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002284:	4958      	ldr	r1, [pc, #352]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002286:	4313      	orrs	r3, r2
 8002288:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002294:	2b00      	cmp	r3, #0
 8002296:	d015      	beq.n	80022c4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002298:	4b53      	ldr	r3, [pc, #332]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800229a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800229e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022a6:	4950      	ldr	r1, [pc, #320]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022a8:	4313      	orrs	r3, r2
 80022aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80022b6:	d105      	bne.n	80022c4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80022b8:	4b4b      	ldr	r3, [pc, #300]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022ba:	68db      	ldr	r3, [r3, #12]
 80022bc:	4a4a      	ldr	r2, [pc, #296]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80022c2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d015      	beq.n	80022fc <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80022d0:	4b45      	ldr	r3, [pc, #276]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022d6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022de:	4942      	ldr	r1, [pc, #264]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022e0:	4313      	orrs	r3, r2
 80022e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80022ee:	d105      	bne.n	80022fc <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80022f0:	4b3d      	ldr	r3, [pc, #244]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022f2:	68db      	ldr	r3, [r3, #12]
 80022f4:	4a3c      	ldr	r2, [pc, #240]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80022fa:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002304:	2b00      	cmp	r3, #0
 8002306:	d015      	beq.n	8002334 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002308:	4b37      	ldr	r3, [pc, #220]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800230a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800230e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002316:	4934      	ldr	r1, [pc, #208]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002318:	4313      	orrs	r3, r2
 800231a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002322:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002326:	d105      	bne.n	8002334 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002328:	4b2f      	ldr	r3, [pc, #188]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800232a:	68db      	ldr	r3, [r3, #12]
 800232c:	4a2e      	ldr	r2, [pc, #184]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800232e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002332:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800233c:	2b00      	cmp	r3, #0
 800233e:	d015      	beq.n	800236c <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002340:	4b29      	ldr	r3, [pc, #164]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002342:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002346:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800234e:	4926      	ldr	r1, [pc, #152]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002350:	4313      	orrs	r3, r2
 8002352:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800235a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800235e:	d105      	bne.n	800236c <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002360:	4b21      	ldr	r3, [pc, #132]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002362:	68db      	ldr	r3, [r3, #12]
 8002364:	4a20      	ldr	r2, [pc, #128]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002366:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800236a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002374:	2b00      	cmp	r3, #0
 8002376:	d015      	beq.n	80023a4 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002378:	4b1b      	ldr	r3, [pc, #108]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800237a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800237e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002386:	4918      	ldr	r1, [pc, #96]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002388:	4313      	orrs	r3, r2
 800238a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002392:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002396:	d105      	bne.n	80023a4 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002398:	4b13      	ldr	r3, [pc, #76]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800239a:	68db      	ldr	r3, [r3, #12]
 800239c:	4a12      	ldr	r2, [pc, #72]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800239e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80023a2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d015      	beq.n	80023dc <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80023b0:	4b0d      	ldr	r3, [pc, #52]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023b6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023be:	490a      	ldr	r1, [pc, #40]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023c0:	4313      	orrs	r3, r2
 80023c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023ca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80023ce:	d105      	bne.n	80023dc <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80023d0:	4b05      	ldr	r3, [pc, #20]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023d2:	68db      	ldr	r3, [r3, #12]
 80023d4:	4a04      	ldr	r2, [pc, #16]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023da:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80023dc:	7cbb      	ldrb	r3, [r7, #18]
}
 80023de:	4618      	mov	r0, r3
 80023e0:	3718      	adds	r7, #24
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}
 80023e6:	bf00      	nop
 80023e8:	40021000 	.word	0x40021000

080023ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b082      	sub	sp, #8
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d101      	bne.n	80023fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80023fa:	2301      	movs	r3, #1
 80023fc:	e049      	b.n	8002492 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002404:	b2db      	uxtb	r3, r3
 8002406:	2b00      	cmp	r3, #0
 8002408:	d106      	bne.n	8002418 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2200      	movs	r2, #0
 800240e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002412:	6878      	ldr	r0, [r7, #4]
 8002414:	f7fe fb76 	bl	8000b04 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2202      	movs	r2, #2
 800241c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681a      	ldr	r2, [r3, #0]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	3304      	adds	r3, #4
 8002428:	4619      	mov	r1, r3
 800242a:	4610      	mov	r0, r2
 800242c:	f000 fd16 	bl	8002e5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2201      	movs	r2, #1
 8002434:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2201      	movs	r2, #1
 800243c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2201      	movs	r2, #1
 8002444:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2201      	movs	r2, #1
 800244c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2201      	movs	r2, #1
 8002454:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2201      	movs	r2, #1
 800245c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2201      	movs	r2, #1
 8002464:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2201      	movs	r2, #1
 800246c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2201      	movs	r2, #1
 8002474:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2201      	movs	r2, #1
 800247c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2201      	movs	r2, #1
 8002484:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2201      	movs	r2, #1
 800248c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002490:	2300      	movs	r3, #0
}
 8002492:	4618      	mov	r0, r3
 8002494:	3708      	adds	r7, #8
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}

0800249a <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800249a:	b580      	push	{r7, lr}
 800249c:	b082      	sub	sp, #8
 800249e:	af00      	add	r7, sp, #0
 80024a0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d101      	bne.n	80024ac <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80024a8:	2301      	movs	r3, #1
 80024aa:	e049      	b.n	8002540 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024b2:	b2db      	uxtb	r3, r3
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d106      	bne.n	80024c6 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2200      	movs	r2, #0
 80024bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80024c0:	6878      	ldr	r0, [r7, #4]
 80024c2:	f000 f841 	bl	8002548 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2202      	movs	r2, #2
 80024ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681a      	ldr	r2, [r3, #0]
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	3304      	adds	r3, #4
 80024d6:	4619      	mov	r1, r3
 80024d8:	4610      	mov	r0, r2
 80024da:	f000 fcbf 	bl	8002e5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2201      	movs	r2, #1
 80024e2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2201      	movs	r2, #1
 80024ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2201      	movs	r2, #1
 80024f2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2201      	movs	r2, #1
 80024fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2201      	movs	r2, #1
 8002502:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2201      	movs	r2, #1
 800250a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2201      	movs	r2, #1
 8002512:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2201      	movs	r2, #1
 800251a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2201      	movs	r2, #1
 8002522:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2201      	movs	r2, #1
 800252a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2201      	movs	r2, #1
 8002532:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2201      	movs	r2, #1
 800253a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800253e:	2300      	movs	r3, #0
}
 8002540:	4618      	mov	r0, r3
 8002542:	3708      	adds	r7, #8
 8002544:	46bd      	mov	sp, r7
 8002546:	bd80      	pop	{r7, pc}

08002548 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8002548:	b480      	push	{r7}
 800254a:	b083      	sub	sp, #12
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8002550:	bf00      	nop
 8002552:	370c      	adds	r7, #12
 8002554:	46bd      	mov	sp, r7
 8002556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255a:	4770      	bx	lr

0800255c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b084      	sub	sp, #16
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
 8002564:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002566:	2300      	movs	r3, #0
 8002568:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d104      	bne.n	800257a <HAL_TIM_IC_Start_IT+0x1e>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002576:	b2db      	uxtb	r3, r3
 8002578:	e023      	b.n	80025c2 <HAL_TIM_IC_Start_IT+0x66>
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	2b04      	cmp	r3, #4
 800257e:	d104      	bne.n	800258a <HAL_TIM_IC_Start_IT+0x2e>
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002586:	b2db      	uxtb	r3, r3
 8002588:	e01b      	b.n	80025c2 <HAL_TIM_IC_Start_IT+0x66>
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	2b08      	cmp	r3, #8
 800258e:	d104      	bne.n	800259a <HAL_TIM_IC_Start_IT+0x3e>
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002596:	b2db      	uxtb	r3, r3
 8002598:	e013      	b.n	80025c2 <HAL_TIM_IC_Start_IT+0x66>
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	2b0c      	cmp	r3, #12
 800259e:	d104      	bne.n	80025aa <HAL_TIM_IC_Start_IT+0x4e>
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80025a6:	b2db      	uxtb	r3, r3
 80025a8:	e00b      	b.n	80025c2 <HAL_TIM_IC_Start_IT+0x66>
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	2b10      	cmp	r3, #16
 80025ae:	d104      	bne.n	80025ba <HAL_TIM_IC_Start_IT+0x5e>
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80025b6:	b2db      	uxtb	r3, r3
 80025b8:	e003      	b.n	80025c2 <HAL_TIM_IC_Start_IT+0x66>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80025c0:	b2db      	uxtb	r3, r3
 80025c2:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d104      	bne.n	80025d4 <HAL_TIM_IC_Start_IT+0x78>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80025d0:	b2db      	uxtb	r3, r3
 80025d2:	e013      	b.n	80025fc <HAL_TIM_IC_Start_IT+0xa0>
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	2b04      	cmp	r3, #4
 80025d8:	d104      	bne.n	80025e4 <HAL_TIM_IC_Start_IT+0x88>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80025e0:	b2db      	uxtb	r3, r3
 80025e2:	e00b      	b.n	80025fc <HAL_TIM_IC_Start_IT+0xa0>
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	2b08      	cmp	r3, #8
 80025e8:	d104      	bne.n	80025f4 <HAL_TIM_IC_Start_IT+0x98>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80025f0:	b2db      	uxtb	r3, r3
 80025f2:	e003      	b.n	80025fc <HAL_TIM_IC_Start_IT+0xa0>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 80025fa:	b2db      	uxtb	r3, r3
 80025fc:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80025fe:	7bbb      	ldrb	r3, [r7, #14]
 8002600:	2b01      	cmp	r3, #1
 8002602:	d102      	bne.n	800260a <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8002604:	7b7b      	ldrb	r3, [r7, #13]
 8002606:	2b01      	cmp	r3, #1
 8002608:	d001      	beq.n	800260e <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 800260a:	2301      	movs	r3, #1
 800260c:	e0d8      	b.n	80027c0 <HAL_TIM_IC_Start_IT+0x264>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d104      	bne.n	800261e <HAL_TIM_IC_Start_IT+0xc2>
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2202      	movs	r2, #2
 8002618:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800261c:	e023      	b.n	8002666 <HAL_TIM_IC_Start_IT+0x10a>
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	2b04      	cmp	r3, #4
 8002622:	d104      	bne.n	800262e <HAL_TIM_IC_Start_IT+0xd2>
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2202      	movs	r2, #2
 8002628:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800262c:	e01b      	b.n	8002666 <HAL_TIM_IC_Start_IT+0x10a>
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	2b08      	cmp	r3, #8
 8002632:	d104      	bne.n	800263e <HAL_TIM_IC_Start_IT+0xe2>
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2202      	movs	r2, #2
 8002638:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800263c:	e013      	b.n	8002666 <HAL_TIM_IC_Start_IT+0x10a>
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	2b0c      	cmp	r3, #12
 8002642:	d104      	bne.n	800264e <HAL_TIM_IC_Start_IT+0xf2>
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2202      	movs	r2, #2
 8002648:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800264c:	e00b      	b.n	8002666 <HAL_TIM_IC_Start_IT+0x10a>
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	2b10      	cmp	r3, #16
 8002652:	d104      	bne.n	800265e <HAL_TIM_IC_Start_IT+0x102>
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2202      	movs	r2, #2
 8002658:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800265c:	e003      	b.n	8002666 <HAL_TIM_IC_Start_IT+0x10a>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2202      	movs	r2, #2
 8002662:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d104      	bne.n	8002676 <HAL_TIM_IC_Start_IT+0x11a>
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2202      	movs	r2, #2
 8002670:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002674:	e013      	b.n	800269e <HAL_TIM_IC_Start_IT+0x142>
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	2b04      	cmp	r3, #4
 800267a:	d104      	bne.n	8002686 <HAL_TIM_IC_Start_IT+0x12a>
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2202      	movs	r2, #2
 8002680:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002684:	e00b      	b.n	800269e <HAL_TIM_IC_Start_IT+0x142>
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	2b08      	cmp	r3, #8
 800268a:	d104      	bne.n	8002696 <HAL_TIM_IC_Start_IT+0x13a>
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2202      	movs	r2, #2
 8002690:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002694:	e003      	b.n	800269e <HAL_TIM_IC_Start_IT+0x142>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2202      	movs	r2, #2
 800269a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	2b0c      	cmp	r3, #12
 80026a2:	d841      	bhi.n	8002728 <HAL_TIM_IC_Start_IT+0x1cc>
 80026a4:	a201      	add	r2, pc, #4	; (adr r2, 80026ac <HAL_TIM_IC_Start_IT+0x150>)
 80026a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026aa:	bf00      	nop
 80026ac:	080026e1 	.word	0x080026e1
 80026b0:	08002729 	.word	0x08002729
 80026b4:	08002729 	.word	0x08002729
 80026b8:	08002729 	.word	0x08002729
 80026bc:	080026f3 	.word	0x080026f3
 80026c0:	08002729 	.word	0x08002729
 80026c4:	08002729 	.word	0x08002729
 80026c8:	08002729 	.word	0x08002729
 80026cc:	08002705 	.word	0x08002705
 80026d0:	08002729 	.word	0x08002729
 80026d4:	08002729 	.word	0x08002729
 80026d8:	08002729 	.word	0x08002729
 80026dc:	08002717 	.word	0x08002717
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	68da      	ldr	r2, [r3, #12]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f042 0202 	orr.w	r2, r2, #2
 80026ee:	60da      	str	r2, [r3, #12]
      break;
 80026f0:	e01d      	b.n	800272e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	68da      	ldr	r2, [r3, #12]
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f042 0204 	orr.w	r2, r2, #4
 8002700:	60da      	str	r2, [r3, #12]
      break;
 8002702:	e014      	b.n	800272e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	68da      	ldr	r2, [r3, #12]
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f042 0208 	orr.w	r2, r2, #8
 8002712:	60da      	str	r2, [r3, #12]
      break;
 8002714:	e00b      	b.n	800272e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	68da      	ldr	r2, [r3, #12]
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f042 0210 	orr.w	r2, r2, #16
 8002724:	60da      	str	r2, [r3, #12]
      break;
 8002726:	e002      	b.n	800272e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8002728:	2301      	movs	r3, #1
 800272a:	73fb      	strb	r3, [r7, #15]
      break;
 800272c:	bf00      	nop
  }

  if (status == HAL_OK)
 800272e:	7bfb      	ldrb	r3, [r7, #15]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d144      	bne.n	80027be <HAL_TIM_IC_Start_IT+0x262>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	2201      	movs	r2, #1
 800273a:	6839      	ldr	r1, [r7, #0]
 800273c:	4618      	mov	r0, r3
 800273e:	f000 fdd7 	bl	80032f0 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4a20      	ldr	r2, [pc, #128]	; (80027c8 <HAL_TIM_IC_Start_IT+0x26c>)
 8002748:	4293      	cmp	r3, r2
 800274a:	d018      	beq.n	800277e <HAL_TIM_IC_Start_IT+0x222>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002754:	d013      	beq.n	800277e <HAL_TIM_IC_Start_IT+0x222>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4a1c      	ldr	r2, [pc, #112]	; (80027cc <HAL_TIM_IC_Start_IT+0x270>)
 800275c:	4293      	cmp	r3, r2
 800275e:	d00e      	beq.n	800277e <HAL_TIM_IC_Start_IT+0x222>
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a1a      	ldr	r2, [pc, #104]	; (80027d0 <HAL_TIM_IC_Start_IT+0x274>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d009      	beq.n	800277e <HAL_TIM_IC_Start_IT+0x222>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a19      	ldr	r2, [pc, #100]	; (80027d4 <HAL_TIM_IC_Start_IT+0x278>)
 8002770:	4293      	cmp	r3, r2
 8002772:	d004      	beq.n	800277e <HAL_TIM_IC_Start_IT+0x222>
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a17      	ldr	r2, [pc, #92]	; (80027d8 <HAL_TIM_IC_Start_IT+0x27c>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d115      	bne.n	80027aa <HAL_TIM_IC_Start_IT+0x24e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	689a      	ldr	r2, [r3, #8]
 8002784:	4b15      	ldr	r3, [pc, #84]	; (80027dc <HAL_TIM_IC_Start_IT+0x280>)
 8002786:	4013      	ands	r3, r2
 8002788:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800278a:	68bb      	ldr	r3, [r7, #8]
 800278c:	2b06      	cmp	r3, #6
 800278e:	d015      	beq.n	80027bc <HAL_TIM_IC_Start_IT+0x260>
 8002790:	68bb      	ldr	r3, [r7, #8]
 8002792:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002796:	d011      	beq.n	80027bc <HAL_TIM_IC_Start_IT+0x260>
      {
        __HAL_TIM_ENABLE(htim);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	681a      	ldr	r2, [r3, #0]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f042 0201 	orr.w	r2, r2, #1
 80027a6:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027a8:	e008      	b.n	80027bc <HAL_TIM_IC_Start_IT+0x260>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	681a      	ldr	r2, [r3, #0]
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f042 0201 	orr.w	r2, r2, #1
 80027b8:	601a      	str	r2, [r3, #0]
 80027ba:	e000      	b.n	80027be <HAL_TIM_IC_Start_IT+0x262>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027bc:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 80027be:	7bfb      	ldrb	r3, [r7, #15]
}
 80027c0:	4618      	mov	r0, r3
 80027c2:	3710      	adds	r7, #16
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bd80      	pop	{r7, pc}
 80027c8:	40012c00 	.word	0x40012c00
 80027cc:	40000400 	.word	0x40000400
 80027d0:	40000800 	.word	0x40000800
 80027d4:	40013400 	.word	0x40013400
 80027d8:	40014000 	.word	0x40014000
 80027dc:	00010007 	.word	0x00010007

080027e0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b082      	sub	sp, #8
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	691b      	ldr	r3, [r3, #16]
 80027ee:	f003 0302 	and.w	r3, r3, #2
 80027f2:	2b02      	cmp	r3, #2
 80027f4:	d122      	bne.n	800283c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	68db      	ldr	r3, [r3, #12]
 80027fc:	f003 0302 	and.w	r3, r3, #2
 8002800:	2b02      	cmp	r3, #2
 8002802:	d11b      	bne.n	800283c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f06f 0202 	mvn.w	r2, #2
 800280c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2201      	movs	r2, #1
 8002812:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	699b      	ldr	r3, [r3, #24]
 800281a:	f003 0303 	and.w	r3, r3, #3
 800281e:	2b00      	cmp	r3, #0
 8002820:	d003      	beq.n	800282a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002822:	6878      	ldr	r0, [r7, #4]
 8002824:	f7fd fee0 	bl	80005e8 <HAL_TIM_IC_CaptureCallback>
 8002828:	e005      	b.n	8002836 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800282a:	6878      	ldr	r0, [r7, #4]
 800282c:	f000 faf8 	bl	8002e20 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002830:	6878      	ldr	r0, [r7, #4]
 8002832:	f000 faff 	bl	8002e34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2200      	movs	r2, #0
 800283a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	691b      	ldr	r3, [r3, #16]
 8002842:	f003 0304 	and.w	r3, r3, #4
 8002846:	2b04      	cmp	r3, #4
 8002848:	d122      	bne.n	8002890 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	68db      	ldr	r3, [r3, #12]
 8002850:	f003 0304 	and.w	r3, r3, #4
 8002854:	2b04      	cmp	r3, #4
 8002856:	d11b      	bne.n	8002890 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f06f 0204 	mvn.w	r2, #4
 8002860:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2202      	movs	r2, #2
 8002866:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	699b      	ldr	r3, [r3, #24]
 800286e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002872:	2b00      	cmp	r3, #0
 8002874:	d003      	beq.n	800287e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002876:	6878      	ldr	r0, [r7, #4]
 8002878:	f7fd feb6 	bl	80005e8 <HAL_TIM_IC_CaptureCallback>
 800287c:	e005      	b.n	800288a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800287e:	6878      	ldr	r0, [r7, #4]
 8002880:	f000 face 	bl	8002e20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002884:	6878      	ldr	r0, [r7, #4]
 8002886:	f000 fad5 	bl	8002e34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2200      	movs	r2, #0
 800288e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	691b      	ldr	r3, [r3, #16]
 8002896:	f003 0308 	and.w	r3, r3, #8
 800289a:	2b08      	cmp	r3, #8
 800289c:	d122      	bne.n	80028e4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	68db      	ldr	r3, [r3, #12]
 80028a4:	f003 0308 	and.w	r3, r3, #8
 80028a8:	2b08      	cmp	r3, #8
 80028aa:	d11b      	bne.n	80028e4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f06f 0208 	mvn.w	r2, #8
 80028b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2204      	movs	r2, #4
 80028ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	69db      	ldr	r3, [r3, #28]
 80028c2:	f003 0303 	and.w	r3, r3, #3
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d003      	beq.n	80028d2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028ca:	6878      	ldr	r0, [r7, #4]
 80028cc:	f7fd fe8c 	bl	80005e8 <HAL_TIM_IC_CaptureCallback>
 80028d0:	e005      	b.n	80028de <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028d2:	6878      	ldr	r0, [r7, #4]
 80028d4:	f000 faa4 	bl	8002e20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028d8:	6878      	ldr	r0, [r7, #4]
 80028da:	f000 faab 	bl	8002e34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2200      	movs	r2, #0
 80028e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	691b      	ldr	r3, [r3, #16]
 80028ea:	f003 0310 	and.w	r3, r3, #16
 80028ee:	2b10      	cmp	r3, #16
 80028f0:	d122      	bne.n	8002938 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	68db      	ldr	r3, [r3, #12]
 80028f8:	f003 0310 	and.w	r3, r3, #16
 80028fc:	2b10      	cmp	r3, #16
 80028fe:	d11b      	bne.n	8002938 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f06f 0210 	mvn.w	r2, #16
 8002908:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2208      	movs	r2, #8
 800290e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	69db      	ldr	r3, [r3, #28]
 8002916:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800291a:	2b00      	cmp	r3, #0
 800291c:	d003      	beq.n	8002926 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800291e:	6878      	ldr	r0, [r7, #4]
 8002920:	f7fd fe62 	bl	80005e8 <HAL_TIM_IC_CaptureCallback>
 8002924:	e005      	b.n	8002932 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002926:	6878      	ldr	r0, [r7, #4]
 8002928:	f000 fa7a 	bl	8002e20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800292c:	6878      	ldr	r0, [r7, #4]
 800292e:	f000 fa81 	bl	8002e34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2200      	movs	r2, #0
 8002936:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	691b      	ldr	r3, [r3, #16]
 800293e:	f003 0301 	and.w	r3, r3, #1
 8002942:	2b01      	cmp	r3, #1
 8002944:	d10e      	bne.n	8002964 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	68db      	ldr	r3, [r3, #12]
 800294c:	f003 0301 	and.w	r3, r3, #1
 8002950:	2b01      	cmp	r3, #1
 8002952:	d107      	bne.n	8002964 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f06f 0201 	mvn.w	r2, #1
 800295c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800295e:	6878      	ldr	r0, [r7, #4]
 8002960:	f000 fa54 	bl	8002e0c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	691b      	ldr	r3, [r3, #16]
 800296a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800296e:	2b80      	cmp	r3, #128	; 0x80
 8002970:	d10e      	bne.n	8002990 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	68db      	ldr	r3, [r3, #12]
 8002978:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800297c:	2b80      	cmp	r3, #128	; 0x80
 800297e:	d107      	bne.n	8002990 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002988:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800298a:	6878      	ldr	r0, [r7, #4]
 800298c:	f000 fd62 	bl	8003454 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	691b      	ldr	r3, [r3, #16]
 8002996:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800299a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800299e:	d10e      	bne.n	80029be <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	68db      	ldr	r3, [r3, #12]
 80029a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029aa:	2b80      	cmp	r3, #128	; 0x80
 80029ac:	d107      	bne.n	80029be <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80029b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80029b8:	6878      	ldr	r0, [r7, #4]
 80029ba:	f000 fd55 	bl	8003468 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	691b      	ldr	r3, [r3, #16]
 80029c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029c8:	2b40      	cmp	r3, #64	; 0x40
 80029ca:	d10e      	bne.n	80029ea <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	68db      	ldr	r3, [r3, #12]
 80029d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029d6:	2b40      	cmp	r3, #64	; 0x40
 80029d8:	d107      	bne.n	80029ea <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80029e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80029e4:	6878      	ldr	r0, [r7, #4]
 80029e6:	f000 fa2f 	bl	8002e48 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	691b      	ldr	r3, [r3, #16]
 80029f0:	f003 0320 	and.w	r3, r3, #32
 80029f4:	2b20      	cmp	r3, #32
 80029f6:	d10e      	bne.n	8002a16 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	68db      	ldr	r3, [r3, #12]
 80029fe:	f003 0320 	and.w	r3, r3, #32
 8002a02:	2b20      	cmp	r3, #32
 8002a04:	d107      	bne.n	8002a16 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f06f 0220 	mvn.w	r2, #32
 8002a0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002a10:	6878      	ldr	r0, [r7, #4]
 8002a12:	f000 fd15 	bl	8003440 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	691b      	ldr	r3, [r3, #16]
 8002a1c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a20:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002a24:	d10f      	bne.n	8002a46 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	68db      	ldr	r3, [r3, #12]
 8002a2c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a30:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002a34:	d107      	bne.n	8002a46 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8002a3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8002a40:	6878      	ldr	r0, [r7, #4]
 8002a42:	f000 fd1b 	bl	800347c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	691b      	ldr	r3, [r3, #16]
 8002a4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a50:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002a54:	d10f      	bne.n	8002a76 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	68db      	ldr	r3, [r3, #12]
 8002a5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a60:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002a64:	d107      	bne.n	8002a76 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8002a6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8002a70:	6878      	ldr	r0, [r7, #4]
 8002a72:	f000 fd0d 	bl	8003490 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	691b      	ldr	r3, [r3, #16]
 8002a7c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a80:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a84:	d10f      	bne.n	8002aa6 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	68db      	ldr	r3, [r3, #12]
 8002a8c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a90:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a94:	d107      	bne.n	8002aa6 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8002a9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8002aa0:	6878      	ldr	r0, [r7, #4]
 8002aa2:	f000 fcff 	bl	80034a4 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	691b      	ldr	r3, [r3, #16]
 8002aac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002ab0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002ab4:	d10f      	bne.n	8002ad6 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	68db      	ldr	r3, [r3, #12]
 8002abc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002ac0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002ac4:	d107      	bne.n	8002ad6 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8002ace:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8002ad0:	6878      	ldr	r0, [r7, #4]
 8002ad2:	f000 fcf1 	bl	80034b8 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002ad6:	bf00      	nop
 8002ad8:	3708      	adds	r7, #8
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}

08002ade <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8002ade:	b580      	push	{r7, lr}
 8002ae0:	b086      	sub	sp, #24
 8002ae2:	af00      	add	r7, sp, #0
 8002ae4:	60f8      	str	r0, [r7, #12]
 8002ae6:	60b9      	str	r1, [r7, #8]
 8002ae8:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002aea:	2300      	movs	r3, #0
 8002aec:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002af4:	2b01      	cmp	r3, #1
 8002af6:	d101      	bne.n	8002afc <HAL_TIM_IC_ConfigChannel+0x1e>
 8002af8:	2302      	movs	r3, #2
 8002afa:	e088      	b.n	8002c0e <HAL_TIM_IC_ConfigChannel+0x130>
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	2201      	movs	r2, #1
 8002b00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d11b      	bne.n	8002b42 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	6818      	ldr	r0, [r3, #0]
 8002b0e:	68bb      	ldr	r3, [r7, #8]
 8002b10:	6819      	ldr	r1, [r3, #0]
 8002b12:	68bb      	ldr	r3, [r7, #8]
 8002b14:	685a      	ldr	r2, [r3, #4]
 8002b16:	68bb      	ldr	r3, [r7, #8]
 8002b18:	68db      	ldr	r3, [r3, #12]
 8002b1a:	f000 fa2f 	bl	8002f7c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	699a      	ldr	r2, [r3, #24]
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f022 020c 	bic.w	r2, r2, #12
 8002b2c:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	6999      	ldr	r1, [r3, #24]
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	689a      	ldr	r2, [r3, #8]
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	430a      	orrs	r2, r1
 8002b3e:	619a      	str	r2, [r3, #24]
 8002b40:	e060      	b.n	8002c04 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2b04      	cmp	r3, #4
 8002b46:	d11c      	bne.n	8002b82 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	6818      	ldr	r0, [r3, #0]
 8002b4c:	68bb      	ldr	r3, [r7, #8]
 8002b4e:	6819      	ldr	r1, [r3, #0]
 8002b50:	68bb      	ldr	r3, [r7, #8]
 8002b52:	685a      	ldr	r2, [r3, #4]
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	68db      	ldr	r3, [r3, #12]
 8002b58:	f000 faa7 	bl	80030aa <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	699a      	ldr	r2, [r3, #24]
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002b6a:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	6999      	ldr	r1, [r3, #24]
 8002b72:	68bb      	ldr	r3, [r7, #8]
 8002b74:	689b      	ldr	r3, [r3, #8]
 8002b76:	021a      	lsls	r2, r3, #8
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	430a      	orrs	r2, r1
 8002b7e:	619a      	str	r2, [r3, #24]
 8002b80:	e040      	b.n	8002c04 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2b08      	cmp	r3, #8
 8002b86:	d11b      	bne.n	8002bc0 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	6818      	ldr	r0, [r3, #0]
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	6819      	ldr	r1, [r3, #0]
 8002b90:	68bb      	ldr	r3, [r7, #8]
 8002b92:	685a      	ldr	r2, [r3, #4]
 8002b94:	68bb      	ldr	r3, [r7, #8]
 8002b96:	68db      	ldr	r3, [r3, #12]
 8002b98:	f000 faf4 	bl	8003184 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	69da      	ldr	r2, [r3, #28]
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f022 020c 	bic.w	r2, r2, #12
 8002baa:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	69d9      	ldr	r1, [r3, #28]
 8002bb2:	68bb      	ldr	r3, [r7, #8]
 8002bb4:	689a      	ldr	r2, [r3, #8]
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	430a      	orrs	r2, r1
 8002bbc:	61da      	str	r2, [r3, #28]
 8002bbe:	e021      	b.n	8002c04 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2b0c      	cmp	r3, #12
 8002bc4:	d11c      	bne.n	8002c00 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	6818      	ldr	r0, [r3, #0]
 8002bca:	68bb      	ldr	r3, [r7, #8]
 8002bcc:	6819      	ldr	r1, [r3, #0]
 8002bce:	68bb      	ldr	r3, [r7, #8]
 8002bd0:	685a      	ldr	r2, [r3, #4]
 8002bd2:	68bb      	ldr	r3, [r7, #8]
 8002bd4:	68db      	ldr	r3, [r3, #12]
 8002bd6:	f000 fb11 	bl	80031fc <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	69da      	ldr	r2, [r3, #28]
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002be8:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	69d9      	ldr	r1, [r3, #28]
 8002bf0:	68bb      	ldr	r3, [r7, #8]
 8002bf2:	689b      	ldr	r3, [r3, #8]
 8002bf4:	021a      	lsls	r2, r3, #8
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	430a      	orrs	r2, r1
 8002bfc:	61da      	str	r2, [r3, #28]
 8002bfe:	e001      	b.n	8002c04 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8002c00:	2301      	movs	r3, #1
 8002c02:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	2200      	movs	r2, #0
 8002c08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002c0c:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c0e:	4618      	mov	r0, r3
 8002c10:	3718      	adds	r7, #24
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}
	...

08002c18 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b084      	sub	sp, #16
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
 8002c20:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c22:	2300      	movs	r3, #0
 8002c24:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c2c:	2b01      	cmp	r3, #1
 8002c2e:	d101      	bne.n	8002c34 <HAL_TIM_ConfigClockSource+0x1c>
 8002c30:	2302      	movs	r3, #2
 8002c32:	e0de      	b.n	8002df2 <HAL_TIM_ConfigClockSource+0x1da>
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2201      	movs	r2, #1
 8002c38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2202      	movs	r2, #2
 8002c40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	689b      	ldr	r3, [r3, #8]
 8002c4a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002c4c:	68bb      	ldr	r3, [r7, #8]
 8002c4e:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8002c52:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002c56:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c58:	68bb      	ldr	r3, [r7, #8]
 8002c5a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002c5e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	68ba      	ldr	r2, [r7, #8]
 8002c66:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a63      	ldr	r2, [pc, #396]	; (8002dfc <HAL_TIM_ConfigClockSource+0x1e4>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	f000 80a9 	beq.w	8002dc6 <HAL_TIM_ConfigClockSource+0x1ae>
 8002c74:	4a61      	ldr	r2, [pc, #388]	; (8002dfc <HAL_TIM_ConfigClockSource+0x1e4>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	f200 80ae 	bhi.w	8002dd8 <HAL_TIM_ConfigClockSource+0x1c0>
 8002c7c:	4a60      	ldr	r2, [pc, #384]	; (8002e00 <HAL_TIM_ConfigClockSource+0x1e8>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	f000 80a1 	beq.w	8002dc6 <HAL_TIM_ConfigClockSource+0x1ae>
 8002c84:	4a5e      	ldr	r2, [pc, #376]	; (8002e00 <HAL_TIM_ConfigClockSource+0x1e8>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	f200 80a6 	bhi.w	8002dd8 <HAL_TIM_ConfigClockSource+0x1c0>
 8002c8c:	4a5d      	ldr	r2, [pc, #372]	; (8002e04 <HAL_TIM_ConfigClockSource+0x1ec>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	f000 8099 	beq.w	8002dc6 <HAL_TIM_ConfigClockSource+0x1ae>
 8002c94:	4a5b      	ldr	r2, [pc, #364]	; (8002e04 <HAL_TIM_ConfigClockSource+0x1ec>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	f200 809e 	bhi.w	8002dd8 <HAL_TIM_ConfigClockSource+0x1c0>
 8002c9c:	4a5a      	ldr	r2, [pc, #360]	; (8002e08 <HAL_TIM_ConfigClockSource+0x1f0>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	f000 8091 	beq.w	8002dc6 <HAL_TIM_ConfigClockSource+0x1ae>
 8002ca4:	4a58      	ldr	r2, [pc, #352]	; (8002e08 <HAL_TIM_ConfigClockSource+0x1f0>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	f200 8096 	bhi.w	8002dd8 <HAL_TIM_ConfigClockSource+0x1c0>
 8002cac:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8002cb0:	f000 8089 	beq.w	8002dc6 <HAL_TIM_ConfigClockSource+0x1ae>
 8002cb4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8002cb8:	f200 808e 	bhi.w	8002dd8 <HAL_TIM_ConfigClockSource+0x1c0>
 8002cbc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002cc0:	d03e      	beq.n	8002d40 <HAL_TIM_ConfigClockSource+0x128>
 8002cc2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002cc6:	f200 8087 	bhi.w	8002dd8 <HAL_TIM_ConfigClockSource+0x1c0>
 8002cca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cce:	f000 8086 	beq.w	8002dde <HAL_TIM_ConfigClockSource+0x1c6>
 8002cd2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cd6:	d87f      	bhi.n	8002dd8 <HAL_TIM_ConfigClockSource+0x1c0>
 8002cd8:	2b70      	cmp	r3, #112	; 0x70
 8002cda:	d01a      	beq.n	8002d12 <HAL_TIM_ConfigClockSource+0xfa>
 8002cdc:	2b70      	cmp	r3, #112	; 0x70
 8002cde:	d87b      	bhi.n	8002dd8 <HAL_TIM_ConfigClockSource+0x1c0>
 8002ce0:	2b60      	cmp	r3, #96	; 0x60
 8002ce2:	d050      	beq.n	8002d86 <HAL_TIM_ConfigClockSource+0x16e>
 8002ce4:	2b60      	cmp	r3, #96	; 0x60
 8002ce6:	d877      	bhi.n	8002dd8 <HAL_TIM_ConfigClockSource+0x1c0>
 8002ce8:	2b50      	cmp	r3, #80	; 0x50
 8002cea:	d03c      	beq.n	8002d66 <HAL_TIM_ConfigClockSource+0x14e>
 8002cec:	2b50      	cmp	r3, #80	; 0x50
 8002cee:	d873      	bhi.n	8002dd8 <HAL_TIM_ConfigClockSource+0x1c0>
 8002cf0:	2b40      	cmp	r3, #64	; 0x40
 8002cf2:	d058      	beq.n	8002da6 <HAL_TIM_ConfigClockSource+0x18e>
 8002cf4:	2b40      	cmp	r3, #64	; 0x40
 8002cf6:	d86f      	bhi.n	8002dd8 <HAL_TIM_ConfigClockSource+0x1c0>
 8002cf8:	2b30      	cmp	r3, #48	; 0x30
 8002cfa:	d064      	beq.n	8002dc6 <HAL_TIM_ConfigClockSource+0x1ae>
 8002cfc:	2b30      	cmp	r3, #48	; 0x30
 8002cfe:	d86b      	bhi.n	8002dd8 <HAL_TIM_ConfigClockSource+0x1c0>
 8002d00:	2b20      	cmp	r3, #32
 8002d02:	d060      	beq.n	8002dc6 <HAL_TIM_ConfigClockSource+0x1ae>
 8002d04:	2b20      	cmp	r3, #32
 8002d06:	d867      	bhi.n	8002dd8 <HAL_TIM_ConfigClockSource+0x1c0>
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d05c      	beq.n	8002dc6 <HAL_TIM_ConfigClockSource+0x1ae>
 8002d0c:	2b10      	cmp	r3, #16
 8002d0e:	d05a      	beq.n	8002dc6 <HAL_TIM_ConfigClockSource+0x1ae>
 8002d10:	e062      	b.n	8002dd8 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6818      	ldr	r0, [r3, #0]
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	6899      	ldr	r1, [r3, #8]
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	685a      	ldr	r2, [r3, #4]
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	68db      	ldr	r3, [r3, #12]
 8002d22:	f000 fac5 	bl	80032b0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	689b      	ldr	r3, [r3, #8]
 8002d2c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002d2e:	68bb      	ldr	r3, [r7, #8]
 8002d30:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002d34:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	68ba      	ldr	r2, [r7, #8]
 8002d3c:	609a      	str	r2, [r3, #8]
      break;
 8002d3e:	e04f      	b.n	8002de0 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6818      	ldr	r0, [r3, #0]
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	6899      	ldr	r1, [r3, #8]
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	685a      	ldr	r2, [r3, #4]
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	68db      	ldr	r3, [r3, #12]
 8002d50:	f000 faae 	bl	80032b0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	689a      	ldr	r2, [r3, #8]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002d62:	609a      	str	r2, [r3, #8]
      break;
 8002d64:	e03c      	b.n	8002de0 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6818      	ldr	r0, [r3, #0]
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	6859      	ldr	r1, [r3, #4]
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	68db      	ldr	r3, [r3, #12]
 8002d72:	461a      	mov	r2, r3
 8002d74:	f000 f96a 	bl	800304c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	2150      	movs	r1, #80	; 0x50
 8002d7e:	4618      	mov	r0, r3
 8002d80:	f000 fa79 	bl	8003276 <TIM_ITRx_SetConfig>
      break;
 8002d84:	e02c      	b.n	8002de0 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6818      	ldr	r0, [r3, #0]
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	6859      	ldr	r1, [r3, #4]
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	68db      	ldr	r3, [r3, #12]
 8002d92:	461a      	mov	r2, r3
 8002d94:	f000 f9c6 	bl	8003124 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	2160      	movs	r1, #96	; 0x60
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f000 fa69 	bl	8003276 <TIM_ITRx_SetConfig>
      break;
 8002da4:	e01c      	b.n	8002de0 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6818      	ldr	r0, [r3, #0]
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	6859      	ldr	r1, [r3, #4]
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	68db      	ldr	r3, [r3, #12]
 8002db2:	461a      	mov	r2, r3
 8002db4:	f000 f94a 	bl	800304c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	2140      	movs	r1, #64	; 0x40
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f000 fa59 	bl	8003276 <TIM_ITRx_SetConfig>
      break;
 8002dc4:	e00c      	b.n	8002de0 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681a      	ldr	r2, [r3, #0]
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4619      	mov	r1, r3
 8002dd0:	4610      	mov	r0, r2
 8002dd2:	f000 fa50 	bl	8003276 <TIM_ITRx_SetConfig>
      break;
 8002dd6:	e003      	b.n	8002de0 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8002dd8:	2301      	movs	r3, #1
 8002dda:	73fb      	strb	r3, [r7, #15]
      break;
 8002ddc:	e000      	b.n	8002de0 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8002dde:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2201      	movs	r2, #1
 8002de4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2200      	movs	r2, #0
 8002dec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002df0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002df2:	4618      	mov	r0, r3
 8002df4:	3710      	adds	r7, #16
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bd80      	pop	{r7, pc}
 8002dfa:	bf00      	nop
 8002dfc:	00100070 	.word	0x00100070
 8002e00:	00100040 	.word	0x00100040
 8002e04:	00100030 	.word	0x00100030
 8002e08:	00100020 	.word	0x00100020

08002e0c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b083      	sub	sp, #12
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002e14:	bf00      	nop
 8002e16:	370c      	adds	r7, #12
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1e:	4770      	bx	lr

08002e20 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002e20:	b480      	push	{r7}
 8002e22:	b083      	sub	sp, #12
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002e28:	bf00      	nop
 8002e2a:	370c      	adds	r7, #12
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e32:	4770      	bx	lr

08002e34 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002e34:	b480      	push	{r7}
 8002e36:	b083      	sub	sp, #12
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002e3c:	bf00      	nop
 8002e3e:	370c      	adds	r7, #12
 8002e40:	46bd      	mov	sp, r7
 8002e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e46:	4770      	bx	lr

08002e48 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	b083      	sub	sp, #12
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002e50:	bf00      	nop
 8002e52:	370c      	adds	r7, #12
 8002e54:	46bd      	mov	sp, r7
 8002e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5a:	4770      	bx	lr

08002e5c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	b085      	sub	sp, #20
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
 8002e64:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	4a3c      	ldr	r2, [pc, #240]	; (8002f60 <TIM_Base_SetConfig+0x104>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d00f      	beq.n	8002e94 <TIM_Base_SetConfig+0x38>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e7a:	d00b      	beq.n	8002e94 <TIM_Base_SetConfig+0x38>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	4a39      	ldr	r2, [pc, #228]	; (8002f64 <TIM_Base_SetConfig+0x108>)
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d007      	beq.n	8002e94 <TIM_Base_SetConfig+0x38>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	4a38      	ldr	r2, [pc, #224]	; (8002f68 <TIM_Base_SetConfig+0x10c>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d003      	beq.n	8002e94 <TIM_Base_SetConfig+0x38>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	4a37      	ldr	r2, [pc, #220]	; (8002f6c <TIM_Base_SetConfig+0x110>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d108      	bne.n	8002ea6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e9a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	68fa      	ldr	r2, [r7, #12]
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	4a2d      	ldr	r2, [pc, #180]	; (8002f60 <TIM_Base_SetConfig+0x104>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d01b      	beq.n	8002ee6 <TIM_Base_SetConfig+0x8a>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002eb4:	d017      	beq.n	8002ee6 <TIM_Base_SetConfig+0x8a>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	4a2a      	ldr	r2, [pc, #168]	; (8002f64 <TIM_Base_SetConfig+0x108>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d013      	beq.n	8002ee6 <TIM_Base_SetConfig+0x8a>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	4a29      	ldr	r2, [pc, #164]	; (8002f68 <TIM_Base_SetConfig+0x10c>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d00f      	beq.n	8002ee6 <TIM_Base_SetConfig+0x8a>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	4a28      	ldr	r2, [pc, #160]	; (8002f6c <TIM_Base_SetConfig+0x110>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d00b      	beq.n	8002ee6 <TIM_Base_SetConfig+0x8a>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	4a27      	ldr	r2, [pc, #156]	; (8002f70 <TIM_Base_SetConfig+0x114>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d007      	beq.n	8002ee6 <TIM_Base_SetConfig+0x8a>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	4a26      	ldr	r2, [pc, #152]	; (8002f74 <TIM_Base_SetConfig+0x118>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d003      	beq.n	8002ee6 <TIM_Base_SetConfig+0x8a>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	4a25      	ldr	r2, [pc, #148]	; (8002f78 <TIM_Base_SetConfig+0x11c>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d108      	bne.n	8002ef8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002eec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	68db      	ldr	r3, [r3, #12]
 8002ef2:	68fa      	ldr	r2, [r7, #12]
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	695b      	ldr	r3, [r3, #20]
 8002f02:	4313      	orrs	r3, r2
 8002f04:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	68fa      	ldr	r2, [r7, #12]
 8002f0a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	689a      	ldr	r2, [r3, #8]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	681a      	ldr	r2, [r3, #0]
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	4a10      	ldr	r2, [pc, #64]	; (8002f60 <TIM_Base_SetConfig+0x104>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d00f      	beq.n	8002f44 <TIM_Base_SetConfig+0xe8>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	4a11      	ldr	r2, [pc, #68]	; (8002f6c <TIM_Base_SetConfig+0x110>)
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d00b      	beq.n	8002f44 <TIM_Base_SetConfig+0xe8>
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	4a10      	ldr	r2, [pc, #64]	; (8002f70 <TIM_Base_SetConfig+0x114>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d007      	beq.n	8002f44 <TIM_Base_SetConfig+0xe8>
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	4a0f      	ldr	r2, [pc, #60]	; (8002f74 <TIM_Base_SetConfig+0x118>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d003      	beq.n	8002f44 <TIM_Base_SetConfig+0xe8>
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	4a0e      	ldr	r2, [pc, #56]	; (8002f78 <TIM_Base_SetConfig+0x11c>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d103      	bne.n	8002f4c <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	691a      	ldr	r2, [r3, #16]
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2201      	movs	r2, #1
 8002f50:	615a      	str	r2, [r3, #20]
}
 8002f52:	bf00      	nop
 8002f54:	3714      	adds	r7, #20
 8002f56:	46bd      	mov	sp, r7
 8002f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5c:	4770      	bx	lr
 8002f5e:	bf00      	nop
 8002f60:	40012c00 	.word	0x40012c00
 8002f64:	40000400 	.word	0x40000400
 8002f68:	40000800 	.word	0x40000800
 8002f6c:	40013400 	.word	0x40013400
 8002f70:	40014000 	.word	0x40014000
 8002f74:	40014400 	.word	0x40014400
 8002f78:	40014800 	.word	0x40014800

08002f7c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	b087      	sub	sp, #28
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	60f8      	str	r0, [r7, #12]
 8002f84:	60b9      	str	r1, [r7, #8]
 8002f86:	607a      	str	r2, [r7, #4]
 8002f88:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	6a1b      	ldr	r3, [r3, #32]
 8002f8e:	f023 0201 	bic.w	r2, r3, #1
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	699b      	ldr	r3, [r3, #24]
 8002f9a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	6a1b      	ldr	r3, [r3, #32]
 8002fa0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	4a24      	ldr	r2, [pc, #144]	; (8003038 <TIM_TI1_SetConfig+0xbc>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d013      	beq.n	8002fd2 <TIM_TI1_SetConfig+0x56>
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fb0:	d00f      	beq.n	8002fd2 <TIM_TI1_SetConfig+0x56>
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	4a21      	ldr	r2, [pc, #132]	; (800303c <TIM_TI1_SetConfig+0xc0>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d00b      	beq.n	8002fd2 <TIM_TI1_SetConfig+0x56>
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	4a20      	ldr	r2, [pc, #128]	; (8003040 <TIM_TI1_SetConfig+0xc4>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d007      	beq.n	8002fd2 <TIM_TI1_SetConfig+0x56>
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	4a1f      	ldr	r2, [pc, #124]	; (8003044 <TIM_TI1_SetConfig+0xc8>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d003      	beq.n	8002fd2 <TIM_TI1_SetConfig+0x56>
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	4a1e      	ldr	r2, [pc, #120]	; (8003048 <TIM_TI1_SetConfig+0xcc>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d101      	bne.n	8002fd6 <TIM_TI1_SetConfig+0x5a>
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	e000      	b.n	8002fd8 <TIM_TI1_SetConfig+0x5c>
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d008      	beq.n	8002fee <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8002fdc:	697b      	ldr	r3, [r7, #20]
 8002fde:	f023 0303 	bic.w	r3, r3, #3
 8002fe2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8002fe4:	697a      	ldr	r2, [r7, #20]
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	4313      	orrs	r3, r2
 8002fea:	617b      	str	r3, [r7, #20]
 8002fec:	e003      	b.n	8002ff6 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8002fee:	697b      	ldr	r3, [r7, #20]
 8002ff0:	f043 0301 	orr.w	r3, r3, #1
 8002ff4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002ff6:	697b      	ldr	r3, [r7, #20]
 8002ff8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002ffc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	011b      	lsls	r3, r3, #4
 8003002:	b2db      	uxtb	r3, r3
 8003004:	697a      	ldr	r2, [r7, #20]
 8003006:	4313      	orrs	r3, r2
 8003008:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800300a:	693b      	ldr	r3, [r7, #16]
 800300c:	f023 030a 	bic.w	r3, r3, #10
 8003010:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003012:	68bb      	ldr	r3, [r7, #8]
 8003014:	f003 030a 	and.w	r3, r3, #10
 8003018:	693a      	ldr	r2, [r7, #16]
 800301a:	4313      	orrs	r3, r2
 800301c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	697a      	ldr	r2, [r7, #20]
 8003022:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	693a      	ldr	r2, [r7, #16]
 8003028:	621a      	str	r2, [r3, #32]
}
 800302a:	bf00      	nop
 800302c:	371c      	adds	r7, #28
 800302e:	46bd      	mov	sp, r7
 8003030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003034:	4770      	bx	lr
 8003036:	bf00      	nop
 8003038:	40012c00 	.word	0x40012c00
 800303c:	40000400 	.word	0x40000400
 8003040:	40000800 	.word	0x40000800
 8003044:	40013400 	.word	0x40013400
 8003048:	40014000 	.word	0x40014000

0800304c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800304c:	b480      	push	{r7}
 800304e:	b087      	sub	sp, #28
 8003050:	af00      	add	r7, sp, #0
 8003052:	60f8      	str	r0, [r7, #12]
 8003054:	60b9      	str	r1, [r7, #8]
 8003056:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	6a1b      	ldr	r3, [r3, #32]
 800305c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	6a1b      	ldr	r3, [r3, #32]
 8003062:	f023 0201 	bic.w	r2, r3, #1
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	699b      	ldr	r3, [r3, #24]
 800306e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003070:	693b      	ldr	r3, [r7, #16]
 8003072:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003076:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	011b      	lsls	r3, r3, #4
 800307c:	693a      	ldr	r2, [r7, #16]
 800307e:	4313      	orrs	r3, r2
 8003080:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003082:	697b      	ldr	r3, [r7, #20]
 8003084:	f023 030a 	bic.w	r3, r3, #10
 8003088:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800308a:	697a      	ldr	r2, [r7, #20]
 800308c:	68bb      	ldr	r3, [r7, #8]
 800308e:	4313      	orrs	r3, r2
 8003090:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	693a      	ldr	r2, [r7, #16]
 8003096:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	697a      	ldr	r2, [r7, #20]
 800309c:	621a      	str	r2, [r3, #32]
}
 800309e:	bf00      	nop
 80030a0:	371c      	adds	r7, #28
 80030a2:	46bd      	mov	sp, r7
 80030a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a8:	4770      	bx	lr

080030aa <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80030aa:	b480      	push	{r7}
 80030ac:	b087      	sub	sp, #28
 80030ae:	af00      	add	r7, sp, #0
 80030b0:	60f8      	str	r0, [r7, #12]
 80030b2:	60b9      	str	r1, [r7, #8]
 80030b4:	607a      	str	r2, [r7, #4]
 80030b6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	6a1b      	ldr	r3, [r3, #32]
 80030bc:	f023 0210 	bic.w	r2, r3, #16
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	699b      	ldr	r3, [r3, #24]
 80030c8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	6a1b      	ldr	r3, [r3, #32]
 80030ce:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80030d0:	697b      	ldr	r3, [r7, #20]
 80030d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030d6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	021b      	lsls	r3, r3, #8
 80030dc:	697a      	ldr	r2, [r7, #20]
 80030de:	4313      	orrs	r3, r2
 80030e0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80030e2:	697b      	ldr	r3, [r7, #20]
 80030e4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80030e8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	031b      	lsls	r3, r3, #12
 80030ee:	b29b      	uxth	r3, r3
 80030f0:	697a      	ldr	r2, [r7, #20]
 80030f2:	4313      	orrs	r3, r2
 80030f4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80030fc:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80030fe:	68bb      	ldr	r3, [r7, #8]
 8003100:	011b      	lsls	r3, r3, #4
 8003102:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8003106:	693a      	ldr	r2, [r7, #16]
 8003108:	4313      	orrs	r3, r2
 800310a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	697a      	ldr	r2, [r7, #20]
 8003110:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	693a      	ldr	r2, [r7, #16]
 8003116:	621a      	str	r2, [r3, #32]
}
 8003118:	bf00      	nop
 800311a:	371c      	adds	r7, #28
 800311c:	46bd      	mov	sp, r7
 800311e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003122:	4770      	bx	lr

08003124 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003124:	b480      	push	{r7}
 8003126:	b087      	sub	sp, #28
 8003128:	af00      	add	r7, sp, #0
 800312a:	60f8      	str	r0, [r7, #12]
 800312c:	60b9      	str	r1, [r7, #8]
 800312e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	6a1b      	ldr	r3, [r3, #32]
 8003134:	f023 0210 	bic.w	r2, r3, #16
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	699b      	ldr	r3, [r3, #24]
 8003140:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	6a1b      	ldr	r3, [r3, #32]
 8003146:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003148:	697b      	ldr	r3, [r7, #20]
 800314a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800314e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	031b      	lsls	r3, r3, #12
 8003154:	697a      	ldr	r2, [r7, #20]
 8003156:	4313      	orrs	r3, r2
 8003158:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800315a:	693b      	ldr	r3, [r7, #16]
 800315c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003160:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003162:	68bb      	ldr	r3, [r7, #8]
 8003164:	011b      	lsls	r3, r3, #4
 8003166:	693a      	ldr	r2, [r7, #16]
 8003168:	4313      	orrs	r3, r2
 800316a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	697a      	ldr	r2, [r7, #20]
 8003170:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	693a      	ldr	r2, [r7, #16]
 8003176:	621a      	str	r2, [r3, #32]
}
 8003178:	bf00      	nop
 800317a:	371c      	adds	r7, #28
 800317c:	46bd      	mov	sp, r7
 800317e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003182:	4770      	bx	lr

08003184 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003184:	b480      	push	{r7}
 8003186:	b087      	sub	sp, #28
 8003188:	af00      	add	r7, sp, #0
 800318a:	60f8      	str	r0, [r7, #12]
 800318c:	60b9      	str	r1, [r7, #8]
 800318e:	607a      	str	r2, [r7, #4]
 8003190:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	6a1b      	ldr	r3, [r3, #32]
 8003196:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	69db      	ldr	r3, [r3, #28]
 80031a2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	6a1b      	ldr	r3, [r3, #32]
 80031a8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80031aa:	697b      	ldr	r3, [r7, #20]
 80031ac:	f023 0303 	bic.w	r3, r3, #3
 80031b0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80031b2:	697a      	ldr	r2, [r7, #20]
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	4313      	orrs	r3, r2
 80031b8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80031ba:	697b      	ldr	r3, [r7, #20]
 80031bc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80031c0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	011b      	lsls	r3, r3, #4
 80031c6:	b2db      	uxtb	r3, r3
 80031c8:	697a      	ldr	r2, [r7, #20]
 80031ca:	4313      	orrs	r3, r2
 80031cc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80031ce:	693b      	ldr	r3, [r7, #16]
 80031d0:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80031d4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80031d6:	68bb      	ldr	r3, [r7, #8]
 80031d8:	021b      	lsls	r3, r3, #8
 80031da:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80031de:	693a      	ldr	r2, [r7, #16]
 80031e0:	4313      	orrs	r3, r2
 80031e2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	697a      	ldr	r2, [r7, #20]
 80031e8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	693a      	ldr	r2, [r7, #16]
 80031ee:	621a      	str	r2, [r3, #32]
}
 80031f0:	bf00      	nop
 80031f2:	371c      	adds	r7, #28
 80031f4:	46bd      	mov	sp, r7
 80031f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fa:	4770      	bx	lr

080031fc <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80031fc:	b480      	push	{r7}
 80031fe:	b087      	sub	sp, #28
 8003200:	af00      	add	r7, sp, #0
 8003202:	60f8      	str	r0, [r7, #12]
 8003204:	60b9      	str	r1, [r7, #8]
 8003206:	607a      	str	r2, [r7, #4]
 8003208:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	6a1b      	ldr	r3, [r3, #32]
 800320e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	69db      	ldr	r3, [r3, #28]
 800321a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	6a1b      	ldr	r3, [r3, #32]
 8003220:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003222:	697b      	ldr	r3, [r7, #20]
 8003224:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003228:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	021b      	lsls	r3, r3, #8
 800322e:	697a      	ldr	r2, [r7, #20]
 8003230:	4313      	orrs	r3, r2
 8003232:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003234:	697b      	ldr	r3, [r7, #20]
 8003236:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800323a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	031b      	lsls	r3, r3, #12
 8003240:	b29b      	uxth	r3, r3
 8003242:	697a      	ldr	r2, [r7, #20]
 8003244:	4313      	orrs	r3, r2
 8003246:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8003248:	693b      	ldr	r3, [r7, #16]
 800324a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800324e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8003250:	68bb      	ldr	r3, [r7, #8]
 8003252:	031b      	lsls	r3, r3, #12
 8003254:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8003258:	693a      	ldr	r2, [r7, #16]
 800325a:	4313      	orrs	r3, r2
 800325c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	697a      	ldr	r2, [r7, #20]
 8003262:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	693a      	ldr	r2, [r7, #16]
 8003268:	621a      	str	r2, [r3, #32]
}
 800326a:	bf00      	nop
 800326c:	371c      	adds	r7, #28
 800326e:	46bd      	mov	sp, r7
 8003270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003274:	4770      	bx	lr

08003276 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003276:	b480      	push	{r7}
 8003278:	b085      	sub	sp, #20
 800327a:	af00      	add	r7, sp, #0
 800327c:	6078      	str	r0, [r7, #4]
 800327e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	689b      	ldr	r3, [r3, #8]
 8003284:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800328c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003290:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003292:	683a      	ldr	r2, [r7, #0]
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	4313      	orrs	r3, r2
 8003298:	f043 0307 	orr.w	r3, r3, #7
 800329c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	68fa      	ldr	r2, [r7, #12]
 80032a2:	609a      	str	r2, [r3, #8]
}
 80032a4:	bf00      	nop
 80032a6:	3714      	adds	r7, #20
 80032a8:	46bd      	mov	sp, r7
 80032aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ae:	4770      	bx	lr

080032b0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80032b0:	b480      	push	{r7}
 80032b2:	b087      	sub	sp, #28
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	60f8      	str	r0, [r7, #12]
 80032b8:	60b9      	str	r1, [r7, #8]
 80032ba:	607a      	str	r2, [r7, #4]
 80032bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	689b      	ldr	r3, [r3, #8]
 80032c2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80032c4:	697b      	ldr	r3, [r7, #20]
 80032c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80032ca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	021a      	lsls	r2, r3, #8
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	431a      	orrs	r2, r3
 80032d4:	68bb      	ldr	r3, [r7, #8]
 80032d6:	4313      	orrs	r3, r2
 80032d8:	697a      	ldr	r2, [r7, #20]
 80032da:	4313      	orrs	r3, r2
 80032dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	697a      	ldr	r2, [r7, #20]
 80032e2:	609a      	str	r2, [r3, #8]
}
 80032e4:	bf00      	nop
 80032e6:	371c      	adds	r7, #28
 80032e8:	46bd      	mov	sp, r7
 80032ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ee:	4770      	bx	lr

080032f0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80032f0:	b480      	push	{r7}
 80032f2:	b087      	sub	sp, #28
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	60f8      	str	r0, [r7, #12]
 80032f8:	60b9      	str	r1, [r7, #8]
 80032fa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80032fc:	68bb      	ldr	r3, [r7, #8]
 80032fe:	f003 031f 	and.w	r3, r3, #31
 8003302:	2201      	movs	r2, #1
 8003304:	fa02 f303 	lsl.w	r3, r2, r3
 8003308:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	6a1a      	ldr	r2, [r3, #32]
 800330e:	697b      	ldr	r3, [r7, #20]
 8003310:	43db      	mvns	r3, r3
 8003312:	401a      	ands	r2, r3
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	6a1a      	ldr	r2, [r3, #32]
 800331c:	68bb      	ldr	r3, [r7, #8]
 800331e:	f003 031f 	and.w	r3, r3, #31
 8003322:	6879      	ldr	r1, [r7, #4]
 8003324:	fa01 f303 	lsl.w	r3, r1, r3
 8003328:	431a      	orrs	r2, r3
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	621a      	str	r2, [r3, #32]
}
 800332e:	bf00      	nop
 8003330:	371c      	adds	r7, #28
 8003332:	46bd      	mov	sp, r7
 8003334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003338:	4770      	bx	lr
	...

0800333c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800333c:	b480      	push	{r7}
 800333e:	b085      	sub	sp, #20
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
 8003344:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800334c:	2b01      	cmp	r3, #1
 800334e:	d101      	bne.n	8003354 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003350:	2302      	movs	r3, #2
 8003352:	e065      	b.n	8003420 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2201      	movs	r2, #1
 8003358:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2202      	movs	r2, #2
 8003360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	689b      	ldr	r3, [r3, #8]
 8003372:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4a2c      	ldr	r2, [pc, #176]	; (800342c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d004      	beq.n	8003388 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4a2b      	ldr	r2, [pc, #172]	; (8003430 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d108      	bne.n	800339a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800338e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	68fa      	ldr	r2, [r7, #12]
 8003396:	4313      	orrs	r3, r2
 8003398:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80033a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033a4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	68fa      	ldr	r2, [r7, #12]
 80033ac:	4313      	orrs	r3, r2
 80033ae:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	68fa      	ldr	r2, [r7, #12]
 80033b6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4a1b      	ldr	r2, [pc, #108]	; (800342c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d018      	beq.n	80033f4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033ca:	d013      	beq.n	80033f4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a18      	ldr	r2, [pc, #96]	; (8003434 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d00e      	beq.n	80033f4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4a17      	ldr	r2, [pc, #92]	; (8003438 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	d009      	beq.n	80033f4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a12      	ldr	r2, [pc, #72]	; (8003430 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d004      	beq.n	80033f4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4a13      	ldr	r2, [pc, #76]	; (800343c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d10c      	bne.n	800340e <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80033f4:	68bb      	ldr	r3, [r7, #8]
 80033f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80033fa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	689b      	ldr	r3, [r3, #8]
 8003400:	68ba      	ldr	r2, [r7, #8]
 8003402:	4313      	orrs	r3, r2
 8003404:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	68ba      	ldr	r2, [r7, #8]
 800340c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2201      	movs	r2, #1
 8003412:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2200      	movs	r2, #0
 800341a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800341e:	2300      	movs	r3, #0
}
 8003420:	4618      	mov	r0, r3
 8003422:	3714      	adds	r7, #20
 8003424:	46bd      	mov	sp, r7
 8003426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342a:	4770      	bx	lr
 800342c:	40012c00 	.word	0x40012c00
 8003430:	40013400 	.word	0x40013400
 8003434:	40000400 	.word	0x40000400
 8003438:	40000800 	.word	0x40000800
 800343c:	40014000 	.word	0x40014000

08003440 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003440:	b480      	push	{r7}
 8003442:	b083      	sub	sp, #12
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003448:	bf00      	nop
 800344a:	370c      	adds	r7, #12
 800344c:	46bd      	mov	sp, r7
 800344e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003452:	4770      	bx	lr

08003454 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003454:	b480      	push	{r7}
 8003456:	b083      	sub	sp, #12
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800345c:	bf00      	nop
 800345e:	370c      	adds	r7, #12
 8003460:	46bd      	mov	sp, r7
 8003462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003466:	4770      	bx	lr

08003468 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003468:	b480      	push	{r7}
 800346a:	b083      	sub	sp, #12
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003470:	bf00      	nop
 8003472:	370c      	adds	r7, #12
 8003474:	46bd      	mov	sp, r7
 8003476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347a:	4770      	bx	lr

0800347c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800347c:	b480      	push	{r7}
 800347e:	b083      	sub	sp, #12
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8003484:	bf00      	nop
 8003486:	370c      	adds	r7, #12
 8003488:	46bd      	mov	sp, r7
 800348a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348e:	4770      	bx	lr

08003490 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8003490:	b480      	push	{r7}
 8003492:	b083      	sub	sp, #12
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8003498:	bf00      	nop
 800349a:	370c      	adds	r7, #12
 800349c:	46bd      	mov	sp, r7
 800349e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a2:	4770      	bx	lr

080034a4 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80034a4:	b480      	push	{r7}
 80034a6:	b083      	sub	sp, #12
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80034ac:	bf00      	nop
 80034ae:	370c      	adds	r7, #12
 80034b0:	46bd      	mov	sp, r7
 80034b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b6:	4770      	bx	lr

080034b8 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80034b8:	b480      	push	{r7}
 80034ba:	b083      	sub	sp, #12
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80034c0:	bf00      	nop
 80034c2:	370c      	adds	r7, #12
 80034c4:	46bd      	mov	sp, r7
 80034c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ca:	4770      	bx	lr

080034cc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b082      	sub	sp, #8
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d101      	bne.n	80034de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80034da:	2301      	movs	r3, #1
 80034dc:	e042      	b.n	8003564 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d106      	bne.n	80034f6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2200      	movs	r2, #0
 80034ec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80034f0:	6878      	ldr	r0, [r7, #4]
 80034f2:	f7fd faaf 	bl	8000a54 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2224      	movs	r2, #36	; 0x24
 80034fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	681a      	ldr	r2, [r3, #0]
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f022 0201 	bic.w	r2, r2, #1
 800350c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800350e:	6878      	ldr	r0, [r7, #4]
 8003510:	f000 f8c2 	bl	8003698 <UART_SetConfig>
 8003514:	4603      	mov	r3, r0
 8003516:	2b01      	cmp	r3, #1
 8003518:	d101      	bne.n	800351e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800351a:	2301      	movs	r3, #1
 800351c:	e022      	b.n	8003564 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003522:	2b00      	cmp	r3, #0
 8003524:	d002      	beq.n	800352c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8003526:	6878      	ldr	r0, [r7, #4]
 8003528:	f000 fb82 	bl	8003c30 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	685a      	ldr	r2, [r3, #4]
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800353a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	689a      	ldr	r2, [r3, #8]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800354a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	681a      	ldr	r2, [r3, #0]
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f042 0201 	orr.w	r2, r2, #1
 800355a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800355c:	6878      	ldr	r0, [r7, #4]
 800355e:	f000 fc09 	bl	8003d74 <UART_CheckIdleState>
 8003562:	4603      	mov	r3, r0
}
 8003564:	4618      	mov	r0, r3
 8003566:	3708      	adds	r7, #8
 8003568:	46bd      	mov	sp, r7
 800356a:	bd80      	pop	{r7, pc}

0800356c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b08a      	sub	sp, #40	; 0x28
 8003570:	af02      	add	r7, sp, #8
 8003572:	60f8      	str	r0, [r7, #12]
 8003574:	60b9      	str	r1, [r7, #8]
 8003576:	603b      	str	r3, [r7, #0]
 8003578:	4613      	mov	r3, r2
 800357a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003582:	2b20      	cmp	r3, #32
 8003584:	f040 8083 	bne.w	800368e <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8003588:	68bb      	ldr	r3, [r7, #8]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d002      	beq.n	8003594 <HAL_UART_Transmit+0x28>
 800358e:	88fb      	ldrh	r3, [r7, #6]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d101      	bne.n	8003598 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8003594:	2301      	movs	r3, #1
 8003596:	e07b      	b.n	8003690 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800359e:	2b01      	cmp	r3, #1
 80035a0:	d101      	bne.n	80035a6 <HAL_UART_Transmit+0x3a>
 80035a2:	2302      	movs	r3, #2
 80035a4:	e074      	b.n	8003690 <HAL_UART_Transmit+0x124>
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	2201      	movs	r2, #1
 80035aa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	2200      	movs	r2, #0
 80035b2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	2221      	movs	r2, #33	; 0x21
 80035ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80035be:	f7fd fc65 	bl	8000e8c <HAL_GetTick>
 80035c2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	88fa      	ldrh	r2, [r7, #6]
 80035c8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	88fa      	ldrh	r2, [r7, #6]
 80035d0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	689b      	ldr	r3, [r3, #8]
 80035d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035dc:	d108      	bne.n	80035f0 <HAL_UART_Transmit+0x84>
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	691b      	ldr	r3, [r3, #16]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d104      	bne.n	80035f0 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80035e6:	2300      	movs	r3, #0
 80035e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80035ea:	68bb      	ldr	r3, [r7, #8]
 80035ec:	61bb      	str	r3, [r7, #24]
 80035ee:	e003      	b.n	80035f8 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80035f0:	68bb      	ldr	r3, [r7, #8]
 80035f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80035f4:	2300      	movs	r3, #0
 80035f6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	2200      	movs	r2, #0
 80035fc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8003600:	e02c      	b.n	800365c <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	9300      	str	r3, [sp, #0]
 8003606:	697b      	ldr	r3, [r7, #20]
 8003608:	2200      	movs	r2, #0
 800360a:	2180      	movs	r1, #128	; 0x80
 800360c:	68f8      	ldr	r0, [r7, #12]
 800360e:	f000 fbfc 	bl	8003e0a <UART_WaitOnFlagUntilTimeout>
 8003612:	4603      	mov	r3, r0
 8003614:	2b00      	cmp	r3, #0
 8003616:	d001      	beq.n	800361c <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8003618:	2303      	movs	r3, #3
 800361a:	e039      	b.n	8003690 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800361c:	69fb      	ldr	r3, [r7, #28]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d10b      	bne.n	800363a <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003622:	69bb      	ldr	r3, [r7, #24]
 8003624:	881b      	ldrh	r3, [r3, #0]
 8003626:	461a      	mov	r2, r3
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003630:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003632:	69bb      	ldr	r3, [r7, #24]
 8003634:	3302      	adds	r3, #2
 8003636:	61bb      	str	r3, [r7, #24]
 8003638:	e007      	b.n	800364a <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800363a:	69fb      	ldr	r3, [r7, #28]
 800363c:	781a      	ldrb	r2, [r3, #0]
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003644:	69fb      	ldr	r3, [r7, #28]
 8003646:	3301      	adds	r3, #1
 8003648:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003650:	b29b      	uxth	r3, r3
 8003652:	3b01      	subs	r3, #1
 8003654:	b29a      	uxth	r2, r3
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003662:	b29b      	uxth	r3, r3
 8003664:	2b00      	cmp	r3, #0
 8003666:	d1cc      	bne.n	8003602 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	9300      	str	r3, [sp, #0]
 800366c:	697b      	ldr	r3, [r7, #20]
 800366e:	2200      	movs	r2, #0
 8003670:	2140      	movs	r1, #64	; 0x40
 8003672:	68f8      	ldr	r0, [r7, #12]
 8003674:	f000 fbc9 	bl	8003e0a <UART_WaitOnFlagUntilTimeout>
 8003678:	4603      	mov	r3, r0
 800367a:	2b00      	cmp	r3, #0
 800367c:	d001      	beq.n	8003682 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800367e:	2303      	movs	r3, #3
 8003680:	e006      	b.n	8003690 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	2220      	movs	r2, #32
 8003686:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800368a:	2300      	movs	r3, #0
 800368c:	e000      	b.n	8003690 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800368e:	2302      	movs	r3, #2
  }
}
 8003690:	4618      	mov	r0, r3
 8003692:	3720      	adds	r7, #32
 8003694:	46bd      	mov	sp, r7
 8003696:	bd80      	pop	{r7, pc}

08003698 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003698:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800369c:	b08c      	sub	sp, #48	; 0x30
 800369e:	af00      	add	r7, sp, #0
 80036a0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80036a2:	2300      	movs	r3, #0
 80036a4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80036a8:	697b      	ldr	r3, [r7, #20]
 80036aa:	689a      	ldr	r2, [r3, #8]
 80036ac:	697b      	ldr	r3, [r7, #20]
 80036ae:	691b      	ldr	r3, [r3, #16]
 80036b0:	431a      	orrs	r2, r3
 80036b2:	697b      	ldr	r3, [r7, #20]
 80036b4:	695b      	ldr	r3, [r3, #20]
 80036b6:	431a      	orrs	r2, r3
 80036b8:	697b      	ldr	r3, [r7, #20]
 80036ba:	69db      	ldr	r3, [r3, #28]
 80036bc:	4313      	orrs	r3, r2
 80036be:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80036c0:	697b      	ldr	r3, [r7, #20]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	681a      	ldr	r2, [r3, #0]
 80036c6:	4bab      	ldr	r3, [pc, #684]	; (8003974 <UART_SetConfig+0x2dc>)
 80036c8:	4013      	ands	r3, r2
 80036ca:	697a      	ldr	r2, [r7, #20]
 80036cc:	6812      	ldr	r2, [r2, #0]
 80036ce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80036d0:	430b      	orrs	r3, r1
 80036d2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80036d4:	697b      	ldr	r3, [r7, #20]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80036de:	697b      	ldr	r3, [r7, #20]
 80036e0:	68da      	ldr	r2, [r3, #12]
 80036e2:	697b      	ldr	r3, [r7, #20]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	430a      	orrs	r2, r1
 80036e8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80036ea:	697b      	ldr	r3, [r7, #20]
 80036ec:	699b      	ldr	r3, [r3, #24]
 80036ee:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80036f0:	697b      	ldr	r3, [r7, #20]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4aa0      	ldr	r2, [pc, #640]	; (8003978 <UART_SetConfig+0x2e0>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d004      	beq.n	8003704 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80036fa:	697b      	ldr	r3, [r7, #20]
 80036fc:	6a1b      	ldr	r3, [r3, #32]
 80036fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003700:	4313      	orrs	r3, r2
 8003702:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003704:	697b      	ldr	r3, [r7, #20]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	689b      	ldr	r3, [r3, #8]
 800370a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800370e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8003712:	697a      	ldr	r2, [r7, #20]
 8003714:	6812      	ldr	r2, [r2, #0]
 8003716:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003718:	430b      	orrs	r3, r1
 800371a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800371c:	697b      	ldr	r3, [r7, #20]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003722:	f023 010f 	bic.w	r1, r3, #15
 8003726:	697b      	ldr	r3, [r7, #20]
 8003728:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800372a:	697b      	ldr	r3, [r7, #20]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	430a      	orrs	r2, r1
 8003730:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003732:	697b      	ldr	r3, [r7, #20]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4a91      	ldr	r2, [pc, #580]	; (800397c <UART_SetConfig+0x2e4>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d125      	bne.n	8003788 <UART_SetConfig+0xf0>
 800373c:	4b90      	ldr	r3, [pc, #576]	; (8003980 <UART_SetConfig+0x2e8>)
 800373e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003742:	f003 0303 	and.w	r3, r3, #3
 8003746:	2b03      	cmp	r3, #3
 8003748:	d81a      	bhi.n	8003780 <UART_SetConfig+0xe8>
 800374a:	a201      	add	r2, pc, #4	; (adr r2, 8003750 <UART_SetConfig+0xb8>)
 800374c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003750:	08003761 	.word	0x08003761
 8003754:	08003771 	.word	0x08003771
 8003758:	08003769 	.word	0x08003769
 800375c:	08003779 	.word	0x08003779
 8003760:	2301      	movs	r3, #1
 8003762:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003766:	e0d6      	b.n	8003916 <UART_SetConfig+0x27e>
 8003768:	2302      	movs	r3, #2
 800376a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800376e:	e0d2      	b.n	8003916 <UART_SetConfig+0x27e>
 8003770:	2304      	movs	r3, #4
 8003772:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003776:	e0ce      	b.n	8003916 <UART_SetConfig+0x27e>
 8003778:	2308      	movs	r3, #8
 800377a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800377e:	e0ca      	b.n	8003916 <UART_SetConfig+0x27e>
 8003780:	2310      	movs	r3, #16
 8003782:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003786:	e0c6      	b.n	8003916 <UART_SetConfig+0x27e>
 8003788:	697b      	ldr	r3, [r7, #20]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4a7d      	ldr	r2, [pc, #500]	; (8003984 <UART_SetConfig+0x2ec>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d138      	bne.n	8003804 <UART_SetConfig+0x16c>
 8003792:	4b7b      	ldr	r3, [pc, #492]	; (8003980 <UART_SetConfig+0x2e8>)
 8003794:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003798:	f003 030c 	and.w	r3, r3, #12
 800379c:	2b0c      	cmp	r3, #12
 800379e:	d82d      	bhi.n	80037fc <UART_SetConfig+0x164>
 80037a0:	a201      	add	r2, pc, #4	; (adr r2, 80037a8 <UART_SetConfig+0x110>)
 80037a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037a6:	bf00      	nop
 80037a8:	080037dd 	.word	0x080037dd
 80037ac:	080037fd 	.word	0x080037fd
 80037b0:	080037fd 	.word	0x080037fd
 80037b4:	080037fd 	.word	0x080037fd
 80037b8:	080037ed 	.word	0x080037ed
 80037bc:	080037fd 	.word	0x080037fd
 80037c0:	080037fd 	.word	0x080037fd
 80037c4:	080037fd 	.word	0x080037fd
 80037c8:	080037e5 	.word	0x080037e5
 80037cc:	080037fd 	.word	0x080037fd
 80037d0:	080037fd 	.word	0x080037fd
 80037d4:	080037fd 	.word	0x080037fd
 80037d8:	080037f5 	.word	0x080037f5
 80037dc:	2300      	movs	r3, #0
 80037de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80037e2:	e098      	b.n	8003916 <UART_SetConfig+0x27e>
 80037e4:	2302      	movs	r3, #2
 80037e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80037ea:	e094      	b.n	8003916 <UART_SetConfig+0x27e>
 80037ec:	2304      	movs	r3, #4
 80037ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80037f2:	e090      	b.n	8003916 <UART_SetConfig+0x27e>
 80037f4:	2308      	movs	r3, #8
 80037f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80037fa:	e08c      	b.n	8003916 <UART_SetConfig+0x27e>
 80037fc:	2310      	movs	r3, #16
 80037fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003802:	e088      	b.n	8003916 <UART_SetConfig+0x27e>
 8003804:	697b      	ldr	r3, [r7, #20]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a5f      	ldr	r2, [pc, #380]	; (8003988 <UART_SetConfig+0x2f0>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d125      	bne.n	800385a <UART_SetConfig+0x1c2>
 800380e:	4b5c      	ldr	r3, [pc, #368]	; (8003980 <UART_SetConfig+0x2e8>)
 8003810:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003814:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003818:	2b30      	cmp	r3, #48	; 0x30
 800381a:	d016      	beq.n	800384a <UART_SetConfig+0x1b2>
 800381c:	2b30      	cmp	r3, #48	; 0x30
 800381e:	d818      	bhi.n	8003852 <UART_SetConfig+0x1ba>
 8003820:	2b20      	cmp	r3, #32
 8003822:	d00a      	beq.n	800383a <UART_SetConfig+0x1a2>
 8003824:	2b20      	cmp	r3, #32
 8003826:	d814      	bhi.n	8003852 <UART_SetConfig+0x1ba>
 8003828:	2b00      	cmp	r3, #0
 800382a:	d002      	beq.n	8003832 <UART_SetConfig+0x19a>
 800382c:	2b10      	cmp	r3, #16
 800382e:	d008      	beq.n	8003842 <UART_SetConfig+0x1aa>
 8003830:	e00f      	b.n	8003852 <UART_SetConfig+0x1ba>
 8003832:	2300      	movs	r3, #0
 8003834:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003838:	e06d      	b.n	8003916 <UART_SetConfig+0x27e>
 800383a:	2302      	movs	r3, #2
 800383c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003840:	e069      	b.n	8003916 <UART_SetConfig+0x27e>
 8003842:	2304      	movs	r3, #4
 8003844:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003848:	e065      	b.n	8003916 <UART_SetConfig+0x27e>
 800384a:	2308      	movs	r3, #8
 800384c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003850:	e061      	b.n	8003916 <UART_SetConfig+0x27e>
 8003852:	2310      	movs	r3, #16
 8003854:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003858:	e05d      	b.n	8003916 <UART_SetConfig+0x27e>
 800385a:	697b      	ldr	r3, [r7, #20]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4a4b      	ldr	r2, [pc, #300]	; (800398c <UART_SetConfig+0x2f4>)
 8003860:	4293      	cmp	r3, r2
 8003862:	d125      	bne.n	80038b0 <UART_SetConfig+0x218>
 8003864:	4b46      	ldr	r3, [pc, #280]	; (8003980 <UART_SetConfig+0x2e8>)
 8003866:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800386a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800386e:	2bc0      	cmp	r3, #192	; 0xc0
 8003870:	d016      	beq.n	80038a0 <UART_SetConfig+0x208>
 8003872:	2bc0      	cmp	r3, #192	; 0xc0
 8003874:	d818      	bhi.n	80038a8 <UART_SetConfig+0x210>
 8003876:	2b80      	cmp	r3, #128	; 0x80
 8003878:	d00a      	beq.n	8003890 <UART_SetConfig+0x1f8>
 800387a:	2b80      	cmp	r3, #128	; 0x80
 800387c:	d814      	bhi.n	80038a8 <UART_SetConfig+0x210>
 800387e:	2b00      	cmp	r3, #0
 8003880:	d002      	beq.n	8003888 <UART_SetConfig+0x1f0>
 8003882:	2b40      	cmp	r3, #64	; 0x40
 8003884:	d008      	beq.n	8003898 <UART_SetConfig+0x200>
 8003886:	e00f      	b.n	80038a8 <UART_SetConfig+0x210>
 8003888:	2300      	movs	r3, #0
 800388a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800388e:	e042      	b.n	8003916 <UART_SetConfig+0x27e>
 8003890:	2302      	movs	r3, #2
 8003892:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003896:	e03e      	b.n	8003916 <UART_SetConfig+0x27e>
 8003898:	2304      	movs	r3, #4
 800389a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800389e:	e03a      	b.n	8003916 <UART_SetConfig+0x27e>
 80038a0:	2308      	movs	r3, #8
 80038a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80038a6:	e036      	b.n	8003916 <UART_SetConfig+0x27e>
 80038a8:	2310      	movs	r3, #16
 80038aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80038ae:	e032      	b.n	8003916 <UART_SetConfig+0x27e>
 80038b0:	697b      	ldr	r3, [r7, #20]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4a30      	ldr	r2, [pc, #192]	; (8003978 <UART_SetConfig+0x2e0>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d12a      	bne.n	8003910 <UART_SetConfig+0x278>
 80038ba:	4b31      	ldr	r3, [pc, #196]	; (8003980 <UART_SetConfig+0x2e8>)
 80038bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038c0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80038c4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80038c8:	d01a      	beq.n	8003900 <UART_SetConfig+0x268>
 80038ca:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80038ce:	d81b      	bhi.n	8003908 <UART_SetConfig+0x270>
 80038d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80038d4:	d00c      	beq.n	80038f0 <UART_SetConfig+0x258>
 80038d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80038da:	d815      	bhi.n	8003908 <UART_SetConfig+0x270>
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d003      	beq.n	80038e8 <UART_SetConfig+0x250>
 80038e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038e4:	d008      	beq.n	80038f8 <UART_SetConfig+0x260>
 80038e6:	e00f      	b.n	8003908 <UART_SetConfig+0x270>
 80038e8:	2300      	movs	r3, #0
 80038ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80038ee:	e012      	b.n	8003916 <UART_SetConfig+0x27e>
 80038f0:	2302      	movs	r3, #2
 80038f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80038f6:	e00e      	b.n	8003916 <UART_SetConfig+0x27e>
 80038f8:	2304      	movs	r3, #4
 80038fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80038fe:	e00a      	b.n	8003916 <UART_SetConfig+0x27e>
 8003900:	2308      	movs	r3, #8
 8003902:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003906:	e006      	b.n	8003916 <UART_SetConfig+0x27e>
 8003908:	2310      	movs	r3, #16
 800390a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800390e:	e002      	b.n	8003916 <UART_SetConfig+0x27e>
 8003910:	2310      	movs	r3, #16
 8003912:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003916:	697b      	ldr	r3, [r7, #20]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4a17      	ldr	r2, [pc, #92]	; (8003978 <UART_SetConfig+0x2e0>)
 800391c:	4293      	cmp	r3, r2
 800391e:	f040 80a8 	bne.w	8003a72 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003922:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003926:	2b08      	cmp	r3, #8
 8003928:	d834      	bhi.n	8003994 <UART_SetConfig+0x2fc>
 800392a:	a201      	add	r2, pc, #4	; (adr r2, 8003930 <UART_SetConfig+0x298>)
 800392c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003930:	08003955 	.word	0x08003955
 8003934:	08003995 	.word	0x08003995
 8003938:	0800395d 	.word	0x0800395d
 800393c:	08003995 	.word	0x08003995
 8003940:	08003963 	.word	0x08003963
 8003944:	08003995 	.word	0x08003995
 8003948:	08003995 	.word	0x08003995
 800394c:	08003995 	.word	0x08003995
 8003950:	0800396b 	.word	0x0800396b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003954:	f7fe fae8 	bl	8001f28 <HAL_RCC_GetPCLK1Freq>
 8003958:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800395a:	e021      	b.n	80039a0 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800395c:	4b0c      	ldr	r3, [pc, #48]	; (8003990 <UART_SetConfig+0x2f8>)
 800395e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003960:	e01e      	b.n	80039a0 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003962:	f7fe fa73 	bl	8001e4c <HAL_RCC_GetSysClockFreq>
 8003966:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003968:	e01a      	b.n	80039a0 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800396a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800396e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003970:	e016      	b.n	80039a0 <UART_SetConfig+0x308>
 8003972:	bf00      	nop
 8003974:	cfff69f3 	.word	0xcfff69f3
 8003978:	40008000 	.word	0x40008000
 800397c:	40013800 	.word	0x40013800
 8003980:	40021000 	.word	0x40021000
 8003984:	40004400 	.word	0x40004400
 8003988:	40004800 	.word	0x40004800
 800398c:	40004c00 	.word	0x40004c00
 8003990:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8003994:	2300      	movs	r3, #0
 8003996:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003998:	2301      	movs	r3, #1
 800399a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800399e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80039a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	f000 812a 	beq.w	8003bfc <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80039a8:	697b      	ldr	r3, [r7, #20]
 80039aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ac:	4a9e      	ldr	r2, [pc, #632]	; (8003c28 <UART_SetConfig+0x590>)
 80039ae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80039b2:	461a      	mov	r2, r3
 80039b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039b6:	fbb3 f3f2 	udiv	r3, r3, r2
 80039ba:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80039bc:	697b      	ldr	r3, [r7, #20]
 80039be:	685a      	ldr	r2, [r3, #4]
 80039c0:	4613      	mov	r3, r2
 80039c2:	005b      	lsls	r3, r3, #1
 80039c4:	4413      	add	r3, r2
 80039c6:	69ba      	ldr	r2, [r7, #24]
 80039c8:	429a      	cmp	r2, r3
 80039ca:	d305      	bcc.n	80039d8 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80039cc:	697b      	ldr	r3, [r7, #20]
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80039d2:	69ba      	ldr	r2, [r7, #24]
 80039d4:	429a      	cmp	r2, r3
 80039d6:	d903      	bls.n	80039e0 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 80039d8:	2301      	movs	r3, #1
 80039da:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80039de:	e10d      	b.n	8003bfc <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80039e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e2:	2200      	movs	r2, #0
 80039e4:	60bb      	str	r3, [r7, #8]
 80039e6:	60fa      	str	r2, [r7, #12]
 80039e8:	697b      	ldr	r3, [r7, #20]
 80039ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ec:	4a8e      	ldr	r2, [pc, #568]	; (8003c28 <UART_SetConfig+0x590>)
 80039ee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80039f2:	b29b      	uxth	r3, r3
 80039f4:	2200      	movs	r2, #0
 80039f6:	603b      	str	r3, [r7, #0]
 80039f8:	607a      	str	r2, [r7, #4]
 80039fa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80039fe:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003a02:	f7fc fc5d 	bl	80002c0 <__aeabi_uldivmod>
 8003a06:	4602      	mov	r2, r0
 8003a08:	460b      	mov	r3, r1
 8003a0a:	4610      	mov	r0, r2
 8003a0c:	4619      	mov	r1, r3
 8003a0e:	f04f 0200 	mov.w	r2, #0
 8003a12:	f04f 0300 	mov.w	r3, #0
 8003a16:	020b      	lsls	r3, r1, #8
 8003a18:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003a1c:	0202      	lsls	r2, r0, #8
 8003a1e:	6979      	ldr	r1, [r7, #20]
 8003a20:	6849      	ldr	r1, [r1, #4]
 8003a22:	0849      	lsrs	r1, r1, #1
 8003a24:	2000      	movs	r0, #0
 8003a26:	460c      	mov	r4, r1
 8003a28:	4605      	mov	r5, r0
 8003a2a:	eb12 0804 	adds.w	r8, r2, r4
 8003a2e:	eb43 0905 	adc.w	r9, r3, r5
 8003a32:	697b      	ldr	r3, [r7, #20]
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	2200      	movs	r2, #0
 8003a38:	469a      	mov	sl, r3
 8003a3a:	4693      	mov	fp, r2
 8003a3c:	4652      	mov	r2, sl
 8003a3e:	465b      	mov	r3, fp
 8003a40:	4640      	mov	r0, r8
 8003a42:	4649      	mov	r1, r9
 8003a44:	f7fc fc3c 	bl	80002c0 <__aeabi_uldivmod>
 8003a48:	4602      	mov	r2, r0
 8003a4a:	460b      	mov	r3, r1
 8003a4c:	4613      	mov	r3, r2
 8003a4e:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003a50:	6a3b      	ldr	r3, [r7, #32]
 8003a52:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003a56:	d308      	bcc.n	8003a6a <UART_SetConfig+0x3d2>
 8003a58:	6a3b      	ldr	r3, [r7, #32]
 8003a5a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a5e:	d204      	bcs.n	8003a6a <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8003a60:	697b      	ldr	r3, [r7, #20]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	6a3a      	ldr	r2, [r7, #32]
 8003a66:	60da      	str	r2, [r3, #12]
 8003a68:	e0c8      	b.n	8003bfc <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003a70:	e0c4      	b.n	8003bfc <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003a72:	697b      	ldr	r3, [r7, #20]
 8003a74:	69db      	ldr	r3, [r3, #28]
 8003a76:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a7a:	d167      	bne.n	8003b4c <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8003a7c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003a80:	2b08      	cmp	r3, #8
 8003a82:	d828      	bhi.n	8003ad6 <UART_SetConfig+0x43e>
 8003a84:	a201      	add	r2, pc, #4	; (adr r2, 8003a8c <UART_SetConfig+0x3f4>)
 8003a86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a8a:	bf00      	nop
 8003a8c:	08003ab1 	.word	0x08003ab1
 8003a90:	08003ab9 	.word	0x08003ab9
 8003a94:	08003ac1 	.word	0x08003ac1
 8003a98:	08003ad7 	.word	0x08003ad7
 8003a9c:	08003ac7 	.word	0x08003ac7
 8003aa0:	08003ad7 	.word	0x08003ad7
 8003aa4:	08003ad7 	.word	0x08003ad7
 8003aa8:	08003ad7 	.word	0x08003ad7
 8003aac:	08003acf 	.word	0x08003acf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ab0:	f7fe fa3a 	bl	8001f28 <HAL_RCC_GetPCLK1Freq>
 8003ab4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003ab6:	e014      	b.n	8003ae2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003ab8:	f7fe fa4c 	bl	8001f54 <HAL_RCC_GetPCLK2Freq>
 8003abc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003abe:	e010      	b.n	8003ae2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ac0:	4b5a      	ldr	r3, [pc, #360]	; (8003c2c <UART_SetConfig+0x594>)
 8003ac2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003ac4:	e00d      	b.n	8003ae2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ac6:	f7fe f9c1 	bl	8001e4c <HAL_RCC_GetSysClockFreq>
 8003aca:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003acc:	e009      	b.n	8003ae2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ace:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ad2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003ad4:	e005      	b.n	8003ae2 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003ada:	2301      	movs	r3, #1
 8003adc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003ae0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	f000 8089 	beq.w	8003bfc <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003aea:	697b      	ldr	r3, [r7, #20]
 8003aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aee:	4a4e      	ldr	r2, [pc, #312]	; (8003c28 <UART_SetConfig+0x590>)
 8003af0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003af4:	461a      	mov	r2, r3
 8003af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003af8:	fbb3 f3f2 	udiv	r3, r3, r2
 8003afc:	005a      	lsls	r2, r3, #1
 8003afe:	697b      	ldr	r3, [r7, #20]
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	085b      	lsrs	r3, r3, #1
 8003b04:	441a      	add	r2, r3
 8003b06:	697b      	ldr	r3, [r7, #20]
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b0e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003b10:	6a3b      	ldr	r3, [r7, #32]
 8003b12:	2b0f      	cmp	r3, #15
 8003b14:	d916      	bls.n	8003b44 <UART_SetConfig+0x4ac>
 8003b16:	6a3b      	ldr	r3, [r7, #32]
 8003b18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b1c:	d212      	bcs.n	8003b44 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003b1e:	6a3b      	ldr	r3, [r7, #32]
 8003b20:	b29b      	uxth	r3, r3
 8003b22:	f023 030f 	bic.w	r3, r3, #15
 8003b26:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003b28:	6a3b      	ldr	r3, [r7, #32]
 8003b2a:	085b      	lsrs	r3, r3, #1
 8003b2c:	b29b      	uxth	r3, r3
 8003b2e:	f003 0307 	and.w	r3, r3, #7
 8003b32:	b29a      	uxth	r2, r3
 8003b34:	8bfb      	ldrh	r3, [r7, #30]
 8003b36:	4313      	orrs	r3, r2
 8003b38:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8003b3a:	697b      	ldr	r3, [r7, #20]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	8bfa      	ldrh	r2, [r7, #30]
 8003b40:	60da      	str	r2, [r3, #12]
 8003b42:	e05b      	b.n	8003bfc <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8003b44:	2301      	movs	r3, #1
 8003b46:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003b4a:	e057      	b.n	8003bfc <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003b4c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003b50:	2b08      	cmp	r3, #8
 8003b52:	d828      	bhi.n	8003ba6 <UART_SetConfig+0x50e>
 8003b54:	a201      	add	r2, pc, #4	; (adr r2, 8003b5c <UART_SetConfig+0x4c4>)
 8003b56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b5a:	bf00      	nop
 8003b5c:	08003b81 	.word	0x08003b81
 8003b60:	08003b89 	.word	0x08003b89
 8003b64:	08003b91 	.word	0x08003b91
 8003b68:	08003ba7 	.word	0x08003ba7
 8003b6c:	08003b97 	.word	0x08003b97
 8003b70:	08003ba7 	.word	0x08003ba7
 8003b74:	08003ba7 	.word	0x08003ba7
 8003b78:	08003ba7 	.word	0x08003ba7
 8003b7c:	08003b9f 	.word	0x08003b9f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b80:	f7fe f9d2 	bl	8001f28 <HAL_RCC_GetPCLK1Freq>
 8003b84:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003b86:	e014      	b.n	8003bb2 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003b88:	f7fe f9e4 	bl	8001f54 <HAL_RCC_GetPCLK2Freq>
 8003b8c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003b8e:	e010      	b.n	8003bb2 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003b90:	4b26      	ldr	r3, [pc, #152]	; (8003c2c <UART_SetConfig+0x594>)
 8003b92:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003b94:	e00d      	b.n	8003bb2 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b96:	f7fe f959 	bl	8001e4c <HAL_RCC_GetSysClockFreq>
 8003b9a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003b9c:	e009      	b.n	8003bb2 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ba2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003ba4:	e005      	b.n	8003bb2 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003baa:	2301      	movs	r3, #1
 8003bac:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003bb0:	bf00      	nop
    }

    if (pclk != 0U)
 8003bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d021      	beq.n	8003bfc <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003bb8:	697b      	ldr	r3, [r7, #20]
 8003bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bbc:	4a1a      	ldr	r2, [pc, #104]	; (8003c28 <UART_SetConfig+0x590>)
 8003bbe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003bc2:	461a      	mov	r2, r3
 8003bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bc6:	fbb3 f2f2 	udiv	r2, r3, r2
 8003bca:	697b      	ldr	r3, [r7, #20]
 8003bcc:	685b      	ldr	r3, [r3, #4]
 8003bce:	085b      	lsrs	r3, r3, #1
 8003bd0:	441a      	add	r2, r3
 8003bd2:	697b      	ldr	r3, [r7, #20]
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bda:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003bdc:	6a3b      	ldr	r3, [r7, #32]
 8003bde:	2b0f      	cmp	r3, #15
 8003be0:	d909      	bls.n	8003bf6 <UART_SetConfig+0x55e>
 8003be2:	6a3b      	ldr	r3, [r7, #32]
 8003be4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003be8:	d205      	bcs.n	8003bf6 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003bea:	6a3b      	ldr	r3, [r7, #32]
 8003bec:	b29a      	uxth	r2, r3
 8003bee:	697b      	ldr	r3, [r7, #20]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	60da      	str	r2, [r3, #12]
 8003bf4:	e002      	b.n	8003bfc <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003bfc:	697b      	ldr	r3, [r7, #20]
 8003bfe:	2201      	movs	r2, #1
 8003c00:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8003c04:	697b      	ldr	r3, [r7, #20]
 8003c06:	2201      	movs	r2, #1
 8003c08:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003c0c:	697b      	ldr	r3, [r7, #20]
 8003c0e:	2200      	movs	r2, #0
 8003c10:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8003c12:	697b      	ldr	r3, [r7, #20]
 8003c14:	2200      	movs	r2, #0
 8003c16:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8003c18:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	3730      	adds	r7, #48	; 0x30
 8003c20:	46bd      	mov	sp, r7
 8003c22:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c26:	bf00      	nop
 8003c28:	08005260 	.word	0x08005260
 8003c2c:	00f42400 	.word	0x00f42400

08003c30 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003c30:	b480      	push	{r7}
 8003c32:	b083      	sub	sp, #12
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c3c:	f003 0301 	and.w	r3, r3, #1
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d00a      	beq.n	8003c5a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	430a      	orrs	r2, r1
 8003c58:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c5e:	f003 0302 	and.w	r3, r3, #2
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d00a      	beq.n	8003c7c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	430a      	orrs	r2, r1
 8003c7a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c80:	f003 0304 	and.w	r3, r3, #4
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d00a      	beq.n	8003c9e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	685b      	ldr	r3, [r3, #4]
 8003c8e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	430a      	orrs	r2, r1
 8003c9c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ca2:	f003 0308 	and.w	r3, r3, #8
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d00a      	beq.n	8003cc0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	430a      	orrs	r2, r1
 8003cbe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cc4:	f003 0310 	and.w	r3, r3, #16
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d00a      	beq.n	8003ce2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	689b      	ldr	r3, [r3, #8]
 8003cd2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	430a      	orrs	r2, r1
 8003ce0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ce6:	f003 0320 	and.w	r3, r3, #32
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d00a      	beq.n	8003d04 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	689b      	ldr	r3, [r3, #8]
 8003cf4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	430a      	orrs	r2, r1
 8003d02:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d01a      	beq.n	8003d46 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	430a      	orrs	r2, r1
 8003d24:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d2a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d2e:	d10a      	bne.n	8003d46 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	430a      	orrs	r2, r1
 8003d44:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d00a      	beq.n	8003d68 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	430a      	orrs	r2, r1
 8003d66:	605a      	str	r2, [r3, #4]
  }
}
 8003d68:	bf00      	nop
 8003d6a:	370c      	adds	r7, #12
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d72:	4770      	bx	lr

08003d74 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b086      	sub	sp, #24
 8003d78:	af02      	add	r7, sp, #8
 8003d7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2200      	movs	r2, #0
 8003d80:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003d84:	f7fd f882 	bl	8000e8c <HAL_GetTick>
 8003d88:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f003 0308 	and.w	r3, r3, #8
 8003d94:	2b08      	cmp	r3, #8
 8003d96:	d10e      	bne.n	8003db6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003d98:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003d9c:	9300      	str	r3, [sp, #0]
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	2200      	movs	r2, #0
 8003da2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003da6:	6878      	ldr	r0, [r7, #4]
 8003da8:	f000 f82f 	bl	8003e0a <UART_WaitOnFlagUntilTimeout>
 8003dac:	4603      	mov	r3, r0
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d001      	beq.n	8003db6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003db2:	2303      	movs	r3, #3
 8003db4:	e025      	b.n	8003e02 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f003 0304 	and.w	r3, r3, #4
 8003dc0:	2b04      	cmp	r3, #4
 8003dc2:	d10e      	bne.n	8003de2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003dc4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003dc8:	9300      	str	r3, [sp, #0]
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	2200      	movs	r2, #0
 8003dce:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003dd2:	6878      	ldr	r0, [r7, #4]
 8003dd4:	f000 f819 	bl	8003e0a <UART_WaitOnFlagUntilTimeout>
 8003dd8:	4603      	mov	r3, r0
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d001      	beq.n	8003de2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003dde:	2303      	movs	r3, #3
 8003de0:	e00f      	b.n	8003e02 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2220      	movs	r2, #32
 8003de6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2220      	movs	r2, #32
 8003dee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2200      	movs	r2, #0
 8003df6:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003e00:	2300      	movs	r3, #0
}
 8003e02:	4618      	mov	r0, r3
 8003e04:	3710      	adds	r7, #16
 8003e06:	46bd      	mov	sp, r7
 8003e08:	bd80      	pop	{r7, pc}

08003e0a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003e0a:	b580      	push	{r7, lr}
 8003e0c:	b09c      	sub	sp, #112	; 0x70
 8003e0e:	af00      	add	r7, sp, #0
 8003e10:	60f8      	str	r0, [r7, #12]
 8003e12:	60b9      	str	r1, [r7, #8]
 8003e14:	603b      	str	r3, [r7, #0]
 8003e16:	4613      	mov	r3, r2
 8003e18:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e1a:	e0a9      	b.n	8003f70 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e1c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003e1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e22:	f000 80a5 	beq.w	8003f70 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e26:	f7fd f831 	bl	8000e8c <HAL_GetTick>
 8003e2a:	4602      	mov	r2, r0
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	1ad3      	subs	r3, r2, r3
 8003e30:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003e32:	429a      	cmp	r2, r3
 8003e34:	d302      	bcc.n	8003e3c <UART_WaitOnFlagUntilTimeout+0x32>
 8003e36:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d140      	bne.n	8003ebe <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e44:	e853 3f00 	ldrex	r3, [r3]
 8003e48:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003e4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e4c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003e50:	667b      	str	r3, [r7, #100]	; 0x64
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	461a      	mov	r2, r3
 8003e58:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003e5a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003e5c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e5e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003e60:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003e62:	e841 2300 	strex	r3, r2, [r1]
 8003e66:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003e68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d1e6      	bne.n	8003e3c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	3308      	adds	r3, #8
 8003e74:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e78:	e853 3f00 	ldrex	r3, [r3]
 8003e7c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003e7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e80:	f023 0301 	bic.w	r3, r3, #1
 8003e84:	663b      	str	r3, [r7, #96]	; 0x60
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	3308      	adds	r3, #8
 8003e8c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003e8e:	64ba      	str	r2, [r7, #72]	; 0x48
 8003e90:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e92:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003e94:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003e96:	e841 2300 	strex	r3, r2, [r1]
 8003e9a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003e9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d1e5      	bne.n	8003e6e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	2220      	movs	r2, #32
 8003ea6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	2220      	movs	r2, #32
 8003eae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8003eba:	2303      	movs	r3, #3
 8003ebc:	e069      	b.n	8003f92 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f003 0304 	and.w	r3, r3, #4
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d051      	beq.n	8003f70 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	69db      	ldr	r3, [r3, #28]
 8003ed2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ed6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003eda:	d149      	bne.n	8003f70 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003ee4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eee:	e853 3f00 	ldrex	r3, [r3]
 8003ef2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ef6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003efa:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	461a      	mov	r2, r3
 8003f02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f04:	637b      	str	r3, [r7, #52]	; 0x34
 8003f06:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f08:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003f0a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003f0c:	e841 2300 	strex	r3, r2, [r1]
 8003f10:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003f12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d1e6      	bne.n	8003ee6 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	3308      	adds	r3, #8
 8003f1e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f20:	697b      	ldr	r3, [r7, #20]
 8003f22:	e853 3f00 	ldrex	r3, [r3]
 8003f26:	613b      	str	r3, [r7, #16]
   return(result);
 8003f28:	693b      	ldr	r3, [r7, #16]
 8003f2a:	f023 0301 	bic.w	r3, r3, #1
 8003f2e:	66bb      	str	r3, [r7, #104]	; 0x68
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	3308      	adds	r3, #8
 8003f36:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003f38:	623a      	str	r2, [r7, #32]
 8003f3a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f3c:	69f9      	ldr	r1, [r7, #28]
 8003f3e:	6a3a      	ldr	r2, [r7, #32]
 8003f40:	e841 2300 	strex	r3, r2, [r1]
 8003f44:	61bb      	str	r3, [r7, #24]
   return(result);
 8003f46:	69bb      	ldr	r3, [r7, #24]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d1e5      	bne.n	8003f18 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	2220      	movs	r2, #32
 8003f50:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	2220      	movs	r2, #32
 8003f58:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	2220      	movs	r2, #32
 8003f60:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	2200      	movs	r2, #0
 8003f68:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8003f6c:	2303      	movs	r3, #3
 8003f6e:	e010      	b.n	8003f92 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	69da      	ldr	r2, [r3, #28]
 8003f76:	68bb      	ldr	r3, [r7, #8]
 8003f78:	4013      	ands	r3, r2
 8003f7a:	68ba      	ldr	r2, [r7, #8]
 8003f7c:	429a      	cmp	r2, r3
 8003f7e:	bf0c      	ite	eq
 8003f80:	2301      	moveq	r3, #1
 8003f82:	2300      	movne	r3, #0
 8003f84:	b2db      	uxtb	r3, r3
 8003f86:	461a      	mov	r2, r3
 8003f88:	79fb      	ldrb	r3, [r7, #7]
 8003f8a:	429a      	cmp	r2, r3
 8003f8c:	f43f af46 	beq.w	8003e1c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003f90:	2300      	movs	r3, #0
}
 8003f92:	4618      	mov	r0, r3
 8003f94:	3770      	adds	r7, #112	; 0x70
 8003f96:	46bd      	mov	sp, r7
 8003f98:	bd80      	pop	{r7, pc}

08003f9a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003f9a:	b480      	push	{r7}
 8003f9c:	b085      	sub	sp, #20
 8003f9e:	af00      	add	r7, sp, #0
 8003fa0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003fa8:	2b01      	cmp	r3, #1
 8003faa:	d101      	bne.n	8003fb0 <HAL_UARTEx_DisableFifoMode+0x16>
 8003fac:	2302      	movs	r3, #2
 8003fae:	e027      	b.n	8004000 <HAL_UARTEx_DisableFifoMode+0x66>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2201      	movs	r2, #1
 8003fb4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2224      	movs	r2, #36	; 0x24
 8003fbc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	681a      	ldr	r2, [r3, #0]
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f022 0201 	bic.w	r2, r2, #1
 8003fd6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8003fde:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	68fa      	ldr	r2, [r7, #12]
 8003fec:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2220      	movs	r2, #32
 8003ff2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003ffe:	2300      	movs	r3, #0
}
 8004000:	4618      	mov	r0, r3
 8004002:	3714      	adds	r7, #20
 8004004:	46bd      	mov	sp, r7
 8004006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400a:	4770      	bx	lr

0800400c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b084      	sub	sp, #16
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
 8004014:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800401c:	2b01      	cmp	r3, #1
 800401e:	d101      	bne.n	8004024 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004020:	2302      	movs	r3, #2
 8004022:	e02d      	b.n	8004080 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2201      	movs	r2, #1
 8004028:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2224      	movs	r2, #36	; 0x24
 8004030:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	681a      	ldr	r2, [r3, #0]
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f022 0201 	bic.w	r2, r2, #1
 800404a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	689b      	ldr	r3, [r3, #8]
 8004052:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	683a      	ldr	r2, [r7, #0]
 800405c:	430a      	orrs	r2, r1
 800405e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004060:	6878      	ldr	r0, [r7, #4]
 8004062:	f000 f84f 	bl	8004104 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	68fa      	ldr	r2, [r7, #12]
 800406c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2220      	movs	r2, #32
 8004072:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2200      	movs	r2, #0
 800407a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800407e:	2300      	movs	r3, #0
}
 8004080:	4618      	mov	r0, r3
 8004082:	3710      	adds	r7, #16
 8004084:	46bd      	mov	sp, r7
 8004086:	bd80      	pop	{r7, pc}

08004088 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b084      	sub	sp, #16
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
 8004090:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004098:	2b01      	cmp	r3, #1
 800409a:	d101      	bne.n	80040a0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800409c:	2302      	movs	r3, #2
 800409e:	e02d      	b.n	80040fc <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2201      	movs	r2, #1
 80040a4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2224      	movs	r2, #36	; 0x24
 80040ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	681a      	ldr	r2, [r3, #0]
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f022 0201 	bic.w	r2, r2, #1
 80040c6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	689b      	ldr	r3, [r3, #8]
 80040ce:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	683a      	ldr	r2, [r7, #0]
 80040d8:	430a      	orrs	r2, r1
 80040da:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80040dc:	6878      	ldr	r0, [r7, #4]
 80040de:	f000 f811 	bl	8004104 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	68fa      	ldr	r2, [r7, #12]
 80040e8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2220      	movs	r2, #32
 80040ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2200      	movs	r2, #0
 80040f6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80040fa:	2300      	movs	r3, #0
}
 80040fc:	4618      	mov	r0, r3
 80040fe:	3710      	adds	r7, #16
 8004100:	46bd      	mov	sp, r7
 8004102:	bd80      	pop	{r7, pc}

08004104 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004104:	b480      	push	{r7}
 8004106:	b085      	sub	sp, #20
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004110:	2b00      	cmp	r3, #0
 8004112:	d108      	bne.n	8004126 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2201      	movs	r2, #1
 8004118:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2201      	movs	r2, #1
 8004120:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004124:	e031      	b.n	800418a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004126:	2308      	movs	r3, #8
 8004128:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800412a:	2308      	movs	r3, #8
 800412c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	689b      	ldr	r3, [r3, #8]
 8004134:	0e5b      	lsrs	r3, r3, #25
 8004136:	b2db      	uxtb	r3, r3
 8004138:	f003 0307 	and.w	r3, r3, #7
 800413c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	689b      	ldr	r3, [r3, #8]
 8004144:	0f5b      	lsrs	r3, r3, #29
 8004146:	b2db      	uxtb	r3, r3
 8004148:	f003 0307 	and.w	r3, r3, #7
 800414c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800414e:	7bbb      	ldrb	r3, [r7, #14]
 8004150:	7b3a      	ldrb	r2, [r7, #12]
 8004152:	4911      	ldr	r1, [pc, #68]	; (8004198 <UARTEx_SetNbDataToProcess+0x94>)
 8004154:	5c8a      	ldrb	r2, [r1, r2]
 8004156:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800415a:	7b3a      	ldrb	r2, [r7, #12]
 800415c:	490f      	ldr	r1, [pc, #60]	; (800419c <UARTEx_SetNbDataToProcess+0x98>)
 800415e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004160:	fb93 f3f2 	sdiv	r3, r3, r2
 8004164:	b29a      	uxth	r2, r3
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800416c:	7bfb      	ldrb	r3, [r7, #15]
 800416e:	7b7a      	ldrb	r2, [r7, #13]
 8004170:	4909      	ldr	r1, [pc, #36]	; (8004198 <UARTEx_SetNbDataToProcess+0x94>)
 8004172:	5c8a      	ldrb	r2, [r1, r2]
 8004174:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004178:	7b7a      	ldrb	r2, [r7, #13]
 800417a:	4908      	ldr	r1, [pc, #32]	; (800419c <UARTEx_SetNbDataToProcess+0x98>)
 800417c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800417e:	fb93 f3f2 	sdiv	r3, r3, r2
 8004182:	b29a      	uxth	r2, r3
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800418a:	bf00      	nop
 800418c:	3714      	adds	r7, #20
 800418e:	46bd      	mov	sp, r7
 8004190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004194:	4770      	bx	lr
 8004196:	bf00      	nop
 8004198:	08005278 	.word	0x08005278
 800419c:	08005280 	.word	0x08005280

080041a0 <__errno>:
 80041a0:	4b01      	ldr	r3, [pc, #4]	; (80041a8 <__errno+0x8>)
 80041a2:	6818      	ldr	r0, [r3, #0]
 80041a4:	4770      	bx	lr
 80041a6:	bf00      	nop
 80041a8:	2000000c 	.word	0x2000000c

080041ac <__libc_init_array>:
 80041ac:	b570      	push	{r4, r5, r6, lr}
 80041ae:	4d0d      	ldr	r5, [pc, #52]	; (80041e4 <__libc_init_array+0x38>)
 80041b0:	4c0d      	ldr	r4, [pc, #52]	; (80041e8 <__libc_init_array+0x3c>)
 80041b2:	1b64      	subs	r4, r4, r5
 80041b4:	10a4      	asrs	r4, r4, #2
 80041b6:	2600      	movs	r6, #0
 80041b8:	42a6      	cmp	r6, r4
 80041ba:	d109      	bne.n	80041d0 <__libc_init_array+0x24>
 80041bc:	4d0b      	ldr	r5, [pc, #44]	; (80041ec <__libc_init_array+0x40>)
 80041be:	4c0c      	ldr	r4, [pc, #48]	; (80041f0 <__libc_init_array+0x44>)
 80041c0:	f001 f824 	bl	800520c <_init>
 80041c4:	1b64      	subs	r4, r4, r5
 80041c6:	10a4      	asrs	r4, r4, #2
 80041c8:	2600      	movs	r6, #0
 80041ca:	42a6      	cmp	r6, r4
 80041cc:	d105      	bne.n	80041da <__libc_init_array+0x2e>
 80041ce:	bd70      	pop	{r4, r5, r6, pc}
 80041d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80041d4:	4798      	blx	r3
 80041d6:	3601      	adds	r6, #1
 80041d8:	e7ee      	b.n	80041b8 <__libc_init_array+0xc>
 80041da:	f855 3b04 	ldr.w	r3, [r5], #4
 80041de:	4798      	blx	r3
 80041e0:	3601      	adds	r6, #1
 80041e2:	e7f2      	b.n	80041ca <__libc_init_array+0x1e>
 80041e4:	08005328 	.word	0x08005328
 80041e8:	08005328 	.word	0x08005328
 80041ec:	08005328 	.word	0x08005328
 80041f0:	0800532c 	.word	0x0800532c

080041f4 <memset>:
 80041f4:	4402      	add	r2, r0
 80041f6:	4603      	mov	r3, r0
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d100      	bne.n	80041fe <memset+0xa>
 80041fc:	4770      	bx	lr
 80041fe:	f803 1b01 	strb.w	r1, [r3], #1
 8004202:	e7f9      	b.n	80041f8 <memset+0x4>

08004204 <iprintf>:
 8004204:	b40f      	push	{r0, r1, r2, r3}
 8004206:	4b0a      	ldr	r3, [pc, #40]	; (8004230 <iprintf+0x2c>)
 8004208:	b513      	push	{r0, r1, r4, lr}
 800420a:	681c      	ldr	r4, [r3, #0]
 800420c:	b124      	cbz	r4, 8004218 <iprintf+0x14>
 800420e:	69a3      	ldr	r3, [r4, #24]
 8004210:	b913      	cbnz	r3, 8004218 <iprintf+0x14>
 8004212:	4620      	mov	r0, r4
 8004214:	f000 fa5e 	bl	80046d4 <__sinit>
 8004218:	ab05      	add	r3, sp, #20
 800421a:	9a04      	ldr	r2, [sp, #16]
 800421c:	68a1      	ldr	r1, [r4, #8]
 800421e:	9301      	str	r3, [sp, #4]
 8004220:	4620      	mov	r0, r4
 8004222:	f000 fc67 	bl	8004af4 <_vfiprintf_r>
 8004226:	b002      	add	sp, #8
 8004228:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800422c:	b004      	add	sp, #16
 800422e:	4770      	bx	lr
 8004230:	2000000c 	.word	0x2000000c

08004234 <_puts_r>:
 8004234:	b570      	push	{r4, r5, r6, lr}
 8004236:	460e      	mov	r6, r1
 8004238:	4605      	mov	r5, r0
 800423a:	b118      	cbz	r0, 8004244 <_puts_r+0x10>
 800423c:	6983      	ldr	r3, [r0, #24]
 800423e:	b90b      	cbnz	r3, 8004244 <_puts_r+0x10>
 8004240:	f000 fa48 	bl	80046d4 <__sinit>
 8004244:	69ab      	ldr	r3, [r5, #24]
 8004246:	68ac      	ldr	r4, [r5, #8]
 8004248:	b913      	cbnz	r3, 8004250 <_puts_r+0x1c>
 800424a:	4628      	mov	r0, r5
 800424c:	f000 fa42 	bl	80046d4 <__sinit>
 8004250:	4b2c      	ldr	r3, [pc, #176]	; (8004304 <_puts_r+0xd0>)
 8004252:	429c      	cmp	r4, r3
 8004254:	d120      	bne.n	8004298 <_puts_r+0x64>
 8004256:	686c      	ldr	r4, [r5, #4]
 8004258:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800425a:	07db      	lsls	r3, r3, #31
 800425c:	d405      	bmi.n	800426a <_puts_r+0x36>
 800425e:	89a3      	ldrh	r3, [r4, #12]
 8004260:	0598      	lsls	r0, r3, #22
 8004262:	d402      	bmi.n	800426a <_puts_r+0x36>
 8004264:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004266:	f000 fad3 	bl	8004810 <__retarget_lock_acquire_recursive>
 800426a:	89a3      	ldrh	r3, [r4, #12]
 800426c:	0719      	lsls	r1, r3, #28
 800426e:	d51d      	bpl.n	80042ac <_puts_r+0x78>
 8004270:	6923      	ldr	r3, [r4, #16]
 8004272:	b1db      	cbz	r3, 80042ac <_puts_r+0x78>
 8004274:	3e01      	subs	r6, #1
 8004276:	68a3      	ldr	r3, [r4, #8]
 8004278:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800427c:	3b01      	subs	r3, #1
 800427e:	60a3      	str	r3, [r4, #8]
 8004280:	bb39      	cbnz	r1, 80042d2 <_puts_r+0x9e>
 8004282:	2b00      	cmp	r3, #0
 8004284:	da38      	bge.n	80042f8 <_puts_r+0xc4>
 8004286:	4622      	mov	r2, r4
 8004288:	210a      	movs	r1, #10
 800428a:	4628      	mov	r0, r5
 800428c:	f000 f848 	bl	8004320 <__swbuf_r>
 8004290:	3001      	adds	r0, #1
 8004292:	d011      	beq.n	80042b8 <_puts_r+0x84>
 8004294:	250a      	movs	r5, #10
 8004296:	e011      	b.n	80042bc <_puts_r+0x88>
 8004298:	4b1b      	ldr	r3, [pc, #108]	; (8004308 <_puts_r+0xd4>)
 800429a:	429c      	cmp	r4, r3
 800429c:	d101      	bne.n	80042a2 <_puts_r+0x6e>
 800429e:	68ac      	ldr	r4, [r5, #8]
 80042a0:	e7da      	b.n	8004258 <_puts_r+0x24>
 80042a2:	4b1a      	ldr	r3, [pc, #104]	; (800430c <_puts_r+0xd8>)
 80042a4:	429c      	cmp	r4, r3
 80042a6:	bf08      	it	eq
 80042a8:	68ec      	ldreq	r4, [r5, #12]
 80042aa:	e7d5      	b.n	8004258 <_puts_r+0x24>
 80042ac:	4621      	mov	r1, r4
 80042ae:	4628      	mov	r0, r5
 80042b0:	f000 f888 	bl	80043c4 <__swsetup_r>
 80042b4:	2800      	cmp	r0, #0
 80042b6:	d0dd      	beq.n	8004274 <_puts_r+0x40>
 80042b8:	f04f 35ff 	mov.w	r5, #4294967295
 80042bc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80042be:	07da      	lsls	r2, r3, #31
 80042c0:	d405      	bmi.n	80042ce <_puts_r+0x9a>
 80042c2:	89a3      	ldrh	r3, [r4, #12]
 80042c4:	059b      	lsls	r3, r3, #22
 80042c6:	d402      	bmi.n	80042ce <_puts_r+0x9a>
 80042c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80042ca:	f000 faa2 	bl	8004812 <__retarget_lock_release_recursive>
 80042ce:	4628      	mov	r0, r5
 80042d0:	bd70      	pop	{r4, r5, r6, pc}
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	da04      	bge.n	80042e0 <_puts_r+0xac>
 80042d6:	69a2      	ldr	r2, [r4, #24]
 80042d8:	429a      	cmp	r2, r3
 80042da:	dc06      	bgt.n	80042ea <_puts_r+0xb6>
 80042dc:	290a      	cmp	r1, #10
 80042de:	d004      	beq.n	80042ea <_puts_r+0xb6>
 80042e0:	6823      	ldr	r3, [r4, #0]
 80042e2:	1c5a      	adds	r2, r3, #1
 80042e4:	6022      	str	r2, [r4, #0]
 80042e6:	7019      	strb	r1, [r3, #0]
 80042e8:	e7c5      	b.n	8004276 <_puts_r+0x42>
 80042ea:	4622      	mov	r2, r4
 80042ec:	4628      	mov	r0, r5
 80042ee:	f000 f817 	bl	8004320 <__swbuf_r>
 80042f2:	3001      	adds	r0, #1
 80042f4:	d1bf      	bne.n	8004276 <_puts_r+0x42>
 80042f6:	e7df      	b.n	80042b8 <_puts_r+0x84>
 80042f8:	6823      	ldr	r3, [r4, #0]
 80042fa:	250a      	movs	r5, #10
 80042fc:	1c5a      	adds	r2, r3, #1
 80042fe:	6022      	str	r2, [r4, #0]
 8004300:	701d      	strb	r5, [r3, #0]
 8004302:	e7db      	b.n	80042bc <_puts_r+0x88>
 8004304:	080052ac 	.word	0x080052ac
 8004308:	080052cc 	.word	0x080052cc
 800430c:	0800528c 	.word	0x0800528c

08004310 <puts>:
 8004310:	4b02      	ldr	r3, [pc, #8]	; (800431c <puts+0xc>)
 8004312:	4601      	mov	r1, r0
 8004314:	6818      	ldr	r0, [r3, #0]
 8004316:	f7ff bf8d 	b.w	8004234 <_puts_r>
 800431a:	bf00      	nop
 800431c:	2000000c 	.word	0x2000000c

08004320 <__swbuf_r>:
 8004320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004322:	460e      	mov	r6, r1
 8004324:	4614      	mov	r4, r2
 8004326:	4605      	mov	r5, r0
 8004328:	b118      	cbz	r0, 8004332 <__swbuf_r+0x12>
 800432a:	6983      	ldr	r3, [r0, #24]
 800432c:	b90b      	cbnz	r3, 8004332 <__swbuf_r+0x12>
 800432e:	f000 f9d1 	bl	80046d4 <__sinit>
 8004332:	4b21      	ldr	r3, [pc, #132]	; (80043b8 <__swbuf_r+0x98>)
 8004334:	429c      	cmp	r4, r3
 8004336:	d12b      	bne.n	8004390 <__swbuf_r+0x70>
 8004338:	686c      	ldr	r4, [r5, #4]
 800433a:	69a3      	ldr	r3, [r4, #24]
 800433c:	60a3      	str	r3, [r4, #8]
 800433e:	89a3      	ldrh	r3, [r4, #12]
 8004340:	071a      	lsls	r2, r3, #28
 8004342:	d52f      	bpl.n	80043a4 <__swbuf_r+0x84>
 8004344:	6923      	ldr	r3, [r4, #16]
 8004346:	b36b      	cbz	r3, 80043a4 <__swbuf_r+0x84>
 8004348:	6923      	ldr	r3, [r4, #16]
 800434a:	6820      	ldr	r0, [r4, #0]
 800434c:	1ac0      	subs	r0, r0, r3
 800434e:	6963      	ldr	r3, [r4, #20]
 8004350:	b2f6      	uxtb	r6, r6
 8004352:	4283      	cmp	r3, r0
 8004354:	4637      	mov	r7, r6
 8004356:	dc04      	bgt.n	8004362 <__swbuf_r+0x42>
 8004358:	4621      	mov	r1, r4
 800435a:	4628      	mov	r0, r5
 800435c:	f000 f926 	bl	80045ac <_fflush_r>
 8004360:	bb30      	cbnz	r0, 80043b0 <__swbuf_r+0x90>
 8004362:	68a3      	ldr	r3, [r4, #8]
 8004364:	3b01      	subs	r3, #1
 8004366:	60a3      	str	r3, [r4, #8]
 8004368:	6823      	ldr	r3, [r4, #0]
 800436a:	1c5a      	adds	r2, r3, #1
 800436c:	6022      	str	r2, [r4, #0]
 800436e:	701e      	strb	r6, [r3, #0]
 8004370:	6963      	ldr	r3, [r4, #20]
 8004372:	3001      	adds	r0, #1
 8004374:	4283      	cmp	r3, r0
 8004376:	d004      	beq.n	8004382 <__swbuf_r+0x62>
 8004378:	89a3      	ldrh	r3, [r4, #12]
 800437a:	07db      	lsls	r3, r3, #31
 800437c:	d506      	bpl.n	800438c <__swbuf_r+0x6c>
 800437e:	2e0a      	cmp	r6, #10
 8004380:	d104      	bne.n	800438c <__swbuf_r+0x6c>
 8004382:	4621      	mov	r1, r4
 8004384:	4628      	mov	r0, r5
 8004386:	f000 f911 	bl	80045ac <_fflush_r>
 800438a:	b988      	cbnz	r0, 80043b0 <__swbuf_r+0x90>
 800438c:	4638      	mov	r0, r7
 800438e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004390:	4b0a      	ldr	r3, [pc, #40]	; (80043bc <__swbuf_r+0x9c>)
 8004392:	429c      	cmp	r4, r3
 8004394:	d101      	bne.n	800439a <__swbuf_r+0x7a>
 8004396:	68ac      	ldr	r4, [r5, #8]
 8004398:	e7cf      	b.n	800433a <__swbuf_r+0x1a>
 800439a:	4b09      	ldr	r3, [pc, #36]	; (80043c0 <__swbuf_r+0xa0>)
 800439c:	429c      	cmp	r4, r3
 800439e:	bf08      	it	eq
 80043a0:	68ec      	ldreq	r4, [r5, #12]
 80043a2:	e7ca      	b.n	800433a <__swbuf_r+0x1a>
 80043a4:	4621      	mov	r1, r4
 80043a6:	4628      	mov	r0, r5
 80043a8:	f000 f80c 	bl	80043c4 <__swsetup_r>
 80043ac:	2800      	cmp	r0, #0
 80043ae:	d0cb      	beq.n	8004348 <__swbuf_r+0x28>
 80043b0:	f04f 37ff 	mov.w	r7, #4294967295
 80043b4:	e7ea      	b.n	800438c <__swbuf_r+0x6c>
 80043b6:	bf00      	nop
 80043b8:	080052ac 	.word	0x080052ac
 80043bc:	080052cc 	.word	0x080052cc
 80043c0:	0800528c 	.word	0x0800528c

080043c4 <__swsetup_r>:
 80043c4:	4b32      	ldr	r3, [pc, #200]	; (8004490 <__swsetup_r+0xcc>)
 80043c6:	b570      	push	{r4, r5, r6, lr}
 80043c8:	681d      	ldr	r5, [r3, #0]
 80043ca:	4606      	mov	r6, r0
 80043cc:	460c      	mov	r4, r1
 80043ce:	b125      	cbz	r5, 80043da <__swsetup_r+0x16>
 80043d0:	69ab      	ldr	r3, [r5, #24]
 80043d2:	b913      	cbnz	r3, 80043da <__swsetup_r+0x16>
 80043d4:	4628      	mov	r0, r5
 80043d6:	f000 f97d 	bl	80046d4 <__sinit>
 80043da:	4b2e      	ldr	r3, [pc, #184]	; (8004494 <__swsetup_r+0xd0>)
 80043dc:	429c      	cmp	r4, r3
 80043de:	d10f      	bne.n	8004400 <__swsetup_r+0x3c>
 80043e0:	686c      	ldr	r4, [r5, #4]
 80043e2:	89a3      	ldrh	r3, [r4, #12]
 80043e4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80043e8:	0719      	lsls	r1, r3, #28
 80043ea:	d42c      	bmi.n	8004446 <__swsetup_r+0x82>
 80043ec:	06dd      	lsls	r5, r3, #27
 80043ee:	d411      	bmi.n	8004414 <__swsetup_r+0x50>
 80043f0:	2309      	movs	r3, #9
 80043f2:	6033      	str	r3, [r6, #0]
 80043f4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80043f8:	81a3      	strh	r3, [r4, #12]
 80043fa:	f04f 30ff 	mov.w	r0, #4294967295
 80043fe:	e03e      	b.n	800447e <__swsetup_r+0xba>
 8004400:	4b25      	ldr	r3, [pc, #148]	; (8004498 <__swsetup_r+0xd4>)
 8004402:	429c      	cmp	r4, r3
 8004404:	d101      	bne.n	800440a <__swsetup_r+0x46>
 8004406:	68ac      	ldr	r4, [r5, #8]
 8004408:	e7eb      	b.n	80043e2 <__swsetup_r+0x1e>
 800440a:	4b24      	ldr	r3, [pc, #144]	; (800449c <__swsetup_r+0xd8>)
 800440c:	429c      	cmp	r4, r3
 800440e:	bf08      	it	eq
 8004410:	68ec      	ldreq	r4, [r5, #12]
 8004412:	e7e6      	b.n	80043e2 <__swsetup_r+0x1e>
 8004414:	0758      	lsls	r0, r3, #29
 8004416:	d512      	bpl.n	800443e <__swsetup_r+0x7a>
 8004418:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800441a:	b141      	cbz	r1, 800442e <__swsetup_r+0x6a>
 800441c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004420:	4299      	cmp	r1, r3
 8004422:	d002      	beq.n	800442a <__swsetup_r+0x66>
 8004424:	4630      	mov	r0, r6
 8004426:	f000 fa5b 	bl	80048e0 <_free_r>
 800442a:	2300      	movs	r3, #0
 800442c:	6363      	str	r3, [r4, #52]	; 0x34
 800442e:	89a3      	ldrh	r3, [r4, #12]
 8004430:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004434:	81a3      	strh	r3, [r4, #12]
 8004436:	2300      	movs	r3, #0
 8004438:	6063      	str	r3, [r4, #4]
 800443a:	6923      	ldr	r3, [r4, #16]
 800443c:	6023      	str	r3, [r4, #0]
 800443e:	89a3      	ldrh	r3, [r4, #12]
 8004440:	f043 0308 	orr.w	r3, r3, #8
 8004444:	81a3      	strh	r3, [r4, #12]
 8004446:	6923      	ldr	r3, [r4, #16]
 8004448:	b94b      	cbnz	r3, 800445e <__swsetup_r+0x9a>
 800444a:	89a3      	ldrh	r3, [r4, #12]
 800444c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004450:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004454:	d003      	beq.n	800445e <__swsetup_r+0x9a>
 8004456:	4621      	mov	r1, r4
 8004458:	4630      	mov	r0, r6
 800445a:	f000 fa01 	bl	8004860 <__smakebuf_r>
 800445e:	89a0      	ldrh	r0, [r4, #12]
 8004460:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004464:	f010 0301 	ands.w	r3, r0, #1
 8004468:	d00a      	beq.n	8004480 <__swsetup_r+0xbc>
 800446a:	2300      	movs	r3, #0
 800446c:	60a3      	str	r3, [r4, #8]
 800446e:	6963      	ldr	r3, [r4, #20]
 8004470:	425b      	negs	r3, r3
 8004472:	61a3      	str	r3, [r4, #24]
 8004474:	6923      	ldr	r3, [r4, #16]
 8004476:	b943      	cbnz	r3, 800448a <__swsetup_r+0xc6>
 8004478:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800447c:	d1ba      	bne.n	80043f4 <__swsetup_r+0x30>
 800447e:	bd70      	pop	{r4, r5, r6, pc}
 8004480:	0781      	lsls	r1, r0, #30
 8004482:	bf58      	it	pl
 8004484:	6963      	ldrpl	r3, [r4, #20]
 8004486:	60a3      	str	r3, [r4, #8]
 8004488:	e7f4      	b.n	8004474 <__swsetup_r+0xb0>
 800448a:	2000      	movs	r0, #0
 800448c:	e7f7      	b.n	800447e <__swsetup_r+0xba>
 800448e:	bf00      	nop
 8004490:	2000000c 	.word	0x2000000c
 8004494:	080052ac 	.word	0x080052ac
 8004498:	080052cc 	.word	0x080052cc
 800449c:	0800528c 	.word	0x0800528c

080044a0 <__sflush_r>:
 80044a0:	898a      	ldrh	r2, [r1, #12]
 80044a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80044a6:	4605      	mov	r5, r0
 80044a8:	0710      	lsls	r0, r2, #28
 80044aa:	460c      	mov	r4, r1
 80044ac:	d458      	bmi.n	8004560 <__sflush_r+0xc0>
 80044ae:	684b      	ldr	r3, [r1, #4]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	dc05      	bgt.n	80044c0 <__sflush_r+0x20>
 80044b4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	dc02      	bgt.n	80044c0 <__sflush_r+0x20>
 80044ba:	2000      	movs	r0, #0
 80044bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80044c0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80044c2:	2e00      	cmp	r6, #0
 80044c4:	d0f9      	beq.n	80044ba <__sflush_r+0x1a>
 80044c6:	2300      	movs	r3, #0
 80044c8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80044cc:	682f      	ldr	r7, [r5, #0]
 80044ce:	602b      	str	r3, [r5, #0]
 80044d0:	d032      	beq.n	8004538 <__sflush_r+0x98>
 80044d2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80044d4:	89a3      	ldrh	r3, [r4, #12]
 80044d6:	075a      	lsls	r2, r3, #29
 80044d8:	d505      	bpl.n	80044e6 <__sflush_r+0x46>
 80044da:	6863      	ldr	r3, [r4, #4]
 80044dc:	1ac0      	subs	r0, r0, r3
 80044de:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80044e0:	b10b      	cbz	r3, 80044e6 <__sflush_r+0x46>
 80044e2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80044e4:	1ac0      	subs	r0, r0, r3
 80044e6:	2300      	movs	r3, #0
 80044e8:	4602      	mov	r2, r0
 80044ea:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80044ec:	6a21      	ldr	r1, [r4, #32]
 80044ee:	4628      	mov	r0, r5
 80044f0:	47b0      	blx	r6
 80044f2:	1c43      	adds	r3, r0, #1
 80044f4:	89a3      	ldrh	r3, [r4, #12]
 80044f6:	d106      	bne.n	8004506 <__sflush_r+0x66>
 80044f8:	6829      	ldr	r1, [r5, #0]
 80044fa:	291d      	cmp	r1, #29
 80044fc:	d82c      	bhi.n	8004558 <__sflush_r+0xb8>
 80044fe:	4a2a      	ldr	r2, [pc, #168]	; (80045a8 <__sflush_r+0x108>)
 8004500:	40ca      	lsrs	r2, r1
 8004502:	07d6      	lsls	r6, r2, #31
 8004504:	d528      	bpl.n	8004558 <__sflush_r+0xb8>
 8004506:	2200      	movs	r2, #0
 8004508:	6062      	str	r2, [r4, #4]
 800450a:	04d9      	lsls	r1, r3, #19
 800450c:	6922      	ldr	r2, [r4, #16]
 800450e:	6022      	str	r2, [r4, #0]
 8004510:	d504      	bpl.n	800451c <__sflush_r+0x7c>
 8004512:	1c42      	adds	r2, r0, #1
 8004514:	d101      	bne.n	800451a <__sflush_r+0x7a>
 8004516:	682b      	ldr	r3, [r5, #0]
 8004518:	b903      	cbnz	r3, 800451c <__sflush_r+0x7c>
 800451a:	6560      	str	r0, [r4, #84]	; 0x54
 800451c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800451e:	602f      	str	r7, [r5, #0]
 8004520:	2900      	cmp	r1, #0
 8004522:	d0ca      	beq.n	80044ba <__sflush_r+0x1a>
 8004524:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004528:	4299      	cmp	r1, r3
 800452a:	d002      	beq.n	8004532 <__sflush_r+0x92>
 800452c:	4628      	mov	r0, r5
 800452e:	f000 f9d7 	bl	80048e0 <_free_r>
 8004532:	2000      	movs	r0, #0
 8004534:	6360      	str	r0, [r4, #52]	; 0x34
 8004536:	e7c1      	b.n	80044bc <__sflush_r+0x1c>
 8004538:	6a21      	ldr	r1, [r4, #32]
 800453a:	2301      	movs	r3, #1
 800453c:	4628      	mov	r0, r5
 800453e:	47b0      	blx	r6
 8004540:	1c41      	adds	r1, r0, #1
 8004542:	d1c7      	bne.n	80044d4 <__sflush_r+0x34>
 8004544:	682b      	ldr	r3, [r5, #0]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d0c4      	beq.n	80044d4 <__sflush_r+0x34>
 800454a:	2b1d      	cmp	r3, #29
 800454c:	d001      	beq.n	8004552 <__sflush_r+0xb2>
 800454e:	2b16      	cmp	r3, #22
 8004550:	d101      	bne.n	8004556 <__sflush_r+0xb6>
 8004552:	602f      	str	r7, [r5, #0]
 8004554:	e7b1      	b.n	80044ba <__sflush_r+0x1a>
 8004556:	89a3      	ldrh	r3, [r4, #12]
 8004558:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800455c:	81a3      	strh	r3, [r4, #12]
 800455e:	e7ad      	b.n	80044bc <__sflush_r+0x1c>
 8004560:	690f      	ldr	r7, [r1, #16]
 8004562:	2f00      	cmp	r7, #0
 8004564:	d0a9      	beq.n	80044ba <__sflush_r+0x1a>
 8004566:	0793      	lsls	r3, r2, #30
 8004568:	680e      	ldr	r6, [r1, #0]
 800456a:	bf08      	it	eq
 800456c:	694b      	ldreq	r3, [r1, #20]
 800456e:	600f      	str	r7, [r1, #0]
 8004570:	bf18      	it	ne
 8004572:	2300      	movne	r3, #0
 8004574:	eba6 0807 	sub.w	r8, r6, r7
 8004578:	608b      	str	r3, [r1, #8]
 800457a:	f1b8 0f00 	cmp.w	r8, #0
 800457e:	dd9c      	ble.n	80044ba <__sflush_r+0x1a>
 8004580:	6a21      	ldr	r1, [r4, #32]
 8004582:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004584:	4643      	mov	r3, r8
 8004586:	463a      	mov	r2, r7
 8004588:	4628      	mov	r0, r5
 800458a:	47b0      	blx	r6
 800458c:	2800      	cmp	r0, #0
 800458e:	dc06      	bgt.n	800459e <__sflush_r+0xfe>
 8004590:	89a3      	ldrh	r3, [r4, #12]
 8004592:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004596:	81a3      	strh	r3, [r4, #12]
 8004598:	f04f 30ff 	mov.w	r0, #4294967295
 800459c:	e78e      	b.n	80044bc <__sflush_r+0x1c>
 800459e:	4407      	add	r7, r0
 80045a0:	eba8 0800 	sub.w	r8, r8, r0
 80045a4:	e7e9      	b.n	800457a <__sflush_r+0xda>
 80045a6:	bf00      	nop
 80045a8:	20400001 	.word	0x20400001

080045ac <_fflush_r>:
 80045ac:	b538      	push	{r3, r4, r5, lr}
 80045ae:	690b      	ldr	r3, [r1, #16]
 80045b0:	4605      	mov	r5, r0
 80045b2:	460c      	mov	r4, r1
 80045b4:	b913      	cbnz	r3, 80045bc <_fflush_r+0x10>
 80045b6:	2500      	movs	r5, #0
 80045b8:	4628      	mov	r0, r5
 80045ba:	bd38      	pop	{r3, r4, r5, pc}
 80045bc:	b118      	cbz	r0, 80045c6 <_fflush_r+0x1a>
 80045be:	6983      	ldr	r3, [r0, #24]
 80045c0:	b90b      	cbnz	r3, 80045c6 <_fflush_r+0x1a>
 80045c2:	f000 f887 	bl	80046d4 <__sinit>
 80045c6:	4b14      	ldr	r3, [pc, #80]	; (8004618 <_fflush_r+0x6c>)
 80045c8:	429c      	cmp	r4, r3
 80045ca:	d11b      	bne.n	8004604 <_fflush_r+0x58>
 80045cc:	686c      	ldr	r4, [r5, #4]
 80045ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d0ef      	beq.n	80045b6 <_fflush_r+0xa>
 80045d6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80045d8:	07d0      	lsls	r0, r2, #31
 80045da:	d404      	bmi.n	80045e6 <_fflush_r+0x3a>
 80045dc:	0599      	lsls	r1, r3, #22
 80045de:	d402      	bmi.n	80045e6 <_fflush_r+0x3a>
 80045e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80045e2:	f000 f915 	bl	8004810 <__retarget_lock_acquire_recursive>
 80045e6:	4628      	mov	r0, r5
 80045e8:	4621      	mov	r1, r4
 80045ea:	f7ff ff59 	bl	80044a0 <__sflush_r>
 80045ee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80045f0:	07da      	lsls	r2, r3, #31
 80045f2:	4605      	mov	r5, r0
 80045f4:	d4e0      	bmi.n	80045b8 <_fflush_r+0xc>
 80045f6:	89a3      	ldrh	r3, [r4, #12]
 80045f8:	059b      	lsls	r3, r3, #22
 80045fa:	d4dd      	bmi.n	80045b8 <_fflush_r+0xc>
 80045fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80045fe:	f000 f908 	bl	8004812 <__retarget_lock_release_recursive>
 8004602:	e7d9      	b.n	80045b8 <_fflush_r+0xc>
 8004604:	4b05      	ldr	r3, [pc, #20]	; (800461c <_fflush_r+0x70>)
 8004606:	429c      	cmp	r4, r3
 8004608:	d101      	bne.n	800460e <_fflush_r+0x62>
 800460a:	68ac      	ldr	r4, [r5, #8]
 800460c:	e7df      	b.n	80045ce <_fflush_r+0x22>
 800460e:	4b04      	ldr	r3, [pc, #16]	; (8004620 <_fflush_r+0x74>)
 8004610:	429c      	cmp	r4, r3
 8004612:	bf08      	it	eq
 8004614:	68ec      	ldreq	r4, [r5, #12]
 8004616:	e7da      	b.n	80045ce <_fflush_r+0x22>
 8004618:	080052ac 	.word	0x080052ac
 800461c:	080052cc 	.word	0x080052cc
 8004620:	0800528c 	.word	0x0800528c

08004624 <std>:
 8004624:	2300      	movs	r3, #0
 8004626:	b510      	push	{r4, lr}
 8004628:	4604      	mov	r4, r0
 800462a:	e9c0 3300 	strd	r3, r3, [r0]
 800462e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004632:	6083      	str	r3, [r0, #8]
 8004634:	8181      	strh	r1, [r0, #12]
 8004636:	6643      	str	r3, [r0, #100]	; 0x64
 8004638:	81c2      	strh	r2, [r0, #14]
 800463a:	6183      	str	r3, [r0, #24]
 800463c:	4619      	mov	r1, r3
 800463e:	2208      	movs	r2, #8
 8004640:	305c      	adds	r0, #92	; 0x5c
 8004642:	f7ff fdd7 	bl	80041f4 <memset>
 8004646:	4b05      	ldr	r3, [pc, #20]	; (800465c <std+0x38>)
 8004648:	6263      	str	r3, [r4, #36]	; 0x24
 800464a:	4b05      	ldr	r3, [pc, #20]	; (8004660 <std+0x3c>)
 800464c:	62a3      	str	r3, [r4, #40]	; 0x28
 800464e:	4b05      	ldr	r3, [pc, #20]	; (8004664 <std+0x40>)
 8004650:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004652:	4b05      	ldr	r3, [pc, #20]	; (8004668 <std+0x44>)
 8004654:	6224      	str	r4, [r4, #32]
 8004656:	6323      	str	r3, [r4, #48]	; 0x30
 8004658:	bd10      	pop	{r4, pc}
 800465a:	bf00      	nop
 800465c:	0800509d 	.word	0x0800509d
 8004660:	080050bf 	.word	0x080050bf
 8004664:	080050f7 	.word	0x080050f7
 8004668:	0800511b 	.word	0x0800511b

0800466c <_cleanup_r>:
 800466c:	4901      	ldr	r1, [pc, #4]	; (8004674 <_cleanup_r+0x8>)
 800466e:	f000 b8af 	b.w	80047d0 <_fwalk_reent>
 8004672:	bf00      	nop
 8004674:	080045ad 	.word	0x080045ad

08004678 <__sfmoreglue>:
 8004678:	b570      	push	{r4, r5, r6, lr}
 800467a:	2268      	movs	r2, #104	; 0x68
 800467c:	1e4d      	subs	r5, r1, #1
 800467e:	4355      	muls	r5, r2
 8004680:	460e      	mov	r6, r1
 8004682:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004686:	f000 f997 	bl	80049b8 <_malloc_r>
 800468a:	4604      	mov	r4, r0
 800468c:	b140      	cbz	r0, 80046a0 <__sfmoreglue+0x28>
 800468e:	2100      	movs	r1, #0
 8004690:	e9c0 1600 	strd	r1, r6, [r0]
 8004694:	300c      	adds	r0, #12
 8004696:	60a0      	str	r0, [r4, #8]
 8004698:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800469c:	f7ff fdaa 	bl	80041f4 <memset>
 80046a0:	4620      	mov	r0, r4
 80046a2:	bd70      	pop	{r4, r5, r6, pc}

080046a4 <__sfp_lock_acquire>:
 80046a4:	4801      	ldr	r0, [pc, #4]	; (80046ac <__sfp_lock_acquire+0x8>)
 80046a6:	f000 b8b3 	b.w	8004810 <__retarget_lock_acquire_recursive>
 80046aa:	bf00      	nop
 80046ac:	2000097d 	.word	0x2000097d

080046b0 <__sfp_lock_release>:
 80046b0:	4801      	ldr	r0, [pc, #4]	; (80046b8 <__sfp_lock_release+0x8>)
 80046b2:	f000 b8ae 	b.w	8004812 <__retarget_lock_release_recursive>
 80046b6:	bf00      	nop
 80046b8:	2000097d 	.word	0x2000097d

080046bc <__sinit_lock_acquire>:
 80046bc:	4801      	ldr	r0, [pc, #4]	; (80046c4 <__sinit_lock_acquire+0x8>)
 80046be:	f000 b8a7 	b.w	8004810 <__retarget_lock_acquire_recursive>
 80046c2:	bf00      	nop
 80046c4:	2000097e 	.word	0x2000097e

080046c8 <__sinit_lock_release>:
 80046c8:	4801      	ldr	r0, [pc, #4]	; (80046d0 <__sinit_lock_release+0x8>)
 80046ca:	f000 b8a2 	b.w	8004812 <__retarget_lock_release_recursive>
 80046ce:	bf00      	nop
 80046d0:	2000097e 	.word	0x2000097e

080046d4 <__sinit>:
 80046d4:	b510      	push	{r4, lr}
 80046d6:	4604      	mov	r4, r0
 80046d8:	f7ff fff0 	bl	80046bc <__sinit_lock_acquire>
 80046dc:	69a3      	ldr	r3, [r4, #24]
 80046de:	b11b      	cbz	r3, 80046e8 <__sinit+0x14>
 80046e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80046e4:	f7ff bff0 	b.w	80046c8 <__sinit_lock_release>
 80046e8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80046ec:	6523      	str	r3, [r4, #80]	; 0x50
 80046ee:	4b13      	ldr	r3, [pc, #76]	; (800473c <__sinit+0x68>)
 80046f0:	4a13      	ldr	r2, [pc, #76]	; (8004740 <__sinit+0x6c>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	62a2      	str	r2, [r4, #40]	; 0x28
 80046f6:	42a3      	cmp	r3, r4
 80046f8:	bf04      	itt	eq
 80046fa:	2301      	moveq	r3, #1
 80046fc:	61a3      	streq	r3, [r4, #24]
 80046fe:	4620      	mov	r0, r4
 8004700:	f000 f820 	bl	8004744 <__sfp>
 8004704:	6060      	str	r0, [r4, #4]
 8004706:	4620      	mov	r0, r4
 8004708:	f000 f81c 	bl	8004744 <__sfp>
 800470c:	60a0      	str	r0, [r4, #8]
 800470e:	4620      	mov	r0, r4
 8004710:	f000 f818 	bl	8004744 <__sfp>
 8004714:	2200      	movs	r2, #0
 8004716:	60e0      	str	r0, [r4, #12]
 8004718:	2104      	movs	r1, #4
 800471a:	6860      	ldr	r0, [r4, #4]
 800471c:	f7ff ff82 	bl	8004624 <std>
 8004720:	68a0      	ldr	r0, [r4, #8]
 8004722:	2201      	movs	r2, #1
 8004724:	2109      	movs	r1, #9
 8004726:	f7ff ff7d 	bl	8004624 <std>
 800472a:	68e0      	ldr	r0, [r4, #12]
 800472c:	2202      	movs	r2, #2
 800472e:	2112      	movs	r1, #18
 8004730:	f7ff ff78 	bl	8004624 <std>
 8004734:	2301      	movs	r3, #1
 8004736:	61a3      	str	r3, [r4, #24]
 8004738:	e7d2      	b.n	80046e0 <__sinit+0xc>
 800473a:	bf00      	nop
 800473c:	08005288 	.word	0x08005288
 8004740:	0800466d 	.word	0x0800466d

08004744 <__sfp>:
 8004744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004746:	4607      	mov	r7, r0
 8004748:	f7ff ffac 	bl	80046a4 <__sfp_lock_acquire>
 800474c:	4b1e      	ldr	r3, [pc, #120]	; (80047c8 <__sfp+0x84>)
 800474e:	681e      	ldr	r6, [r3, #0]
 8004750:	69b3      	ldr	r3, [r6, #24]
 8004752:	b913      	cbnz	r3, 800475a <__sfp+0x16>
 8004754:	4630      	mov	r0, r6
 8004756:	f7ff ffbd 	bl	80046d4 <__sinit>
 800475a:	3648      	adds	r6, #72	; 0x48
 800475c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004760:	3b01      	subs	r3, #1
 8004762:	d503      	bpl.n	800476c <__sfp+0x28>
 8004764:	6833      	ldr	r3, [r6, #0]
 8004766:	b30b      	cbz	r3, 80047ac <__sfp+0x68>
 8004768:	6836      	ldr	r6, [r6, #0]
 800476a:	e7f7      	b.n	800475c <__sfp+0x18>
 800476c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004770:	b9d5      	cbnz	r5, 80047a8 <__sfp+0x64>
 8004772:	4b16      	ldr	r3, [pc, #88]	; (80047cc <__sfp+0x88>)
 8004774:	60e3      	str	r3, [r4, #12]
 8004776:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800477a:	6665      	str	r5, [r4, #100]	; 0x64
 800477c:	f000 f847 	bl	800480e <__retarget_lock_init_recursive>
 8004780:	f7ff ff96 	bl	80046b0 <__sfp_lock_release>
 8004784:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004788:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800478c:	6025      	str	r5, [r4, #0]
 800478e:	61a5      	str	r5, [r4, #24]
 8004790:	2208      	movs	r2, #8
 8004792:	4629      	mov	r1, r5
 8004794:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004798:	f7ff fd2c 	bl	80041f4 <memset>
 800479c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80047a0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80047a4:	4620      	mov	r0, r4
 80047a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80047a8:	3468      	adds	r4, #104	; 0x68
 80047aa:	e7d9      	b.n	8004760 <__sfp+0x1c>
 80047ac:	2104      	movs	r1, #4
 80047ae:	4638      	mov	r0, r7
 80047b0:	f7ff ff62 	bl	8004678 <__sfmoreglue>
 80047b4:	4604      	mov	r4, r0
 80047b6:	6030      	str	r0, [r6, #0]
 80047b8:	2800      	cmp	r0, #0
 80047ba:	d1d5      	bne.n	8004768 <__sfp+0x24>
 80047bc:	f7ff ff78 	bl	80046b0 <__sfp_lock_release>
 80047c0:	230c      	movs	r3, #12
 80047c2:	603b      	str	r3, [r7, #0]
 80047c4:	e7ee      	b.n	80047a4 <__sfp+0x60>
 80047c6:	bf00      	nop
 80047c8:	08005288 	.word	0x08005288
 80047cc:	ffff0001 	.word	0xffff0001

080047d0 <_fwalk_reent>:
 80047d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80047d4:	4606      	mov	r6, r0
 80047d6:	4688      	mov	r8, r1
 80047d8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80047dc:	2700      	movs	r7, #0
 80047de:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80047e2:	f1b9 0901 	subs.w	r9, r9, #1
 80047e6:	d505      	bpl.n	80047f4 <_fwalk_reent+0x24>
 80047e8:	6824      	ldr	r4, [r4, #0]
 80047ea:	2c00      	cmp	r4, #0
 80047ec:	d1f7      	bne.n	80047de <_fwalk_reent+0xe>
 80047ee:	4638      	mov	r0, r7
 80047f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80047f4:	89ab      	ldrh	r3, [r5, #12]
 80047f6:	2b01      	cmp	r3, #1
 80047f8:	d907      	bls.n	800480a <_fwalk_reent+0x3a>
 80047fa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80047fe:	3301      	adds	r3, #1
 8004800:	d003      	beq.n	800480a <_fwalk_reent+0x3a>
 8004802:	4629      	mov	r1, r5
 8004804:	4630      	mov	r0, r6
 8004806:	47c0      	blx	r8
 8004808:	4307      	orrs	r7, r0
 800480a:	3568      	adds	r5, #104	; 0x68
 800480c:	e7e9      	b.n	80047e2 <_fwalk_reent+0x12>

0800480e <__retarget_lock_init_recursive>:
 800480e:	4770      	bx	lr

08004810 <__retarget_lock_acquire_recursive>:
 8004810:	4770      	bx	lr

08004812 <__retarget_lock_release_recursive>:
 8004812:	4770      	bx	lr

08004814 <__swhatbuf_r>:
 8004814:	b570      	push	{r4, r5, r6, lr}
 8004816:	460e      	mov	r6, r1
 8004818:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800481c:	2900      	cmp	r1, #0
 800481e:	b096      	sub	sp, #88	; 0x58
 8004820:	4614      	mov	r4, r2
 8004822:	461d      	mov	r5, r3
 8004824:	da08      	bge.n	8004838 <__swhatbuf_r+0x24>
 8004826:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800482a:	2200      	movs	r2, #0
 800482c:	602a      	str	r2, [r5, #0]
 800482e:	061a      	lsls	r2, r3, #24
 8004830:	d410      	bmi.n	8004854 <__swhatbuf_r+0x40>
 8004832:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004836:	e00e      	b.n	8004856 <__swhatbuf_r+0x42>
 8004838:	466a      	mov	r2, sp
 800483a:	f000 fc95 	bl	8005168 <_fstat_r>
 800483e:	2800      	cmp	r0, #0
 8004840:	dbf1      	blt.n	8004826 <__swhatbuf_r+0x12>
 8004842:	9a01      	ldr	r2, [sp, #4]
 8004844:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004848:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800484c:	425a      	negs	r2, r3
 800484e:	415a      	adcs	r2, r3
 8004850:	602a      	str	r2, [r5, #0]
 8004852:	e7ee      	b.n	8004832 <__swhatbuf_r+0x1e>
 8004854:	2340      	movs	r3, #64	; 0x40
 8004856:	2000      	movs	r0, #0
 8004858:	6023      	str	r3, [r4, #0]
 800485a:	b016      	add	sp, #88	; 0x58
 800485c:	bd70      	pop	{r4, r5, r6, pc}
	...

08004860 <__smakebuf_r>:
 8004860:	898b      	ldrh	r3, [r1, #12]
 8004862:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004864:	079d      	lsls	r5, r3, #30
 8004866:	4606      	mov	r6, r0
 8004868:	460c      	mov	r4, r1
 800486a:	d507      	bpl.n	800487c <__smakebuf_r+0x1c>
 800486c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004870:	6023      	str	r3, [r4, #0]
 8004872:	6123      	str	r3, [r4, #16]
 8004874:	2301      	movs	r3, #1
 8004876:	6163      	str	r3, [r4, #20]
 8004878:	b002      	add	sp, #8
 800487a:	bd70      	pop	{r4, r5, r6, pc}
 800487c:	ab01      	add	r3, sp, #4
 800487e:	466a      	mov	r2, sp
 8004880:	f7ff ffc8 	bl	8004814 <__swhatbuf_r>
 8004884:	9900      	ldr	r1, [sp, #0]
 8004886:	4605      	mov	r5, r0
 8004888:	4630      	mov	r0, r6
 800488a:	f000 f895 	bl	80049b8 <_malloc_r>
 800488e:	b948      	cbnz	r0, 80048a4 <__smakebuf_r+0x44>
 8004890:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004894:	059a      	lsls	r2, r3, #22
 8004896:	d4ef      	bmi.n	8004878 <__smakebuf_r+0x18>
 8004898:	f023 0303 	bic.w	r3, r3, #3
 800489c:	f043 0302 	orr.w	r3, r3, #2
 80048a0:	81a3      	strh	r3, [r4, #12]
 80048a2:	e7e3      	b.n	800486c <__smakebuf_r+0xc>
 80048a4:	4b0d      	ldr	r3, [pc, #52]	; (80048dc <__smakebuf_r+0x7c>)
 80048a6:	62b3      	str	r3, [r6, #40]	; 0x28
 80048a8:	89a3      	ldrh	r3, [r4, #12]
 80048aa:	6020      	str	r0, [r4, #0]
 80048ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048b0:	81a3      	strh	r3, [r4, #12]
 80048b2:	9b00      	ldr	r3, [sp, #0]
 80048b4:	6163      	str	r3, [r4, #20]
 80048b6:	9b01      	ldr	r3, [sp, #4]
 80048b8:	6120      	str	r0, [r4, #16]
 80048ba:	b15b      	cbz	r3, 80048d4 <__smakebuf_r+0x74>
 80048bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80048c0:	4630      	mov	r0, r6
 80048c2:	f000 fc63 	bl	800518c <_isatty_r>
 80048c6:	b128      	cbz	r0, 80048d4 <__smakebuf_r+0x74>
 80048c8:	89a3      	ldrh	r3, [r4, #12]
 80048ca:	f023 0303 	bic.w	r3, r3, #3
 80048ce:	f043 0301 	orr.w	r3, r3, #1
 80048d2:	81a3      	strh	r3, [r4, #12]
 80048d4:	89a0      	ldrh	r0, [r4, #12]
 80048d6:	4305      	orrs	r5, r0
 80048d8:	81a5      	strh	r5, [r4, #12]
 80048da:	e7cd      	b.n	8004878 <__smakebuf_r+0x18>
 80048dc:	0800466d 	.word	0x0800466d

080048e0 <_free_r>:
 80048e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80048e2:	2900      	cmp	r1, #0
 80048e4:	d044      	beq.n	8004970 <_free_r+0x90>
 80048e6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80048ea:	9001      	str	r0, [sp, #4]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	f1a1 0404 	sub.w	r4, r1, #4
 80048f2:	bfb8      	it	lt
 80048f4:	18e4      	addlt	r4, r4, r3
 80048f6:	f000 fc6b 	bl	80051d0 <__malloc_lock>
 80048fa:	4a1e      	ldr	r2, [pc, #120]	; (8004974 <_free_r+0x94>)
 80048fc:	9801      	ldr	r0, [sp, #4]
 80048fe:	6813      	ldr	r3, [r2, #0]
 8004900:	b933      	cbnz	r3, 8004910 <_free_r+0x30>
 8004902:	6063      	str	r3, [r4, #4]
 8004904:	6014      	str	r4, [r2, #0]
 8004906:	b003      	add	sp, #12
 8004908:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800490c:	f000 bc66 	b.w	80051dc <__malloc_unlock>
 8004910:	42a3      	cmp	r3, r4
 8004912:	d908      	bls.n	8004926 <_free_r+0x46>
 8004914:	6825      	ldr	r5, [r4, #0]
 8004916:	1961      	adds	r1, r4, r5
 8004918:	428b      	cmp	r3, r1
 800491a:	bf01      	itttt	eq
 800491c:	6819      	ldreq	r1, [r3, #0]
 800491e:	685b      	ldreq	r3, [r3, #4]
 8004920:	1949      	addeq	r1, r1, r5
 8004922:	6021      	streq	r1, [r4, #0]
 8004924:	e7ed      	b.n	8004902 <_free_r+0x22>
 8004926:	461a      	mov	r2, r3
 8004928:	685b      	ldr	r3, [r3, #4]
 800492a:	b10b      	cbz	r3, 8004930 <_free_r+0x50>
 800492c:	42a3      	cmp	r3, r4
 800492e:	d9fa      	bls.n	8004926 <_free_r+0x46>
 8004930:	6811      	ldr	r1, [r2, #0]
 8004932:	1855      	adds	r5, r2, r1
 8004934:	42a5      	cmp	r5, r4
 8004936:	d10b      	bne.n	8004950 <_free_r+0x70>
 8004938:	6824      	ldr	r4, [r4, #0]
 800493a:	4421      	add	r1, r4
 800493c:	1854      	adds	r4, r2, r1
 800493e:	42a3      	cmp	r3, r4
 8004940:	6011      	str	r1, [r2, #0]
 8004942:	d1e0      	bne.n	8004906 <_free_r+0x26>
 8004944:	681c      	ldr	r4, [r3, #0]
 8004946:	685b      	ldr	r3, [r3, #4]
 8004948:	6053      	str	r3, [r2, #4]
 800494a:	4421      	add	r1, r4
 800494c:	6011      	str	r1, [r2, #0]
 800494e:	e7da      	b.n	8004906 <_free_r+0x26>
 8004950:	d902      	bls.n	8004958 <_free_r+0x78>
 8004952:	230c      	movs	r3, #12
 8004954:	6003      	str	r3, [r0, #0]
 8004956:	e7d6      	b.n	8004906 <_free_r+0x26>
 8004958:	6825      	ldr	r5, [r4, #0]
 800495a:	1961      	adds	r1, r4, r5
 800495c:	428b      	cmp	r3, r1
 800495e:	bf04      	itt	eq
 8004960:	6819      	ldreq	r1, [r3, #0]
 8004962:	685b      	ldreq	r3, [r3, #4]
 8004964:	6063      	str	r3, [r4, #4]
 8004966:	bf04      	itt	eq
 8004968:	1949      	addeq	r1, r1, r5
 800496a:	6021      	streq	r1, [r4, #0]
 800496c:	6054      	str	r4, [r2, #4]
 800496e:	e7ca      	b.n	8004906 <_free_r+0x26>
 8004970:	b003      	add	sp, #12
 8004972:	bd30      	pop	{r4, r5, pc}
 8004974:	20000980 	.word	0x20000980

08004978 <sbrk_aligned>:
 8004978:	b570      	push	{r4, r5, r6, lr}
 800497a:	4e0e      	ldr	r6, [pc, #56]	; (80049b4 <sbrk_aligned+0x3c>)
 800497c:	460c      	mov	r4, r1
 800497e:	6831      	ldr	r1, [r6, #0]
 8004980:	4605      	mov	r5, r0
 8004982:	b911      	cbnz	r1, 800498a <sbrk_aligned+0x12>
 8004984:	f000 fb7a 	bl	800507c <_sbrk_r>
 8004988:	6030      	str	r0, [r6, #0]
 800498a:	4621      	mov	r1, r4
 800498c:	4628      	mov	r0, r5
 800498e:	f000 fb75 	bl	800507c <_sbrk_r>
 8004992:	1c43      	adds	r3, r0, #1
 8004994:	d00a      	beq.n	80049ac <sbrk_aligned+0x34>
 8004996:	1cc4      	adds	r4, r0, #3
 8004998:	f024 0403 	bic.w	r4, r4, #3
 800499c:	42a0      	cmp	r0, r4
 800499e:	d007      	beq.n	80049b0 <sbrk_aligned+0x38>
 80049a0:	1a21      	subs	r1, r4, r0
 80049a2:	4628      	mov	r0, r5
 80049a4:	f000 fb6a 	bl	800507c <_sbrk_r>
 80049a8:	3001      	adds	r0, #1
 80049aa:	d101      	bne.n	80049b0 <sbrk_aligned+0x38>
 80049ac:	f04f 34ff 	mov.w	r4, #4294967295
 80049b0:	4620      	mov	r0, r4
 80049b2:	bd70      	pop	{r4, r5, r6, pc}
 80049b4:	20000984 	.word	0x20000984

080049b8 <_malloc_r>:
 80049b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80049bc:	1ccd      	adds	r5, r1, #3
 80049be:	f025 0503 	bic.w	r5, r5, #3
 80049c2:	3508      	adds	r5, #8
 80049c4:	2d0c      	cmp	r5, #12
 80049c6:	bf38      	it	cc
 80049c8:	250c      	movcc	r5, #12
 80049ca:	2d00      	cmp	r5, #0
 80049cc:	4607      	mov	r7, r0
 80049ce:	db01      	blt.n	80049d4 <_malloc_r+0x1c>
 80049d0:	42a9      	cmp	r1, r5
 80049d2:	d905      	bls.n	80049e0 <_malloc_r+0x28>
 80049d4:	230c      	movs	r3, #12
 80049d6:	603b      	str	r3, [r7, #0]
 80049d8:	2600      	movs	r6, #0
 80049da:	4630      	mov	r0, r6
 80049dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80049e0:	4e2e      	ldr	r6, [pc, #184]	; (8004a9c <_malloc_r+0xe4>)
 80049e2:	f000 fbf5 	bl	80051d0 <__malloc_lock>
 80049e6:	6833      	ldr	r3, [r6, #0]
 80049e8:	461c      	mov	r4, r3
 80049ea:	bb34      	cbnz	r4, 8004a3a <_malloc_r+0x82>
 80049ec:	4629      	mov	r1, r5
 80049ee:	4638      	mov	r0, r7
 80049f0:	f7ff ffc2 	bl	8004978 <sbrk_aligned>
 80049f4:	1c43      	adds	r3, r0, #1
 80049f6:	4604      	mov	r4, r0
 80049f8:	d14d      	bne.n	8004a96 <_malloc_r+0xde>
 80049fa:	6834      	ldr	r4, [r6, #0]
 80049fc:	4626      	mov	r6, r4
 80049fe:	2e00      	cmp	r6, #0
 8004a00:	d140      	bne.n	8004a84 <_malloc_r+0xcc>
 8004a02:	6823      	ldr	r3, [r4, #0]
 8004a04:	4631      	mov	r1, r6
 8004a06:	4638      	mov	r0, r7
 8004a08:	eb04 0803 	add.w	r8, r4, r3
 8004a0c:	f000 fb36 	bl	800507c <_sbrk_r>
 8004a10:	4580      	cmp	r8, r0
 8004a12:	d13a      	bne.n	8004a8a <_malloc_r+0xd2>
 8004a14:	6821      	ldr	r1, [r4, #0]
 8004a16:	3503      	adds	r5, #3
 8004a18:	1a6d      	subs	r5, r5, r1
 8004a1a:	f025 0503 	bic.w	r5, r5, #3
 8004a1e:	3508      	adds	r5, #8
 8004a20:	2d0c      	cmp	r5, #12
 8004a22:	bf38      	it	cc
 8004a24:	250c      	movcc	r5, #12
 8004a26:	4629      	mov	r1, r5
 8004a28:	4638      	mov	r0, r7
 8004a2a:	f7ff ffa5 	bl	8004978 <sbrk_aligned>
 8004a2e:	3001      	adds	r0, #1
 8004a30:	d02b      	beq.n	8004a8a <_malloc_r+0xd2>
 8004a32:	6823      	ldr	r3, [r4, #0]
 8004a34:	442b      	add	r3, r5
 8004a36:	6023      	str	r3, [r4, #0]
 8004a38:	e00e      	b.n	8004a58 <_malloc_r+0xa0>
 8004a3a:	6822      	ldr	r2, [r4, #0]
 8004a3c:	1b52      	subs	r2, r2, r5
 8004a3e:	d41e      	bmi.n	8004a7e <_malloc_r+0xc6>
 8004a40:	2a0b      	cmp	r2, #11
 8004a42:	d916      	bls.n	8004a72 <_malloc_r+0xba>
 8004a44:	1961      	adds	r1, r4, r5
 8004a46:	42a3      	cmp	r3, r4
 8004a48:	6025      	str	r5, [r4, #0]
 8004a4a:	bf18      	it	ne
 8004a4c:	6059      	strne	r1, [r3, #4]
 8004a4e:	6863      	ldr	r3, [r4, #4]
 8004a50:	bf08      	it	eq
 8004a52:	6031      	streq	r1, [r6, #0]
 8004a54:	5162      	str	r2, [r4, r5]
 8004a56:	604b      	str	r3, [r1, #4]
 8004a58:	4638      	mov	r0, r7
 8004a5a:	f104 060b 	add.w	r6, r4, #11
 8004a5e:	f000 fbbd 	bl	80051dc <__malloc_unlock>
 8004a62:	f026 0607 	bic.w	r6, r6, #7
 8004a66:	1d23      	adds	r3, r4, #4
 8004a68:	1af2      	subs	r2, r6, r3
 8004a6a:	d0b6      	beq.n	80049da <_malloc_r+0x22>
 8004a6c:	1b9b      	subs	r3, r3, r6
 8004a6e:	50a3      	str	r3, [r4, r2]
 8004a70:	e7b3      	b.n	80049da <_malloc_r+0x22>
 8004a72:	6862      	ldr	r2, [r4, #4]
 8004a74:	42a3      	cmp	r3, r4
 8004a76:	bf0c      	ite	eq
 8004a78:	6032      	streq	r2, [r6, #0]
 8004a7a:	605a      	strne	r2, [r3, #4]
 8004a7c:	e7ec      	b.n	8004a58 <_malloc_r+0xa0>
 8004a7e:	4623      	mov	r3, r4
 8004a80:	6864      	ldr	r4, [r4, #4]
 8004a82:	e7b2      	b.n	80049ea <_malloc_r+0x32>
 8004a84:	4634      	mov	r4, r6
 8004a86:	6876      	ldr	r6, [r6, #4]
 8004a88:	e7b9      	b.n	80049fe <_malloc_r+0x46>
 8004a8a:	230c      	movs	r3, #12
 8004a8c:	603b      	str	r3, [r7, #0]
 8004a8e:	4638      	mov	r0, r7
 8004a90:	f000 fba4 	bl	80051dc <__malloc_unlock>
 8004a94:	e7a1      	b.n	80049da <_malloc_r+0x22>
 8004a96:	6025      	str	r5, [r4, #0]
 8004a98:	e7de      	b.n	8004a58 <_malloc_r+0xa0>
 8004a9a:	bf00      	nop
 8004a9c:	20000980 	.word	0x20000980

08004aa0 <__sfputc_r>:
 8004aa0:	6893      	ldr	r3, [r2, #8]
 8004aa2:	3b01      	subs	r3, #1
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	b410      	push	{r4}
 8004aa8:	6093      	str	r3, [r2, #8]
 8004aaa:	da08      	bge.n	8004abe <__sfputc_r+0x1e>
 8004aac:	6994      	ldr	r4, [r2, #24]
 8004aae:	42a3      	cmp	r3, r4
 8004ab0:	db01      	blt.n	8004ab6 <__sfputc_r+0x16>
 8004ab2:	290a      	cmp	r1, #10
 8004ab4:	d103      	bne.n	8004abe <__sfputc_r+0x1e>
 8004ab6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004aba:	f7ff bc31 	b.w	8004320 <__swbuf_r>
 8004abe:	6813      	ldr	r3, [r2, #0]
 8004ac0:	1c58      	adds	r0, r3, #1
 8004ac2:	6010      	str	r0, [r2, #0]
 8004ac4:	7019      	strb	r1, [r3, #0]
 8004ac6:	4608      	mov	r0, r1
 8004ac8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004acc:	4770      	bx	lr

08004ace <__sfputs_r>:
 8004ace:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ad0:	4606      	mov	r6, r0
 8004ad2:	460f      	mov	r7, r1
 8004ad4:	4614      	mov	r4, r2
 8004ad6:	18d5      	adds	r5, r2, r3
 8004ad8:	42ac      	cmp	r4, r5
 8004ada:	d101      	bne.n	8004ae0 <__sfputs_r+0x12>
 8004adc:	2000      	movs	r0, #0
 8004ade:	e007      	b.n	8004af0 <__sfputs_r+0x22>
 8004ae0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ae4:	463a      	mov	r2, r7
 8004ae6:	4630      	mov	r0, r6
 8004ae8:	f7ff ffda 	bl	8004aa0 <__sfputc_r>
 8004aec:	1c43      	adds	r3, r0, #1
 8004aee:	d1f3      	bne.n	8004ad8 <__sfputs_r+0xa>
 8004af0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004af4 <_vfiprintf_r>:
 8004af4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004af8:	460d      	mov	r5, r1
 8004afa:	b09d      	sub	sp, #116	; 0x74
 8004afc:	4614      	mov	r4, r2
 8004afe:	4698      	mov	r8, r3
 8004b00:	4606      	mov	r6, r0
 8004b02:	b118      	cbz	r0, 8004b0c <_vfiprintf_r+0x18>
 8004b04:	6983      	ldr	r3, [r0, #24]
 8004b06:	b90b      	cbnz	r3, 8004b0c <_vfiprintf_r+0x18>
 8004b08:	f7ff fde4 	bl	80046d4 <__sinit>
 8004b0c:	4b89      	ldr	r3, [pc, #548]	; (8004d34 <_vfiprintf_r+0x240>)
 8004b0e:	429d      	cmp	r5, r3
 8004b10:	d11b      	bne.n	8004b4a <_vfiprintf_r+0x56>
 8004b12:	6875      	ldr	r5, [r6, #4]
 8004b14:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004b16:	07d9      	lsls	r1, r3, #31
 8004b18:	d405      	bmi.n	8004b26 <_vfiprintf_r+0x32>
 8004b1a:	89ab      	ldrh	r3, [r5, #12]
 8004b1c:	059a      	lsls	r2, r3, #22
 8004b1e:	d402      	bmi.n	8004b26 <_vfiprintf_r+0x32>
 8004b20:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004b22:	f7ff fe75 	bl	8004810 <__retarget_lock_acquire_recursive>
 8004b26:	89ab      	ldrh	r3, [r5, #12]
 8004b28:	071b      	lsls	r3, r3, #28
 8004b2a:	d501      	bpl.n	8004b30 <_vfiprintf_r+0x3c>
 8004b2c:	692b      	ldr	r3, [r5, #16]
 8004b2e:	b9eb      	cbnz	r3, 8004b6c <_vfiprintf_r+0x78>
 8004b30:	4629      	mov	r1, r5
 8004b32:	4630      	mov	r0, r6
 8004b34:	f7ff fc46 	bl	80043c4 <__swsetup_r>
 8004b38:	b1c0      	cbz	r0, 8004b6c <_vfiprintf_r+0x78>
 8004b3a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004b3c:	07dc      	lsls	r4, r3, #31
 8004b3e:	d50e      	bpl.n	8004b5e <_vfiprintf_r+0x6a>
 8004b40:	f04f 30ff 	mov.w	r0, #4294967295
 8004b44:	b01d      	add	sp, #116	; 0x74
 8004b46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b4a:	4b7b      	ldr	r3, [pc, #492]	; (8004d38 <_vfiprintf_r+0x244>)
 8004b4c:	429d      	cmp	r5, r3
 8004b4e:	d101      	bne.n	8004b54 <_vfiprintf_r+0x60>
 8004b50:	68b5      	ldr	r5, [r6, #8]
 8004b52:	e7df      	b.n	8004b14 <_vfiprintf_r+0x20>
 8004b54:	4b79      	ldr	r3, [pc, #484]	; (8004d3c <_vfiprintf_r+0x248>)
 8004b56:	429d      	cmp	r5, r3
 8004b58:	bf08      	it	eq
 8004b5a:	68f5      	ldreq	r5, [r6, #12]
 8004b5c:	e7da      	b.n	8004b14 <_vfiprintf_r+0x20>
 8004b5e:	89ab      	ldrh	r3, [r5, #12]
 8004b60:	0598      	lsls	r0, r3, #22
 8004b62:	d4ed      	bmi.n	8004b40 <_vfiprintf_r+0x4c>
 8004b64:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004b66:	f7ff fe54 	bl	8004812 <__retarget_lock_release_recursive>
 8004b6a:	e7e9      	b.n	8004b40 <_vfiprintf_r+0x4c>
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	9309      	str	r3, [sp, #36]	; 0x24
 8004b70:	2320      	movs	r3, #32
 8004b72:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004b76:	f8cd 800c 	str.w	r8, [sp, #12]
 8004b7a:	2330      	movs	r3, #48	; 0x30
 8004b7c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8004d40 <_vfiprintf_r+0x24c>
 8004b80:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004b84:	f04f 0901 	mov.w	r9, #1
 8004b88:	4623      	mov	r3, r4
 8004b8a:	469a      	mov	sl, r3
 8004b8c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004b90:	b10a      	cbz	r2, 8004b96 <_vfiprintf_r+0xa2>
 8004b92:	2a25      	cmp	r2, #37	; 0x25
 8004b94:	d1f9      	bne.n	8004b8a <_vfiprintf_r+0x96>
 8004b96:	ebba 0b04 	subs.w	fp, sl, r4
 8004b9a:	d00b      	beq.n	8004bb4 <_vfiprintf_r+0xc0>
 8004b9c:	465b      	mov	r3, fp
 8004b9e:	4622      	mov	r2, r4
 8004ba0:	4629      	mov	r1, r5
 8004ba2:	4630      	mov	r0, r6
 8004ba4:	f7ff ff93 	bl	8004ace <__sfputs_r>
 8004ba8:	3001      	adds	r0, #1
 8004baa:	f000 80aa 	beq.w	8004d02 <_vfiprintf_r+0x20e>
 8004bae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004bb0:	445a      	add	r2, fp
 8004bb2:	9209      	str	r2, [sp, #36]	; 0x24
 8004bb4:	f89a 3000 	ldrb.w	r3, [sl]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	f000 80a2 	beq.w	8004d02 <_vfiprintf_r+0x20e>
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	f04f 32ff 	mov.w	r2, #4294967295
 8004bc4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004bc8:	f10a 0a01 	add.w	sl, sl, #1
 8004bcc:	9304      	str	r3, [sp, #16]
 8004bce:	9307      	str	r3, [sp, #28]
 8004bd0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004bd4:	931a      	str	r3, [sp, #104]	; 0x68
 8004bd6:	4654      	mov	r4, sl
 8004bd8:	2205      	movs	r2, #5
 8004bda:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004bde:	4858      	ldr	r0, [pc, #352]	; (8004d40 <_vfiprintf_r+0x24c>)
 8004be0:	f7fb fb1e 	bl	8000220 <memchr>
 8004be4:	9a04      	ldr	r2, [sp, #16]
 8004be6:	b9d8      	cbnz	r0, 8004c20 <_vfiprintf_r+0x12c>
 8004be8:	06d1      	lsls	r1, r2, #27
 8004bea:	bf44      	itt	mi
 8004bec:	2320      	movmi	r3, #32
 8004bee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004bf2:	0713      	lsls	r3, r2, #28
 8004bf4:	bf44      	itt	mi
 8004bf6:	232b      	movmi	r3, #43	; 0x2b
 8004bf8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004bfc:	f89a 3000 	ldrb.w	r3, [sl]
 8004c00:	2b2a      	cmp	r3, #42	; 0x2a
 8004c02:	d015      	beq.n	8004c30 <_vfiprintf_r+0x13c>
 8004c04:	9a07      	ldr	r2, [sp, #28]
 8004c06:	4654      	mov	r4, sl
 8004c08:	2000      	movs	r0, #0
 8004c0a:	f04f 0c0a 	mov.w	ip, #10
 8004c0e:	4621      	mov	r1, r4
 8004c10:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004c14:	3b30      	subs	r3, #48	; 0x30
 8004c16:	2b09      	cmp	r3, #9
 8004c18:	d94e      	bls.n	8004cb8 <_vfiprintf_r+0x1c4>
 8004c1a:	b1b0      	cbz	r0, 8004c4a <_vfiprintf_r+0x156>
 8004c1c:	9207      	str	r2, [sp, #28]
 8004c1e:	e014      	b.n	8004c4a <_vfiprintf_r+0x156>
 8004c20:	eba0 0308 	sub.w	r3, r0, r8
 8004c24:	fa09 f303 	lsl.w	r3, r9, r3
 8004c28:	4313      	orrs	r3, r2
 8004c2a:	9304      	str	r3, [sp, #16]
 8004c2c:	46a2      	mov	sl, r4
 8004c2e:	e7d2      	b.n	8004bd6 <_vfiprintf_r+0xe2>
 8004c30:	9b03      	ldr	r3, [sp, #12]
 8004c32:	1d19      	adds	r1, r3, #4
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	9103      	str	r1, [sp, #12]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	bfbb      	ittet	lt
 8004c3c:	425b      	neglt	r3, r3
 8004c3e:	f042 0202 	orrlt.w	r2, r2, #2
 8004c42:	9307      	strge	r3, [sp, #28]
 8004c44:	9307      	strlt	r3, [sp, #28]
 8004c46:	bfb8      	it	lt
 8004c48:	9204      	strlt	r2, [sp, #16]
 8004c4a:	7823      	ldrb	r3, [r4, #0]
 8004c4c:	2b2e      	cmp	r3, #46	; 0x2e
 8004c4e:	d10c      	bne.n	8004c6a <_vfiprintf_r+0x176>
 8004c50:	7863      	ldrb	r3, [r4, #1]
 8004c52:	2b2a      	cmp	r3, #42	; 0x2a
 8004c54:	d135      	bne.n	8004cc2 <_vfiprintf_r+0x1ce>
 8004c56:	9b03      	ldr	r3, [sp, #12]
 8004c58:	1d1a      	adds	r2, r3, #4
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	9203      	str	r2, [sp, #12]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	bfb8      	it	lt
 8004c62:	f04f 33ff 	movlt.w	r3, #4294967295
 8004c66:	3402      	adds	r4, #2
 8004c68:	9305      	str	r3, [sp, #20]
 8004c6a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8004d50 <_vfiprintf_r+0x25c>
 8004c6e:	7821      	ldrb	r1, [r4, #0]
 8004c70:	2203      	movs	r2, #3
 8004c72:	4650      	mov	r0, sl
 8004c74:	f7fb fad4 	bl	8000220 <memchr>
 8004c78:	b140      	cbz	r0, 8004c8c <_vfiprintf_r+0x198>
 8004c7a:	2340      	movs	r3, #64	; 0x40
 8004c7c:	eba0 000a 	sub.w	r0, r0, sl
 8004c80:	fa03 f000 	lsl.w	r0, r3, r0
 8004c84:	9b04      	ldr	r3, [sp, #16]
 8004c86:	4303      	orrs	r3, r0
 8004c88:	3401      	adds	r4, #1
 8004c8a:	9304      	str	r3, [sp, #16]
 8004c8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004c90:	482c      	ldr	r0, [pc, #176]	; (8004d44 <_vfiprintf_r+0x250>)
 8004c92:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004c96:	2206      	movs	r2, #6
 8004c98:	f7fb fac2 	bl	8000220 <memchr>
 8004c9c:	2800      	cmp	r0, #0
 8004c9e:	d03f      	beq.n	8004d20 <_vfiprintf_r+0x22c>
 8004ca0:	4b29      	ldr	r3, [pc, #164]	; (8004d48 <_vfiprintf_r+0x254>)
 8004ca2:	bb1b      	cbnz	r3, 8004cec <_vfiprintf_r+0x1f8>
 8004ca4:	9b03      	ldr	r3, [sp, #12]
 8004ca6:	3307      	adds	r3, #7
 8004ca8:	f023 0307 	bic.w	r3, r3, #7
 8004cac:	3308      	adds	r3, #8
 8004cae:	9303      	str	r3, [sp, #12]
 8004cb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004cb2:	443b      	add	r3, r7
 8004cb4:	9309      	str	r3, [sp, #36]	; 0x24
 8004cb6:	e767      	b.n	8004b88 <_vfiprintf_r+0x94>
 8004cb8:	fb0c 3202 	mla	r2, ip, r2, r3
 8004cbc:	460c      	mov	r4, r1
 8004cbe:	2001      	movs	r0, #1
 8004cc0:	e7a5      	b.n	8004c0e <_vfiprintf_r+0x11a>
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	3401      	adds	r4, #1
 8004cc6:	9305      	str	r3, [sp, #20]
 8004cc8:	4619      	mov	r1, r3
 8004cca:	f04f 0c0a 	mov.w	ip, #10
 8004cce:	4620      	mov	r0, r4
 8004cd0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004cd4:	3a30      	subs	r2, #48	; 0x30
 8004cd6:	2a09      	cmp	r2, #9
 8004cd8:	d903      	bls.n	8004ce2 <_vfiprintf_r+0x1ee>
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d0c5      	beq.n	8004c6a <_vfiprintf_r+0x176>
 8004cde:	9105      	str	r1, [sp, #20]
 8004ce0:	e7c3      	b.n	8004c6a <_vfiprintf_r+0x176>
 8004ce2:	fb0c 2101 	mla	r1, ip, r1, r2
 8004ce6:	4604      	mov	r4, r0
 8004ce8:	2301      	movs	r3, #1
 8004cea:	e7f0      	b.n	8004cce <_vfiprintf_r+0x1da>
 8004cec:	ab03      	add	r3, sp, #12
 8004cee:	9300      	str	r3, [sp, #0]
 8004cf0:	462a      	mov	r2, r5
 8004cf2:	4b16      	ldr	r3, [pc, #88]	; (8004d4c <_vfiprintf_r+0x258>)
 8004cf4:	a904      	add	r1, sp, #16
 8004cf6:	4630      	mov	r0, r6
 8004cf8:	f3af 8000 	nop.w
 8004cfc:	4607      	mov	r7, r0
 8004cfe:	1c78      	adds	r0, r7, #1
 8004d00:	d1d6      	bne.n	8004cb0 <_vfiprintf_r+0x1bc>
 8004d02:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004d04:	07d9      	lsls	r1, r3, #31
 8004d06:	d405      	bmi.n	8004d14 <_vfiprintf_r+0x220>
 8004d08:	89ab      	ldrh	r3, [r5, #12]
 8004d0a:	059a      	lsls	r2, r3, #22
 8004d0c:	d402      	bmi.n	8004d14 <_vfiprintf_r+0x220>
 8004d0e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004d10:	f7ff fd7f 	bl	8004812 <__retarget_lock_release_recursive>
 8004d14:	89ab      	ldrh	r3, [r5, #12]
 8004d16:	065b      	lsls	r3, r3, #25
 8004d18:	f53f af12 	bmi.w	8004b40 <_vfiprintf_r+0x4c>
 8004d1c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004d1e:	e711      	b.n	8004b44 <_vfiprintf_r+0x50>
 8004d20:	ab03      	add	r3, sp, #12
 8004d22:	9300      	str	r3, [sp, #0]
 8004d24:	462a      	mov	r2, r5
 8004d26:	4b09      	ldr	r3, [pc, #36]	; (8004d4c <_vfiprintf_r+0x258>)
 8004d28:	a904      	add	r1, sp, #16
 8004d2a:	4630      	mov	r0, r6
 8004d2c:	f000 f880 	bl	8004e30 <_printf_i>
 8004d30:	e7e4      	b.n	8004cfc <_vfiprintf_r+0x208>
 8004d32:	bf00      	nop
 8004d34:	080052ac 	.word	0x080052ac
 8004d38:	080052cc 	.word	0x080052cc
 8004d3c:	0800528c 	.word	0x0800528c
 8004d40:	080052ec 	.word	0x080052ec
 8004d44:	080052f6 	.word	0x080052f6
 8004d48:	00000000 	.word	0x00000000
 8004d4c:	08004acf 	.word	0x08004acf
 8004d50:	080052f2 	.word	0x080052f2

08004d54 <_printf_common>:
 8004d54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d58:	4616      	mov	r6, r2
 8004d5a:	4699      	mov	r9, r3
 8004d5c:	688a      	ldr	r2, [r1, #8]
 8004d5e:	690b      	ldr	r3, [r1, #16]
 8004d60:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004d64:	4293      	cmp	r3, r2
 8004d66:	bfb8      	it	lt
 8004d68:	4613      	movlt	r3, r2
 8004d6a:	6033      	str	r3, [r6, #0]
 8004d6c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004d70:	4607      	mov	r7, r0
 8004d72:	460c      	mov	r4, r1
 8004d74:	b10a      	cbz	r2, 8004d7a <_printf_common+0x26>
 8004d76:	3301      	adds	r3, #1
 8004d78:	6033      	str	r3, [r6, #0]
 8004d7a:	6823      	ldr	r3, [r4, #0]
 8004d7c:	0699      	lsls	r1, r3, #26
 8004d7e:	bf42      	ittt	mi
 8004d80:	6833      	ldrmi	r3, [r6, #0]
 8004d82:	3302      	addmi	r3, #2
 8004d84:	6033      	strmi	r3, [r6, #0]
 8004d86:	6825      	ldr	r5, [r4, #0]
 8004d88:	f015 0506 	ands.w	r5, r5, #6
 8004d8c:	d106      	bne.n	8004d9c <_printf_common+0x48>
 8004d8e:	f104 0a19 	add.w	sl, r4, #25
 8004d92:	68e3      	ldr	r3, [r4, #12]
 8004d94:	6832      	ldr	r2, [r6, #0]
 8004d96:	1a9b      	subs	r3, r3, r2
 8004d98:	42ab      	cmp	r3, r5
 8004d9a:	dc26      	bgt.n	8004dea <_printf_common+0x96>
 8004d9c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004da0:	1e13      	subs	r3, r2, #0
 8004da2:	6822      	ldr	r2, [r4, #0]
 8004da4:	bf18      	it	ne
 8004da6:	2301      	movne	r3, #1
 8004da8:	0692      	lsls	r2, r2, #26
 8004daa:	d42b      	bmi.n	8004e04 <_printf_common+0xb0>
 8004dac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004db0:	4649      	mov	r1, r9
 8004db2:	4638      	mov	r0, r7
 8004db4:	47c0      	blx	r8
 8004db6:	3001      	adds	r0, #1
 8004db8:	d01e      	beq.n	8004df8 <_printf_common+0xa4>
 8004dba:	6823      	ldr	r3, [r4, #0]
 8004dbc:	68e5      	ldr	r5, [r4, #12]
 8004dbe:	6832      	ldr	r2, [r6, #0]
 8004dc0:	f003 0306 	and.w	r3, r3, #6
 8004dc4:	2b04      	cmp	r3, #4
 8004dc6:	bf08      	it	eq
 8004dc8:	1aad      	subeq	r5, r5, r2
 8004dca:	68a3      	ldr	r3, [r4, #8]
 8004dcc:	6922      	ldr	r2, [r4, #16]
 8004dce:	bf0c      	ite	eq
 8004dd0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004dd4:	2500      	movne	r5, #0
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	bfc4      	itt	gt
 8004dda:	1a9b      	subgt	r3, r3, r2
 8004ddc:	18ed      	addgt	r5, r5, r3
 8004dde:	2600      	movs	r6, #0
 8004de0:	341a      	adds	r4, #26
 8004de2:	42b5      	cmp	r5, r6
 8004de4:	d11a      	bne.n	8004e1c <_printf_common+0xc8>
 8004de6:	2000      	movs	r0, #0
 8004de8:	e008      	b.n	8004dfc <_printf_common+0xa8>
 8004dea:	2301      	movs	r3, #1
 8004dec:	4652      	mov	r2, sl
 8004dee:	4649      	mov	r1, r9
 8004df0:	4638      	mov	r0, r7
 8004df2:	47c0      	blx	r8
 8004df4:	3001      	adds	r0, #1
 8004df6:	d103      	bne.n	8004e00 <_printf_common+0xac>
 8004df8:	f04f 30ff 	mov.w	r0, #4294967295
 8004dfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e00:	3501      	adds	r5, #1
 8004e02:	e7c6      	b.n	8004d92 <_printf_common+0x3e>
 8004e04:	18e1      	adds	r1, r4, r3
 8004e06:	1c5a      	adds	r2, r3, #1
 8004e08:	2030      	movs	r0, #48	; 0x30
 8004e0a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004e0e:	4422      	add	r2, r4
 8004e10:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004e14:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004e18:	3302      	adds	r3, #2
 8004e1a:	e7c7      	b.n	8004dac <_printf_common+0x58>
 8004e1c:	2301      	movs	r3, #1
 8004e1e:	4622      	mov	r2, r4
 8004e20:	4649      	mov	r1, r9
 8004e22:	4638      	mov	r0, r7
 8004e24:	47c0      	blx	r8
 8004e26:	3001      	adds	r0, #1
 8004e28:	d0e6      	beq.n	8004df8 <_printf_common+0xa4>
 8004e2a:	3601      	adds	r6, #1
 8004e2c:	e7d9      	b.n	8004de2 <_printf_common+0x8e>
	...

08004e30 <_printf_i>:
 8004e30:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004e34:	7e0f      	ldrb	r7, [r1, #24]
 8004e36:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004e38:	2f78      	cmp	r7, #120	; 0x78
 8004e3a:	4691      	mov	r9, r2
 8004e3c:	4680      	mov	r8, r0
 8004e3e:	460c      	mov	r4, r1
 8004e40:	469a      	mov	sl, r3
 8004e42:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004e46:	d807      	bhi.n	8004e58 <_printf_i+0x28>
 8004e48:	2f62      	cmp	r7, #98	; 0x62
 8004e4a:	d80a      	bhi.n	8004e62 <_printf_i+0x32>
 8004e4c:	2f00      	cmp	r7, #0
 8004e4e:	f000 80d8 	beq.w	8005002 <_printf_i+0x1d2>
 8004e52:	2f58      	cmp	r7, #88	; 0x58
 8004e54:	f000 80a3 	beq.w	8004f9e <_printf_i+0x16e>
 8004e58:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004e5c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004e60:	e03a      	b.n	8004ed8 <_printf_i+0xa8>
 8004e62:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004e66:	2b15      	cmp	r3, #21
 8004e68:	d8f6      	bhi.n	8004e58 <_printf_i+0x28>
 8004e6a:	a101      	add	r1, pc, #4	; (adr r1, 8004e70 <_printf_i+0x40>)
 8004e6c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004e70:	08004ec9 	.word	0x08004ec9
 8004e74:	08004edd 	.word	0x08004edd
 8004e78:	08004e59 	.word	0x08004e59
 8004e7c:	08004e59 	.word	0x08004e59
 8004e80:	08004e59 	.word	0x08004e59
 8004e84:	08004e59 	.word	0x08004e59
 8004e88:	08004edd 	.word	0x08004edd
 8004e8c:	08004e59 	.word	0x08004e59
 8004e90:	08004e59 	.word	0x08004e59
 8004e94:	08004e59 	.word	0x08004e59
 8004e98:	08004e59 	.word	0x08004e59
 8004e9c:	08004fe9 	.word	0x08004fe9
 8004ea0:	08004f0d 	.word	0x08004f0d
 8004ea4:	08004fcb 	.word	0x08004fcb
 8004ea8:	08004e59 	.word	0x08004e59
 8004eac:	08004e59 	.word	0x08004e59
 8004eb0:	0800500b 	.word	0x0800500b
 8004eb4:	08004e59 	.word	0x08004e59
 8004eb8:	08004f0d 	.word	0x08004f0d
 8004ebc:	08004e59 	.word	0x08004e59
 8004ec0:	08004e59 	.word	0x08004e59
 8004ec4:	08004fd3 	.word	0x08004fd3
 8004ec8:	682b      	ldr	r3, [r5, #0]
 8004eca:	1d1a      	adds	r2, r3, #4
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	602a      	str	r2, [r5, #0]
 8004ed0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004ed4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004ed8:	2301      	movs	r3, #1
 8004eda:	e0a3      	b.n	8005024 <_printf_i+0x1f4>
 8004edc:	6820      	ldr	r0, [r4, #0]
 8004ede:	6829      	ldr	r1, [r5, #0]
 8004ee0:	0606      	lsls	r6, r0, #24
 8004ee2:	f101 0304 	add.w	r3, r1, #4
 8004ee6:	d50a      	bpl.n	8004efe <_printf_i+0xce>
 8004ee8:	680e      	ldr	r6, [r1, #0]
 8004eea:	602b      	str	r3, [r5, #0]
 8004eec:	2e00      	cmp	r6, #0
 8004eee:	da03      	bge.n	8004ef8 <_printf_i+0xc8>
 8004ef0:	232d      	movs	r3, #45	; 0x2d
 8004ef2:	4276      	negs	r6, r6
 8004ef4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ef8:	485e      	ldr	r0, [pc, #376]	; (8005074 <_printf_i+0x244>)
 8004efa:	230a      	movs	r3, #10
 8004efc:	e019      	b.n	8004f32 <_printf_i+0x102>
 8004efe:	680e      	ldr	r6, [r1, #0]
 8004f00:	602b      	str	r3, [r5, #0]
 8004f02:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004f06:	bf18      	it	ne
 8004f08:	b236      	sxthne	r6, r6
 8004f0a:	e7ef      	b.n	8004eec <_printf_i+0xbc>
 8004f0c:	682b      	ldr	r3, [r5, #0]
 8004f0e:	6820      	ldr	r0, [r4, #0]
 8004f10:	1d19      	adds	r1, r3, #4
 8004f12:	6029      	str	r1, [r5, #0]
 8004f14:	0601      	lsls	r1, r0, #24
 8004f16:	d501      	bpl.n	8004f1c <_printf_i+0xec>
 8004f18:	681e      	ldr	r6, [r3, #0]
 8004f1a:	e002      	b.n	8004f22 <_printf_i+0xf2>
 8004f1c:	0646      	lsls	r6, r0, #25
 8004f1e:	d5fb      	bpl.n	8004f18 <_printf_i+0xe8>
 8004f20:	881e      	ldrh	r6, [r3, #0]
 8004f22:	4854      	ldr	r0, [pc, #336]	; (8005074 <_printf_i+0x244>)
 8004f24:	2f6f      	cmp	r7, #111	; 0x6f
 8004f26:	bf0c      	ite	eq
 8004f28:	2308      	moveq	r3, #8
 8004f2a:	230a      	movne	r3, #10
 8004f2c:	2100      	movs	r1, #0
 8004f2e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004f32:	6865      	ldr	r5, [r4, #4]
 8004f34:	60a5      	str	r5, [r4, #8]
 8004f36:	2d00      	cmp	r5, #0
 8004f38:	bfa2      	ittt	ge
 8004f3a:	6821      	ldrge	r1, [r4, #0]
 8004f3c:	f021 0104 	bicge.w	r1, r1, #4
 8004f40:	6021      	strge	r1, [r4, #0]
 8004f42:	b90e      	cbnz	r6, 8004f48 <_printf_i+0x118>
 8004f44:	2d00      	cmp	r5, #0
 8004f46:	d04d      	beq.n	8004fe4 <_printf_i+0x1b4>
 8004f48:	4615      	mov	r5, r2
 8004f4a:	fbb6 f1f3 	udiv	r1, r6, r3
 8004f4e:	fb03 6711 	mls	r7, r3, r1, r6
 8004f52:	5dc7      	ldrb	r7, [r0, r7]
 8004f54:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004f58:	4637      	mov	r7, r6
 8004f5a:	42bb      	cmp	r3, r7
 8004f5c:	460e      	mov	r6, r1
 8004f5e:	d9f4      	bls.n	8004f4a <_printf_i+0x11a>
 8004f60:	2b08      	cmp	r3, #8
 8004f62:	d10b      	bne.n	8004f7c <_printf_i+0x14c>
 8004f64:	6823      	ldr	r3, [r4, #0]
 8004f66:	07de      	lsls	r6, r3, #31
 8004f68:	d508      	bpl.n	8004f7c <_printf_i+0x14c>
 8004f6a:	6923      	ldr	r3, [r4, #16]
 8004f6c:	6861      	ldr	r1, [r4, #4]
 8004f6e:	4299      	cmp	r1, r3
 8004f70:	bfde      	ittt	le
 8004f72:	2330      	movle	r3, #48	; 0x30
 8004f74:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004f78:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004f7c:	1b52      	subs	r2, r2, r5
 8004f7e:	6122      	str	r2, [r4, #16]
 8004f80:	f8cd a000 	str.w	sl, [sp]
 8004f84:	464b      	mov	r3, r9
 8004f86:	aa03      	add	r2, sp, #12
 8004f88:	4621      	mov	r1, r4
 8004f8a:	4640      	mov	r0, r8
 8004f8c:	f7ff fee2 	bl	8004d54 <_printf_common>
 8004f90:	3001      	adds	r0, #1
 8004f92:	d14c      	bne.n	800502e <_printf_i+0x1fe>
 8004f94:	f04f 30ff 	mov.w	r0, #4294967295
 8004f98:	b004      	add	sp, #16
 8004f9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f9e:	4835      	ldr	r0, [pc, #212]	; (8005074 <_printf_i+0x244>)
 8004fa0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004fa4:	6829      	ldr	r1, [r5, #0]
 8004fa6:	6823      	ldr	r3, [r4, #0]
 8004fa8:	f851 6b04 	ldr.w	r6, [r1], #4
 8004fac:	6029      	str	r1, [r5, #0]
 8004fae:	061d      	lsls	r5, r3, #24
 8004fb0:	d514      	bpl.n	8004fdc <_printf_i+0x1ac>
 8004fb2:	07df      	lsls	r7, r3, #31
 8004fb4:	bf44      	itt	mi
 8004fb6:	f043 0320 	orrmi.w	r3, r3, #32
 8004fba:	6023      	strmi	r3, [r4, #0]
 8004fbc:	b91e      	cbnz	r6, 8004fc6 <_printf_i+0x196>
 8004fbe:	6823      	ldr	r3, [r4, #0]
 8004fc0:	f023 0320 	bic.w	r3, r3, #32
 8004fc4:	6023      	str	r3, [r4, #0]
 8004fc6:	2310      	movs	r3, #16
 8004fc8:	e7b0      	b.n	8004f2c <_printf_i+0xfc>
 8004fca:	6823      	ldr	r3, [r4, #0]
 8004fcc:	f043 0320 	orr.w	r3, r3, #32
 8004fd0:	6023      	str	r3, [r4, #0]
 8004fd2:	2378      	movs	r3, #120	; 0x78
 8004fd4:	4828      	ldr	r0, [pc, #160]	; (8005078 <_printf_i+0x248>)
 8004fd6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004fda:	e7e3      	b.n	8004fa4 <_printf_i+0x174>
 8004fdc:	0659      	lsls	r1, r3, #25
 8004fde:	bf48      	it	mi
 8004fe0:	b2b6      	uxthmi	r6, r6
 8004fe2:	e7e6      	b.n	8004fb2 <_printf_i+0x182>
 8004fe4:	4615      	mov	r5, r2
 8004fe6:	e7bb      	b.n	8004f60 <_printf_i+0x130>
 8004fe8:	682b      	ldr	r3, [r5, #0]
 8004fea:	6826      	ldr	r6, [r4, #0]
 8004fec:	6961      	ldr	r1, [r4, #20]
 8004fee:	1d18      	adds	r0, r3, #4
 8004ff0:	6028      	str	r0, [r5, #0]
 8004ff2:	0635      	lsls	r5, r6, #24
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	d501      	bpl.n	8004ffc <_printf_i+0x1cc>
 8004ff8:	6019      	str	r1, [r3, #0]
 8004ffa:	e002      	b.n	8005002 <_printf_i+0x1d2>
 8004ffc:	0670      	lsls	r0, r6, #25
 8004ffe:	d5fb      	bpl.n	8004ff8 <_printf_i+0x1c8>
 8005000:	8019      	strh	r1, [r3, #0]
 8005002:	2300      	movs	r3, #0
 8005004:	6123      	str	r3, [r4, #16]
 8005006:	4615      	mov	r5, r2
 8005008:	e7ba      	b.n	8004f80 <_printf_i+0x150>
 800500a:	682b      	ldr	r3, [r5, #0]
 800500c:	1d1a      	adds	r2, r3, #4
 800500e:	602a      	str	r2, [r5, #0]
 8005010:	681d      	ldr	r5, [r3, #0]
 8005012:	6862      	ldr	r2, [r4, #4]
 8005014:	2100      	movs	r1, #0
 8005016:	4628      	mov	r0, r5
 8005018:	f7fb f902 	bl	8000220 <memchr>
 800501c:	b108      	cbz	r0, 8005022 <_printf_i+0x1f2>
 800501e:	1b40      	subs	r0, r0, r5
 8005020:	6060      	str	r0, [r4, #4]
 8005022:	6863      	ldr	r3, [r4, #4]
 8005024:	6123      	str	r3, [r4, #16]
 8005026:	2300      	movs	r3, #0
 8005028:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800502c:	e7a8      	b.n	8004f80 <_printf_i+0x150>
 800502e:	6923      	ldr	r3, [r4, #16]
 8005030:	462a      	mov	r2, r5
 8005032:	4649      	mov	r1, r9
 8005034:	4640      	mov	r0, r8
 8005036:	47d0      	blx	sl
 8005038:	3001      	adds	r0, #1
 800503a:	d0ab      	beq.n	8004f94 <_printf_i+0x164>
 800503c:	6823      	ldr	r3, [r4, #0]
 800503e:	079b      	lsls	r3, r3, #30
 8005040:	d413      	bmi.n	800506a <_printf_i+0x23a>
 8005042:	68e0      	ldr	r0, [r4, #12]
 8005044:	9b03      	ldr	r3, [sp, #12]
 8005046:	4298      	cmp	r0, r3
 8005048:	bfb8      	it	lt
 800504a:	4618      	movlt	r0, r3
 800504c:	e7a4      	b.n	8004f98 <_printf_i+0x168>
 800504e:	2301      	movs	r3, #1
 8005050:	4632      	mov	r2, r6
 8005052:	4649      	mov	r1, r9
 8005054:	4640      	mov	r0, r8
 8005056:	47d0      	blx	sl
 8005058:	3001      	adds	r0, #1
 800505a:	d09b      	beq.n	8004f94 <_printf_i+0x164>
 800505c:	3501      	adds	r5, #1
 800505e:	68e3      	ldr	r3, [r4, #12]
 8005060:	9903      	ldr	r1, [sp, #12]
 8005062:	1a5b      	subs	r3, r3, r1
 8005064:	42ab      	cmp	r3, r5
 8005066:	dcf2      	bgt.n	800504e <_printf_i+0x21e>
 8005068:	e7eb      	b.n	8005042 <_printf_i+0x212>
 800506a:	2500      	movs	r5, #0
 800506c:	f104 0619 	add.w	r6, r4, #25
 8005070:	e7f5      	b.n	800505e <_printf_i+0x22e>
 8005072:	bf00      	nop
 8005074:	080052fd 	.word	0x080052fd
 8005078:	0800530e 	.word	0x0800530e

0800507c <_sbrk_r>:
 800507c:	b538      	push	{r3, r4, r5, lr}
 800507e:	4d06      	ldr	r5, [pc, #24]	; (8005098 <_sbrk_r+0x1c>)
 8005080:	2300      	movs	r3, #0
 8005082:	4604      	mov	r4, r0
 8005084:	4608      	mov	r0, r1
 8005086:	602b      	str	r3, [r5, #0]
 8005088:	f7fb fe2a 	bl	8000ce0 <_sbrk>
 800508c:	1c43      	adds	r3, r0, #1
 800508e:	d102      	bne.n	8005096 <_sbrk_r+0x1a>
 8005090:	682b      	ldr	r3, [r5, #0]
 8005092:	b103      	cbz	r3, 8005096 <_sbrk_r+0x1a>
 8005094:	6023      	str	r3, [r4, #0]
 8005096:	bd38      	pop	{r3, r4, r5, pc}
 8005098:	20000988 	.word	0x20000988

0800509c <__sread>:
 800509c:	b510      	push	{r4, lr}
 800509e:	460c      	mov	r4, r1
 80050a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80050a4:	f000 f8a0 	bl	80051e8 <_read_r>
 80050a8:	2800      	cmp	r0, #0
 80050aa:	bfab      	itete	ge
 80050ac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80050ae:	89a3      	ldrhlt	r3, [r4, #12]
 80050b0:	181b      	addge	r3, r3, r0
 80050b2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80050b6:	bfac      	ite	ge
 80050b8:	6563      	strge	r3, [r4, #84]	; 0x54
 80050ba:	81a3      	strhlt	r3, [r4, #12]
 80050bc:	bd10      	pop	{r4, pc}

080050be <__swrite>:
 80050be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80050c2:	461f      	mov	r7, r3
 80050c4:	898b      	ldrh	r3, [r1, #12]
 80050c6:	05db      	lsls	r3, r3, #23
 80050c8:	4605      	mov	r5, r0
 80050ca:	460c      	mov	r4, r1
 80050cc:	4616      	mov	r6, r2
 80050ce:	d505      	bpl.n	80050dc <__swrite+0x1e>
 80050d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80050d4:	2302      	movs	r3, #2
 80050d6:	2200      	movs	r2, #0
 80050d8:	f000 f868 	bl	80051ac <_lseek_r>
 80050dc:	89a3      	ldrh	r3, [r4, #12]
 80050de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80050e2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80050e6:	81a3      	strh	r3, [r4, #12]
 80050e8:	4632      	mov	r2, r6
 80050ea:	463b      	mov	r3, r7
 80050ec:	4628      	mov	r0, r5
 80050ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80050f2:	f000 b817 	b.w	8005124 <_write_r>

080050f6 <__sseek>:
 80050f6:	b510      	push	{r4, lr}
 80050f8:	460c      	mov	r4, r1
 80050fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80050fe:	f000 f855 	bl	80051ac <_lseek_r>
 8005102:	1c43      	adds	r3, r0, #1
 8005104:	89a3      	ldrh	r3, [r4, #12]
 8005106:	bf15      	itete	ne
 8005108:	6560      	strne	r0, [r4, #84]	; 0x54
 800510a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800510e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005112:	81a3      	strheq	r3, [r4, #12]
 8005114:	bf18      	it	ne
 8005116:	81a3      	strhne	r3, [r4, #12]
 8005118:	bd10      	pop	{r4, pc}

0800511a <__sclose>:
 800511a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800511e:	f000 b813 	b.w	8005148 <_close_r>
	...

08005124 <_write_r>:
 8005124:	b538      	push	{r3, r4, r5, lr}
 8005126:	4d07      	ldr	r5, [pc, #28]	; (8005144 <_write_r+0x20>)
 8005128:	4604      	mov	r4, r0
 800512a:	4608      	mov	r0, r1
 800512c:	4611      	mov	r1, r2
 800512e:	2200      	movs	r2, #0
 8005130:	602a      	str	r2, [r5, #0]
 8005132:	461a      	mov	r2, r3
 8005134:	f7fb fd83 	bl	8000c3e <_write>
 8005138:	1c43      	adds	r3, r0, #1
 800513a:	d102      	bne.n	8005142 <_write_r+0x1e>
 800513c:	682b      	ldr	r3, [r5, #0]
 800513e:	b103      	cbz	r3, 8005142 <_write_r+0x1e>
 8005140:	6023      	str	r3, [r4, #0]
 8005142:	bd38      	pop	{r3, r4, r5, pc}
 8005144:	20000988 	.word	0x20000988

08005148 <_close_r>:
 8005148:	b538      	push	{r3, r4, r5, lr}
 800514a:	4d06      	ldr	r5, [pc, #24]	; (8005164 <_close_r+0x1c>)
 800514c:	2300      	movs	r3, #0
 800514e:	4604      	mov	r4, r0
 8005150:	4608      	mov	r0, r1
 8005152:	602b      	str	r3, [r5, #0]
 8005154:	f7fb fd8f 	bl	8000c76 <_close>
 8005158:	1c43      	adds	r3, r0, #1
 800515a:	d102      	bne.n	8005162 <_close_r+0x1a>
 800515c:	682b      	ldr	r3, [r5, #0]
 800515e:	b103      	cbz	r3, 8005162 <_close_r+0x1a>
 8005160:	6023      	str	r3, [r4, #0]
 8005162:	bd38      	pop	{r3, r4, r5, pc}
 8005164:	20000988 	.word	0x20000988

08005168 <_fstat_r>:
 8005168:	b538      	push	{r3, r4, r5, lr}
 800516a:	4d07      	ldr	r5, [pc, #28]	; (8005188 <_fstat_r+0x20>)
 800516c:	2300      	movs	r3, #0
 800516e:	4604      	mov	r4, r0
 8005170:	4608      	mov	r0, r1
 8005172:	4611      	mov	r1, r2
 8005174:	602b      	str	r3, [r5, #0]
 8005176:	f7fb fd8a 	bl	8000c8e <_fstat>
 800517a:	1c43      	adds	r3, r0, #1
 800517c:	d102      	bne.n	8005184 <_fstat_r+0x1c>
 800517e:	682b      	ldr	r3, [r5, #0]
 8005180:	b103      	cbz	r3, 8005184 <_fstat_r+0x1c>
 8005182:	6023      	str	r3, [r4, #0]
 8005184:	bd38      	pop	{r3, r4, r5, pc}
 8005186:	bf00      	nop
 8005188:	20000988 	.word	0x20000988

0800518c <_isatty_r>:
 800518c:	b538      	push	{r3, r4, r5, lr}
 800518e:	4d06      	ldr	r5, [pc, #24]	; (80051a8 <_isatty_r+0x1c>)
 8005190:	2300      	movs	r3, #0
 8005192:	4604      	mov	r4, r0
 8005194:	4608      	mov	r0, r1
 8005196:	602b      	str	r3, [r5, #0]
 8005198:	f7fb fd89 	bl	8000cae <_isatty>
 800519c:	1c43      	adds	r3, r0, #1
 800519e:	d102      	bne.n	80051a6 <_isatty_r+0x1a>
 80051a0:	682b      	ldr	r3, [r5, #0]
 80051a2:	b103      	cbz	r3, 80051a6 <_isatty_r+0x1a>
 80051a4:	6023      	str	r3, [r4, #0]
 80051a6:	bd38      	pop	{r3, r4, r5, pc}
 80051a8:	20000988 	.word	0x20000988

080051ac <_lseek_r>:
 80051ac:	b538      	push	{r3, r4, r5, lr}
 80051ae:	4d07      	ldr	r5, [pc, #28]	; (80051cc <_lseek_r+0x20>)
 80051b0:	4604      	mov	r4, r0
 80051b2:	4608      	mov	r0, r1
 80051b4:	4611      	mov	r1, r2
 80051b6:	2200      	movs	r2, #0
 80051b8:	602a      	str	r2, [r5, #0]
 80051ba:	461a      	mov	r2, r3
 80051bc:	f7fb fd82 	bl	8000cc4 <_lseek>
 80051c0:	1c43      	adds	r3, r0, #1
 80051c2:	d102      	bne.n	80051ca <_lseek_r+0x1e>
 80051c4:	682b      	ldr	r3, [r5, #0]
 80051c6:	b103      	cbz	r3, 80051ca <_lseek_r+0x1e>
 80051c8:	6023      	str	r3, [r4, #0]
 80051ca:	bd38      	pop	{r3, r4, r5, pc}
 80051cc:	20000988 	.word	0x20000988

080051d0 <__malloc_lock>:
 80051d0:	4801      	ldr	r0, [pc, #4]	; (80051d8 <__malloc_lock+0x8>)
 80051d2:	f7ff bb1d 	b.w	8004810 <__retarget_lock_acquire_recursive>
 80051d6:	bf00      	nop
 80051d8:	2000097c 	.word	0x2000097c

080051dc <__malloc_unlock>:
 80051dc:	4801      	ldr	r0, [pc, #4]	; (80051e4 <__malloc_unlock+0x8>)
 80051de:	f7ff bb18 	b.w	8004812 <__retarget_lock_release_recursive>
 80051e2:	bf00      	nop
 80051e4:	2000097c 	.word	0x2000097c

080051e8 <_read_r>:
 80051e8:	b538      	push	{r3, r4, r5, lr}
 80051ea:	4d07      	ldr	r5, [pc, #28]	; (8005208 <_read_r+0x20>)
 80051ec:	4604      	mov	r4, r0
 80051ee:	4608      	mov	r0, r1
 80051f0:	4611      	mov	r1, r2
 80051f2:	2200      	movs	r2, #0
 80051f4:	602a      	str	r2, [r5, #0]
 80051f6:	461a      	mov	r2, r3
 80051f8:	f7fb fd04 	bl	8000c04 <_read>
 80051fc:	1c43      	adds	r3, r0, #1
 80051fe:	d102      	bne.n	8005206 <_read_r+0x1e>
 8005200:	682b      	ldr	r3, [r5, #0]
 8005202:	b103      	cbz	r3, 8005206 <_read_r+0x1e>
 8005204:	6023      	str	r3, [r4, #0]
 8005206:	bd38      	pop	{r3, r4, r5, pc}
 8005208:	20000988 	.word	0x20000988

0800520c <_init>:
 800520c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800520e:	bf00      	nop
 8005210:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005212:	bc08      	pop	{r3}
 8005214:	469e      	mov	lr, r3
 8005216:	4770      	bx	lr

08005218 <_fini>:
 8005218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800521a:	bf00      	nop
 800521c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800521e:	bc08      	pop	{r3}
 8005220:	469e      	mov	lr, r3
 8005222:	4770      	bx	lr
